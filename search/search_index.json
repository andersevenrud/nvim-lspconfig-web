{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home A collection of common configurations for Neovim's built-in language server client . This repo handles automatically launching and initializing language servers that are installed on your system. LSP overview Neovim supports the Language Server Protocol (LSP), which means it acts as a client to language servers and includes a Lua framework vim.lsp for building enhanced LSP tools. LSP facilitates features like: go-to-definition find-references hover completion rename format refactor Neovim provides an interface for all of these features, and the language server client is designed to be highly extensible to allow plugins to integrate language server features which are not yet present in Neovim core such as auto -completion (as opposed to manual completion with omnifunc) and snippet integration . These features are not implemented in this repo, but in Neovim core. See :help lsp for more details.","title":"Home"},{"location":"#home","text":"A collection of common configurations for Neovim's built-in language server client . This repo handles automatically launching and initializing language servers that are installed on your system.","title":"Home"},{"location":"#lsp-overview","text":"Neovim supports the Language Server Protocol (LSP), which means it acts as a client to language servers and includes a Lua framework vim.lsp for building enhanced LSP tools. LSP facilitates features like: go-to-definition find-references hover completion rename format refactor Neovim provides an interface for all of these features, and the language server client is designed to be highly extensible to allow plugins to integrate language server features which are not yet present in Neovim core such as auto -completion (as opposed to manual completion with omnifunc) and snippet integration . These features are not implemented in this repo, but in Neovim core. See :help lsp for more details.","title":"LSP overview"},{"location":"install/","text":"Install Installation Requires Neovim v0.5.0 or Nightly . Update Neovim and nvim-lspconfig before reporting an issue. Install nvim-lspconfig like any other Vim plugin, e.g. with vim-plug : : Plug 'neovim/nvim-lspconfig' Quickstart Install a language server, e.g. pyright npm i -g pyright Add the language server setup to your init.vim. The server name must match those found in the table of contents in CONFIG.md lua << EOF require 'lspconfig' .pyright.setup{} EOF Create a project, this project must contain a file matching the root directory trigger. See Automatically launching language servers for additional info. mkdir test_python_project cd test_python_project git init touch main.py Launch neovim, the language server will now be attached and providing diagnostics (see :LspInfo ) nvim main.py See Keybindings and completion for mapping useful functions and enabling omnifunc completion Automatically launching language servers In order to automatically launch a language server, lspconfig searches up the directory tree from your current buffer to find a file matching the root_dir pattern defined in each server's configuration. For pyright , this is any directory containing \".git\", \"setup.py\", \"setup.cfg\", \"pyproject.toml\", or \"requirements.txt\"). Language servers require each project to have a root in order to provide completion and search across symbols that may not be defined in your current file, and to avoid having to index your entire filesystem on each startup. Enabling additional language servers Enabling most language servers is as easy as installing the language server, ensuring it is on your PATH, and adding the following to your config: lua << EOF require 'lspconfig' .rust_analyzer.setup{} EOF For a full list of servers, see CONFIG.md . This document contains installation instructions and additional, optional customization suggestions for each language server. For some servers that are not on your system path (jdtls, elixirls) you will be required to manually add cmd as an entry in the table passed to setup. Most language servers can be installed in less than a minute. Keybindings and completion nvim-lspconfig does not map keybindings or enable completion by default. Manual, triggered completion can be provided by neovim's built-in omnifunc. For autocompletion, a general purpose autocompletion plugin is required. The following example configuration provides suggested keymaps for the most commonly used language server functions, and manually triggered completion with omnifunc (\\<c-x>\\<c-o>). lua << EOF local nvim_lsp = require ( 'lspconfig' ) -- Use an on_attach function to only map the following keys -- after the language server attaches to the current buffer local on_attach = function ( client , bufnr ) local function buf_set_keymap ( ... ) vim .api.nvim_buf_set_keymap ( bufnr , ... ) end local function buf_set_option ( ... ) vim .api.nvim_buf_set_option ( bufnr , ... ) end -- Enable completion triggered by < c - x >< c - o > buf_set_option ( 'omnifunc' , 'v:lua.vim.lsp.omnifunc' ) -- Mappings. local opts = { noremap = true , silent = true } -- See `:help vim . lsp .*` for documentation on any of the below functions buf_set_keymap ( 'n' , 'gD' , '<Cmd>lua vim.lsp.buf.declaration()<CR>' , opts ) buf_set_keymap ( 'n' , 'gd' , '<Cmd>lua vim.lsp.buf.definition()<CR>' , opts ) buf_set_keymap ( 'n' , 'K' , '<Cmd>lua vim.lsp.buf.hover()<CR>' , opts ) buf_set_keymap ( 'n' , 'gi' , '<cmd>lua vim.lsp.buf.implementation()<CR>' , opts ) buf_set_keymap ( 'n' , '<C-k>' , '<cmd>lua vim.lsp.buf.signature_help()<CR>' , opts ) buf_set_keymap ( 'n' , '<space>wa' , '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>' , opts ) buf_set_keymap ( 'n' , '<space>wr' , '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>' , opts ) buf_set_keymap ( 'n' , '<space>wl' , '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>' , opts ) buf_set_keymap ( 'n' , '<space>D' , '<cmd>lua vim.lsp.buf.type_definition()<CR>' , opts ) buf_set_keymap ( 'n' , '<space>rn' , '<cmd>lua vim.lsp.buf.rename()<CR>' , opts ) buf_set_keymap ( 'n' , '<space>ca' , '<cmd>lua vim.lsp.buf.code_action()<CR>' , opts ) buf_set_keymap ( 'n' , 'gr' , '<cmd>lua vim.lsp.buf.references()<CR>' , opts ) buf_set_keymap ( 'n' , '<space>e' , '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>' , opts ) buf_set_keymap ( 'n' , '[d' , '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>' , opts ) buf_set_keymap ( 'n' , ']d' , '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>' , opts ) buf_set_keymap ( 'n' , '<space>q' , '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>' , opts ) buf_set_keymap ( \"n\" , \"<space>f\" , \"<cmd>lua vim.lsp.buf.formatting()<CR>\" , opts ) end -- Use a loop to conveniently call 'setup' on multiple servers and -- map buffer local keybindings when the language server attaches local servers = { \"pyright\" , \"rust_analyzer\" , \"tsserver\" } for _ , lsp in ipairs ( servers ) do nvim_lsp[ lsp ].setup { on_attach = on_attach , flags = { debounce_text_changes = 150 , } } end EOF The on_attach hook is used to only activate the bindings after the language server attaches to the current buffer. Debugging The two most common reasons a language server does not start or attach are: The language server is not installed. nvim-lspconfig does not install language servers for you. You should be able to run the cmd defined in each server's lua module from the command line and see that the language server starts. If the cmd is an executable name, ensure it is on your path. Not triggering root detection. The language server will only start if it is opened in a directory, or child directory, containing a file which signals the root of the project. Most of the time, this is a .git folder, but each server defines the root config in the lua file. See CONFIG.md or the source for the list of root directories. :LspInfo provides a handy overview of your active and configured language servers. Note, that it will not report any configuration changes applied in on_new_config . Before reporting a bug, check your logs and the output of :LspInfo . Add the following to your init.vim to enable logging: lua << EOF vim . lsp .set_log_level ( \"debug\" ) EOF Attempt to run the language server, and open the log with: :lua vim.cmd('e'..vim.lsp.get_log_path()) Most of the time, the reason for failure is present in the logs. Built-in commands :LspInfo shows the status of active and configured language servers. The following support tab-completion for all arguments: :LspStart <config_name> Start the requested server name. Will only successfully start if the command detects a root directory matching the current config. Pass autostart = false to your .setup{} call for a language server if you would like to launch clients solely with this command. Defaults to all servers matching current buffer filetype. :LspStop <client_id> Defaults to stopping all buffer clients. :LspRestart <client_id> Defaults to restarting all buffer clients. The wiki Please see the wiki for additional topics, including: Installing language servers automatically Snippets support Project local settings Recommended plugins for enhanced language server features Windows In order for neovim to launch certain executables on Windows, it must append .cmd to the command name. To work around this, manually append .cmd to the entry cmd in a given plugin's setup{} call.","title":"Install"},{"location":"install/#install","text":"","title":"Install"},{"location":"install/#installation","text":"Requires Neovim v0.5.0 or Nightly . Update Neovim and nvim-lspconfig before reporting an issue. Install nvim-lspconfig like any other Vim plugin, e.g. with vim-plug : : Plug 'neovim/nvim-lspconfig'","title":"Installation"},{"location":"install/#quickstart","text":"Install a language server, e.g. pyright npm i -g pyright Add the language server setup to your init.vim. The server name must match those found in the table of contents in CONFIG.md lua << EOF require 'lspconfig' .pyright.setup{} EOF Create a project, this project must contain a file matching the root directory trigger. See Automatically launching language servers for additional info. mkdir test_python_project cd test_python_project git init touch main.py Launch neovim, the language server will now be attached and providing diagnostics (see :LspInfo ) nvim main.py See Keybindings and completion for mapping useful functions and enabling omnifunc completion","title":"Quickstart"},{"location":"install/#automatically-launching-language-servers","text":"In order to automatically launch a language server, lspconfig searches up the directory tree from your current buffer to find a file matching the root_dir pattern defined in each server's configuration. For pyright , this is any directory containing \".git\", \"setup.py\", \"setup.cfg\", \"pyproject.toml\", or \"requirements.txt\"). Language servers require each project to have a root in order to provide completion and search across symbols that may not be defined in your current file, and to avoid having to index your entire filesystem on each startup.","title":"Automatically launching language servers"},{"location":"install/#enabling-additional-language-servers","text":"Enabling most language servers is as easy as installing the language server, ensuring it is on your PATH, and adding the following to your config: lua << EOF require 'lspconfig' .rust_analyzer.setup{} EOF For a full list of servers, see CONFIG.md . This document contains installation instructions and additional, optional customization suggestions for each language server. For some servers that are not on your system path (jdtls, elixirls) you will be required to manually add cmd as an entry in the table passed to setup. Most language servers can be installed in less than a minute.","title":"Enabling additional language servers"},{"location":"install/#keybindings-and-completion","text":"nvim-lspconfig does not map keybindings or enable completion by default. Manual, triggered completion can be provided by neovim's built-in omnifunc. For autocompletion, a general purpose autocompletion plugin is required. The following example configuration provides suggested keymaps for the most commonly used language server functions, and manually triggered completion with omnifunc (\\<c-x>\\<c-o>). lua << EOF local nvim_lsp = require ( 'lspconfig' ) -- Use an on_attach function to only map the following keys -- after the language server attaches to the current buffer local on_attach = function ( client , bufnr ) local function buf_set_keymap ( ... ) vim .api.nvim_buf_set_keymap ( bufnr , ... ) end local function buf_set_option ( ... ) vim .api.nvim_buf_set_option ( bufnr , ... ) end -- Enable completion triggered by < c - x >< c - o > buf_set_option ( 'omnifunc' , 'v:lua.vim.lsp.omnifunc' ) -- Mappings. local opts = { noremap = true , silent = true } -- See `:help vim . lsp .*` for documentation on any of the below functions buf_set_keymap ( 'n' , 'gD' , '<Cmd>lua vim.lsp.buf.declaration()<CR>' , opts ) buf_set_keymap ( 'n' , 'gd' , '<Cmd>lua vim.lsp.buf.definition()<CR>' , opts ) buf_set_keymap ( 'n' , 'K' , '<Cmd>lua vim.lsp.buf.hover()<CR>' , opts ) buf_set_keymap ( 'n' , 'gi' , '<cmd>lua vim.lsp.buf.implementation()<CR>' , opts ) buf_set_keymap ( 'n' , '<C-k>' , '<cmd>lua vim.lsp.buf.signature_help()<CR>' , opts ) buf_set_keymap ( 'n' , '<space>wa' , '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>' , opts ) buf_set_keymap ( 'n' , '<space>wr' , '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>' , opts ) buf_set_keymap ( 'n' , '<space>wl' , '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>' , opts ) buf_set_keymap ( 'n' , '<space>D' , '<cmd>lua vim.lsp.buf.type_definition()<CR>' , opts ) buf_set_keymap ( 'n' , '<space>rn' , '<cmd>lua vim.lsp.buf.rename()<CR>' , opts ) buf_set_keymap ( 'n' , '<space>ca' , '<cmd>lua vim.lsp.buf.code_action()<CR>' , opts ) buf_set_keymap ( 'n' , 'gr' , '<cmd>lua vim.lsp.buf.references()<CR>' , opts ) buf_set_keymap ( 'n' , '<space>e' , '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>' , opts ) buf_set_keymap ( 'n' , '[d' , '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>' , opts ) buf_set_keymap ( 'n' , ']d' , '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>' , opts ) buf_set_keymap ( 'n' , '<space>q' , '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>' , opts ) buf_set_keymap ( \"n\" , \"<space>f\" , \"<cmd>lua vim.lsp.buf.formatting()<CR>\" , opts ) end -- Use a loop to conveniently call 'setup' on multiple servers and -- map buffer local keybindings when the language server attaches local servers = { \"pyright\" , \"rust_analyzer\" , \"tsserver\" } for _ , lsp in ipairs ( servers ) do nvim_lsp[ lsp ].setup { on_attach = on_attach , flags = { debounce_text_changes = 150 , } } end EOF The on_attach hook is used to only activate the bindings after the language server attaches to the current buffer.","title":"Keybindings and completion"},{"location":"install/#debugging","text":"The two most common reasons a language server does not start or attach are: The language server is not installed. nvim-lspconfig does not install language servers for you. You should be able to run the cmd defined in each server's lua module from the command line and see that the language server starts. If the cmd is an executable name, ensure it is on your path. Not triggering root detection. The language server will only start if it is opened in a directory, or child directory, containing a file which signals the root of the project. Most of the time, this is a .git folder, but each server defines the root config in the lua file. See CONFIG.md or the source for the list of root directories. :LspInfo provides a handy overview of your active and configured language servers. Note, that it will not report any configuration changes applied in on_new_config . Before reporting a bug, check your logs and the output of :LspInfo . Add the following to your init.vim to enable logging: lua << EOF vim . lsp .set_log_level ( \"debug\" ) EOF Attempt to run the language server, and open the log with: :lua vim.cmd('e'..vim.lsp.get_log_path()) Most of the time, the reason for failure is present in the logs.","title":"Debugging"},{"location":"install/#built-in-commands","text":":LspInfo shows the status of active and configured language servers. The following support tab-completion for all arguments: :LspStart <config_name> Start the requested server name. Will only successfully start if the command detects a root directory matching the current config. Pass autostart = false to your .setup{} call for a language server if you would like to launch clients solely with this command. Defaults to all servers matching current buffer filetype. :LspStop <client_id> Defaults to stopping all buffer clients. :LspRestart <client_id> Defaults to restarting all buffer clients.","title":"Built-in commands"},{"location":"install/#the-wiki","text":"Please see the wiki for additional topics, including: Installing language servers automatically Snippets support Project local settings Recommended plugins for enhanced language server features","title":"The wiki"},{"location":"install/#windows","text":"In order for neovim to launch certain executables on Windows, it must append .cmd to the command name. To work around this, manually append .cmd to the entry cmd in a given plugin's setup{} call.","title":"Windows"},{"location":"lsp/","text":"LSP In the navigation you can find all currently supported Language Servers.","title":"LSP"},{"location":"lsp/#lsp","text":"In the navigation you can find all currently supported Language Servers.","title":"LSP"},{"location":"lsp/als/","text":"Ada (als) https://github.com/AdaCore/ada_language_server Installation instructions can be found here . Can be configured by passing a \"settings\" object to als.setup{} : require ( 'lspconfig' ). als . setup { settings = { ada = { projectFile = \"project.gpr\" ; scenarioVariables = { ... }; } } } Setup require 'lspconfig' . als . setup {} Default Values cmd = { \"ada_language_server\" } filetypes = { \"ada\" } root_dir = util . root_pattern ( \"Makefile\" , \".git\" )","title":"Ada (als)"},{"location":"lsp/als/#ada-als","text":"https://github.com/AdaCore/ada_language_server Installation instructions can be found here . Can be configured by passing a \"settings\" object to als.setup{} : require ( 'lspconfig' ). als . setup { settings = { ada = { projectFile = \"project.gpr\" ; scenarioVariables = { ... }; } } }","title":"Ada (als)"},{"location":"lsp/als/#setup","text":"require 'lspconfig' . als . setup {}","title":"Setup"},{"location":"lsp/als/#default-values","text":"cmd = { \"ada_language_server\" } filetypes = { \"ada\" } root_dir = util . root_pattern ( \"Makefile\" , \".git\" )","title":"Default Values"},{"location":"lsp/angularls/","text":"Angular (angularls) https://github.com/angular/vscode-ng-language-service angular-language-server can be installed via npm npm install -g @angular/language-server . Note, that if you override the default cmd , you must also update on_new_config to set new_config.cmd during startup. local project_library_path = \"/path/to/project/lib\" local cmd = { \"ngserver\" , \"--stdio\" , \"--tsProbeLocations\" , project_library_path , \"--ngProbeLocations\" , project_library_path } require 'lspconfig' . angularls . setup { cmd = cmd , on_new_config = function ( new_config , new_root_dir ) new_config . cmd = cmd end , } Setup require 'lspconfig' . angularls . setup {} Default Values cmd = { \"ngserver\" , \"--stdio\" , \"--tsProbeLocations\" , \"\" , \"--ngProbeLocations\" , \"\" } filetypes = { \"typescript\" , \"html\" , \"typescriptreact\" , \"typescript.tsx\" } root_dir = root_pattern ( \"angular.json\" , \".git\" )","title":"Angular (angularls)"},{"location":"lsp/angularls/#angular-angularls","text":"https://github.com/angular/vscode-ng-language-service angular-language-server can be installed via npm npm install -g @angular/language-server . Note, that if you override the default cmd , you must also update on_new_config to set new_config.cmd during startup. local project_library_path = \"/path/to/project/lib\" local cmd = { \"ngserver\" , \"--stdio\" , \"--tsProbeLocations\" , project_library_path , \"--ngProbeLocations\" , project_library_path } require 'lspconfig' . angularls . setup { cmd = cmd , on_new_config = function ( new_config , new_root_dir ) new_config . cmd = cmd end , }","title":"Angular (angularls)"},{"location":"lsp/angularls/#setup","text":"require 'lspconfig' . angularls . setup {}","title":"Setup"},{"location":"lsp/angularls/#default-values","text":"cmd = { \"ngserver\" , \"--stdio\" , \"--tsProbeLocations\" , \"\" , \"--ngProbeLocations\" , \"\" } filetypes = { \"typescript\" , \"html\" , \"typescriptreact\" , \"typescript.tsx\" } root_dir = root_pattern ( \"angular.json\" , \".git\" )","title":"Default Values"},{"location":"lsp/bashls/","text":"Bash (bashls) https://github.com/mads-hartmann/bash-language-server Language server for bash, written using tree sitter in typescript. Setup require 'lspconfig' . bashls . setup {} Default Values cmd = { \"bash-language-server\" , \"start\" } cmd_env = { GLOB_PATTERN = \"*@(.sh|.inc|.bash|.command)\" } filetypes = { \"sh\" } root_dir = vim 's starting directory","title":"Bash (bashls)"},{"location":"lsp/bashls/#bash-bashls","text":"https://github.com/mads-hartmann/bash-language-server Language server for bash, written using tree sitter in typescript.","title":"Bash (bashls)"},{"location":"lsp/bashls/#setup","text":"require 'lspconfig' . bashls . setup {}","title":"Setup"},{"location":"lsp/bashls/#default-values","text":"cmd = { \"bash-language-server\" , \"start\" } cmd_env = { GLOB_PATTERN = \"*@(.sh|.inc|.bash|.command)\" } filetypes = { \"sh\" } root_dir = vim 's starting directory","title":"Default Values"},{"location":"lsp/beancount/","text":"Beancount (beancount) https://github.com/polarmutex/beancount-language-server#installation See https://github.com/polarmutex/beancount-language-server#configuration for configuration options Setup require 'lspconfig' . beancount . setup {} Default Values cmd = { \"beancount-langserver\" } filetypes = { \"beancount\" } init_options = { journalFile = \"\" , pythonPath = \"python3\" } root_dir = root_pattern ( \"elm.json\" )","title":"Beancount (beancount)"},{"location":"lsp/beancount/#beancount-beancount","text":"https://github.com/polarmutex/beancount-language-server#installation See https://github.com/polarmutex/beancount-language-server#configuration for configuration options","title":"Beancount (beancount)"},{"location":"lsp/beancount/#setup","text":"require 'lspconfig' . beancount . setup {}","title":"Setup"},{"location":"lsp/beancount/#default-values","text":"cmd = { \"beancount-langserver\" } filetypes = { \"beancount\" } init_options = { journalFile = \"\" , pythonPath = \"python3\" } root_dir = root_pattern ( \"elm.json\" )","title":"Default Values"},{"location":"lsp/ccls/","text":"C like (ccls) https://github.com/MaskRay/ccls/wiki ccls relies on a JSON compilation database specified as compile_commands.json or, for simpler projects, a compile_flags.txt. For details on how to automatically generate one using CMake look here . Customization options are passed to ccls at initialization time via init_options, a list of available options can be found here . For example: local lspconfig = require 'lspconfig' lspconfig . ccls . setup { init_options = { compilationDatabaseDirectory = \"build\" ; index = { threads = 0 ; }; clang = { excludeArgs = { \"-frounding-math\" } ; }; } } Setup require 'lspconfig' . ccls . setup {} Default Values cmd = { \"ccls\" } filetypes = { \"c\" , \"cpp\" , \"objc\" , \"objcpp\" } root_dir = root_pattern ( \"compile_commands.json\" , \"compile_flags.txt\" , \".git\" ) or dirname","title":"C like (ccls)"},{"location":"lsp/ccls/#c-like-ccls","text":"https://github.com/MaskRay/ccls/wiki ccls relies on a JSON compilation database specified as compile_commands.json or, for simpler projects, a compile_flags.txt. For details on how to automatically generate one using CMake look here . Customization options are passed to ccls at initialization time via init_options, a list of available options can be found here . For example: local lspconfig = require 'lspconfig' lspconfig . ccls . setup { init_options = { compilationDatabaseDirectory = \"build\" ; index = { threads = 0 ; }; clang = { excludeArgs = { \"-frounding-math\" } ; }; } }","title":"C like (ccls)"},{"location":"lsp/ccls/#setup","text":"require 'lspconfig' . ccls . setup {}","title":"Setup"},{"location":"lsp/ccls/#default-values","text":"cmd = { \"ccls\" } filetypes = { \"c\" , \"cpp\" , \"objc\" , \"objcpp\" } root_dir = root_pattern ( \"compile_commands.json\" , \"compile_flags.txt\" , \".git\" ) or dirname","title":"Default Values"},{"location":"lsp/clangd/","text":"C like (clangd) https://clangd.llvm.org/installation.html NOTE: Clang >= 9 is recommended! See this issue for more . clangd relies on a JSON compilation database specified as compile_commands.json or, for simpler projects, a compile_flags.txt. For details on how to automatically generate one using CMake look here . Setup require 'lspconfig' . clangd . setup {} Commands ClangdSwitchSourceHeader: Switch between source/header Default Values capabilities = default capabilities , with offsetEncoding utf - 8 cmd = { \"clangd\" , \"--background-index\" } filetypes = { \"c\" , \"cpp\" , \"objc\" , \"objcpp\" } on_init = function to handle changing offsetEncoding root_dir = root_pattern ( \"compile_commands.json\" , \"compile_flags.txt\" , \".git\" ) or dirname","title":"C like (clangd)"},{"location":"lsp/clangd/#c-like-clangd","text":"https://clangd.llvm.org/installation.html NOTE: Clang >= 9 is recommended! See this issue for more . clangd relies on a JSON compilation database specified as compile_commands.json or, for simpler projects, a compile_flags.txt. For details on how to automatically generate one using CMake look here .","title":"C like (clangd)"},{"location":"lsp/clangd/#setup","text":"require 'lspconfig' . clangd . setup {}","title":"Setup"},{"location":"lsp/clangd/#commands","text":"ClangdSwitchSourceHeader: Switch between source/header","title":"Commands"},{"location":"lsp/clangd/#default-values","text":"capabilities = default capabilities , with offsetEncoding utf - 8 cmd = { \"clangd\" , \"--background-index\" } filetypes = { \"c\" , \"cpp\" , \"objc\" , \"objcpp\" } on_init = function to handle changing offsetEncoding root_dir = root_pattern ( \"compile_commands.json\" , \"compile_flags.txt\" , \".git\" ) or dirname","title":"Default Values"},{"location":"lsp/clojure_lsp/","text":"Clojure (clojure_lsp) https://github.com/snoe/clojure-lsp Clojure Language Server Setup require 'lspconfig' . clojure_lsp . setup {} Default Values cmd = { \"clojure-lsp\" } filetypes = { \"clojure\" , \"edn\" } root_dir = root_pattern ( \"project.clj\" , \"deps.edn\" , \".git\" )","title":"Clojure (clojure_lsp)"},{"location":"lsp/clojure_lsp/#clojure-clojure_lsp","text":"https://github.com/snoe/clojure-lsp Clojure Language Server","title":"Clojure (clojure_lsp)"},{"location":"lsp/clojure_lsp/#setup","text":"require 'lspconfig' . clojure_lsp . setup {}","title":"Setup"},{"location":"lsp/clojure_lsp/#default-values","text":"cmd = { \"clojure-lsp\" } filetypes = { \"clojure\" , \"edn\" } root_dir = root_pattern ( \"project.clj\" , \"deps.edn\" , \".git\" )","title":"Default Values"},{"location":"lsp/cmake/","text":"CMake (cmake) https://github.com/regen100/cmake-language-server CMake LSP Implementation Setup require 'lspconfig' . cmake . setup {} Default Values cmd = { \"cmake-language-server\" } filetypes = { \"cmake\" } init_options = { buildDirectory = \"build\" } root_dir = root_pattern ( \".git\" , \"compile_commands.json\" , \"build\" ) or dirname","title":"CMake (cmake)"},{"location":"lsp/cmake/#cmake-cmake","text":"https://github.com/regen100/cmake-language-server CMake LSP Implementation","title":"CMake (cmake)"},{"location":"lsp/cmake/#setup","text":"require 'lspconfig' . cmake . setup {}","title":"Setup"},{"location":"lsp/cmake/#default-values","text":"cmd = { \"cmake-language-server\" } filetypes = { \"cmake\" } init_options = { buildDirectory = \"build\" } root_dir = root_pattern ( \".git\" , \"compile_commands.json\" , \"build\" ) or dirname","title":"Default Values"},{"location":"lsp/codeqlls/","text":"CodeQL (codeqlls) Reference: https://help.semmle.com/codeql/codeql-cli.html Binaries: https://github.com/github/codeql-cli-binaries Setup require 'lspconfig' . codeqlls . setup {} Default Values before_init = function ( initialize_params ) initialize_params [ \"workspaceFolders\" ] = { { name = \"workspace\" , uri = initialize_params [ \"rootUri\" ], }, } end , cmd = { \"codeql\" , \"execute\" , \"language-server\" , \"--check-errors\" , \"ON_CHANGE\" , \"-q\" } filetypes = { \"ql\" } log_level = 2 root_dir = function ( fname ) return root_pattern ( fname ) or util . path . dirname ( fname ) end , settings = { search_path = \"list containing all search paths, eg: '~/codeql-home/codeql-repo'\" }","title":"CodeQL (codeqlls)"},{"location":"lsp/codeqlls/#codeql-codeqlls","text":"Reference: https://help.semmle.com/codeql/codeql-cli.html Binaries: https://github.com/github/codeql-cli-binaries","title":"CodeQL (codeqlls)"},{"location":"lsp/codeqlls/#setup","text":"require 'lspconfig' . codeqlls . setup {}","title":"Setup"},{"location":"lsp/codeqlls/#default-values","text":"before_init = function ( initialize_params ) initialize_params [ \"workspaceFolders\" ] = { { name = \"workspace\" , uri = initialize_params [ \"rootUri\" ], }, } end , cmd = { \"codeql\" , \"execute\" , \"language-server\" , \"--check-errors\" , \"ON_CHANGE\" , \"-q\" } filetypes = { \"ql\" } log_level = 2 root_dir = function ( fname ) return root_pattern ( fname ) or util . path . dirname ( fname ) end , settings = { search_path = \"list containing all search paths, eg: '~/codeql-home/codeql-repo'\" }","title":"Default Values"},{"location":"lsp/crystalline/","text":"Crystal (crystalline) https://github.com/elbywan/crystalline Crystal language server. Setup require 'lspconfig' . crystalline . setup {} Default Values cmd = { \"crystalline\" } filetypes = { \"crystal\" } root_dir = root_pattern ( 'shard.yml' , '.git' ) or dirname","title":"Crystal (crystalline)"},{"location":"lsp/crystalline/#crystal-crystalline","text":"https://github.com/elbywan/crystalline Crystal language server.","title":"Crystal (crystalline)"},{"location":"lsp/crystalline/#setup","text":"require 'lspconfig' . crystalline . setup {}","title":"Setup"},{"location":"lsp/crystalline/#default-values","text":"cmd = { \"crystalline\" } filetypes = { \"crystal\" } root_dir = root_pattern ( 'shard.yml' , '.git' ) or dirname","title":"Default Values"},{"location":"lsp/cssls/","text":"CSS (cssls) https://github.com/hrsh7th/vscode-langservers-extracted css-languageserver can be installed via npm : npm i -g vscode-langservers-extracted Neovim does not currently include built-in snippets. vscode-css-language-server only provides completions when snippet support is enabled. To enable completion, install a snippet plugin and add the following override to your language client capabilities during setup. --Enable (broadcasting) snippet capability for completion local capabilities = vim . lsp . protocol . make_client_capabilities () capabilities . textDocument . completion . completionItem . snippetSupport = true require 'lspconfig' . cssls . setup { capabilities = capabilities , } Setup require 'lspconfig' . cssls . setup {} Default Values cmd = { \"vscode-css-language-server\" , \"--stdio\" } filetypes = { \"css\" , \"scss\" , \"less\" } root_dir = root_pattern ( \"package.json\" ) settings = { css = { validate = true }, less = { validate = true }, scss = { validate = true } }","title":"CSS (cssls)"},{"location":"lsp/cssls/#css-cssls","text":"https://github.com/hrsh7th/vscode-langservers-extracted css-languageserver can be installed via npm : npm i -g vscode-langservers-extracted Neovim does not currently include built-in snippets. vscode-css-language-server only provides completions when snippet support is enabled. To enable completion, install a snippet plugin and add the following override to your language client capabilities during setup. --Enable (broadcasting) snippet capability for completion local capabilities = vim . lsp . protocol . make_client_capabilities () capabilities . textDocument . completion . completionItem . snippetSupport = true require 'lspconfig' . cssls . setup { capabilities = capabilities , }","title":"CSS (cssls)"},{"location":"lsp/cssls/#setup","text":"require 'lspconfig' . cssls . setup {}","title":"Setup"},{"location":"lsp/cssls/#default-values","text":"cmd = { \"vscode-css-language-server\" , \"--stdio\" } filetypes = { \"css\" , \"scss\" , \"less\" } root_dir = root_pattern ( \"package.json\" ) settings = { css = { validate = true }, less = { validate = true }, scss = { validate = true } }","title":"Default Values"},{"location":"lsp/dartls/","text":"Dart (dartls) https://github.com/dart-lang/sdk/tree/master/pkg/analysis_server/tool/lsp_spec Language server for dart. Setup require 'lspconfig' . dartls . setup {} Default Values cmd = { \"dart\" , \"/opt/dart-sdk/bin/snapshots/analysis_server.dart.snapshot\" , \"--lsp\" } filetypes = { \"dart\" } init_options = { closingLabels = false , flutterOutline = false , onlyAnalyzeProjectsWithOpenFiles = false , outline = false , suggestFromUnimportedLibraries = true } root_dir = root_pattern ( \"pubspec.yaml\" ) This server accepts configuration via the settings key. Available settings dart.additionalAnalyzerFileExtensions Type: array Default: {} Array items: {type = \"string\"} Additional file extensions that should be analyzed (usually used in combination with analyzer plugins). dart.allowAnalytics Type: boolean Default: true Whether to send analytics such as startup timings\\, frequency of use of features and analysis server crashes. dart.allowTestsOutsideTestFolder Type: boolean null dart.analysisExcludedFolders Type: array Default: {} Array items: {type = \"string\"} An array of paths to be excluded from Dart analysis. This option should usually be set at the Workspace level. Excluded folders will also be ignored when detecting project types. dart.analysisServerFolding Type: boolean Default: true Whether to use folding data from the Dart analysis server instead of the built-in VS Code indent-based folding. dart.analyzeAngularTemplates Type: boolean Default: true null dart.analyzerAdditionalArgs Type: array Default: {} Array items: {type = \"string\"} Additional arguments to pass to the Dart analysis server. dart.analyzerDiagnosticsPort Type: null|number Default: vim.NIL The port number to be used for the Dart analyzer diagnostic server. dart.analyzerInstrumentationLogFile Type: null|string Default: vim.NIL The path to a log file for very detailed logging in the Dart analysis server that may be useful when trying to diagnose analysis server issues. dart.analyzerLogFile Type: null|string Default: vim.NIL The path to a log file for communication between Dart Code and the analysis server. dart.analyzerPath Type: null|string Default: vim.NIL The path to a custom Dart analysis server. dart.analyzerSshHost Type: null|string Default: vim.NIL An SSH host to run the analysis server. This can be useful when modifying code on a remote machine using SSHFS. dart.analyzerVmServicePort Type: null|number Default: vim.NIL The port number to be used for the Dart analysis server VM service. dart.autoImportCompletions Type: boolean Default: true Whether to include symbols that have not been imported in the code completion list and automatically insert the required import when selecting them (requires restart). dart.automaticCommentSlashes enum { \"none\", \"tripleSlash\", \"all\" } Default: \"tripleSlash\" null dart.buildRunnerAdditionalArgs Type: array Default: {} Array items: {type = \"string\"} null dart.checkForSdkUpdates Type: boolean Default: true Whether to check you are using the latest version of the Dart SDK at startup. dart.cliConsole enum { \"debugConsole\", \"terminal\", \"externalTerminal\" } Default: \"debugConsole\" Whether to run Dart CLI apps in the Debug Console or a terminal. The Debug Console has more functionality because the process is controlled by the debug adapter\\, but is unable to accept input from the user via stdin. dart.closingLabels Type: boolean Default: true Whether to show annotations against constructor\\, method invocations and lists that span multiple lines. dart.completeFunctionCalls Type: boolean Default: true null dart.dapLogFile Type: null|string Default: vim.NIL null dart.debugExtensionBackendProtocol enum { \"sse\", \"ws\" } Default: \"ws\" The protocol to use for the Dart Debug Extension backend service and injected client. Using WebSockets can improve performance but may fail when connecting through some proxy servers. dart.debugExternalLibraries Type: boolean null dart.debugSdkLibraries Type: boolean null dart.devToolsBrowser enum { \"chrome\", \"default\" } Default: \"chrome\" Whether to launch external DevTools windows using Chrome or the system default browser. dart.devToolsLogFile Type: null|string Default: vim.NIL The path to a low-traffic log file for the Dart DevTools service. dart.devToolsPort Type: null|number Default: vim.NIL The port number to be used for the Dart DevTools. dart.devToolsReuseWindows Type: boolean Default: true Whether to try to reuse existing DevTools windows instead of launching new ones. Only works for instances of DevTools launched by the DevTools server on the local machine. dart.devToolsTheme enum { \"dark\", \"light\" } Default: \"dark\" The theme to use for Dart DevTools. dart.doNotFormat Type: array Default: {} Array items: {type = \"string\"} null dart.embedDevTools Type: boolean Default: true null dart.enableCompletionCommitCharacters Type: boolean null dart.enableSdkFormatter Type: boolean Default: true null dart.enableServerSnippets Type: boolean null dart.enableSnippets Type: boolean Default: true Whether to include Dart and Flutter snippets in code completion. dart.env Type: object Default: vim.empty_dict() Additional environment variables to be added to all Dart\\/Flutter processes spawned by the Dart and Flutter extensions. dart.evaluateGettersInDebugViews Type: boolean Default: true Whether to evaluate getters in order to display them in debug views (such as the Variables\\, Watch and Hovers views). dart.evaluateToStringInDebugViews Type: boolean Default: true Whether to call toString() on objects when rendering them in debug views (such as the Variables\\, Watch and Hovers views). Only applies to views of 100 or fewer values for performance reasons. dart.extensionLogFile Type: null|string Default: vim.NIL The path to a low-traffic log file for basic extension and editor issues. dart.flutterAdbConnectOnChromeOs Type: boolean null dart.flutterAdditionalArgs Type: array Default: {} Array items: {type = \"string\"} null dart.flutterAttachAdditionalArgs Type: array Default: {} Array items: {type = \"string\"} null dart.flutterCreateAndroidLanguage enum { \"java\", \"kotlin\" } Default: \"kotlin\" The programming language to use for Android apps when creating new projects using the \\'Flutter\\: New Application Project\\' command. dart.flutterCreateIOSLanguage enum { \"objc\", \"swift\" } Default: \"swift\" The programming language to use for iOS apps when creating new projects using the \\'Flutter\\: New Application Project\\' command. dart.flutterCreateOffline Type: boolean Whether to use offline mode when creating new projects with the \\'Flutter\\: New Application Project\\' command. dart.flutterCreateOrganization Type: null|string Default: vim.NIL null dart.flutterCustomEmulators Type: array Default: {} Array items: {properties = {args = {items = {type = \"string\"},type = \"array\"},env = vim.empty_dict(),executable = {type = \"string\"},id = {type = \"string\"},name = {type = \"string\"}},type = \"object\"} Custom emulators to show in the emulator list for easier launching. If IDs match existing emulators returned by Flutter\\, the custom emulators will override them. dart.flutterDaemonLogFile Type: null|string Default: vim.NIL null dart.flutterGutterIcons Type: boolean Default: true Whether to show Flutter icons and colors in the editor gutter. dart.flutterHotReloadOnSave enum { \"never\", \"always\", \"manual\" } Default: \"manual\" null dart.flutterHotRestartOnSave Type: boolean Default: true Whether to automatically send a Hot Restart request during a debug session when saving files if Hot Reload is not available but Hot Restart is. dart.flutterOutline Type: boolean Default: true Whether to show the Flutter Outline tree in the sidebar. dart.flutterRunAdditionalArgs Type: array Default: {} Array items: {type = \"string\"} null dart.flutterRunLogFile Type: null|string Default: vim.NIL null dart.flutterScreenshotPath Type: null|string Default: vim.NIL The path to a directory to save Flutter screenshots. dart.flutterSdkPath Type: null|string Default: vim.NIL null dart.flutterSdkPaths Type: array Default: {} Array items: {type = \"string\"} An array of paths that either directly point to a Flutter SDK or the parent directory of multiple Flutter SDKs. When set\\, the version number in the status bar can be used to quickly switch between SDKs. dart.flutterSelectDeviceWhenConnected Type: boolean Default: true Whether to set newly connected devices as the current device in Flutter projects. dart.flutterShowEmulators enum { \"local\", \"always\" } Default: \"local\" null dart.flutterShowWebServerDevice enum { \"remote\", \"always\" } Default: \"remote\" null dart.flutterStructuredErrors Type: boolean Default: true null dart.flutterTestAdditionalArgs Type: array Default: {} Array items: {type = \"string\"} null dart.flutterTestLogFile Type: null|string Default: vim.NIL null dart.flutterTrackWidgetCreation Type: boolean Default: true null dart.flutterWebRenderer enum { \"auto\", \"html\", \"canvaskit\" } Default: \"auto\" null dart.hotReloadProgress enum { \"notification\", \"statusBar\" } Default: \"notification\" Determines how to display Hot Restart and Hot Reload progress. dart.insertArgumentPlaceholders Type: boolean Default: true null dart.lineLength Type: integer Default: 80 The maximum length of a line of code. This is used by the document formatter. dart.lspSnippetTextEdits Type: boolean Default: true null dart.maxLogLineLength Type: number Default: 2000 The maximum length of a line in the log file. Lines longer than this will be truncated and suffixed with an ellipsis. dart.notifyAnalyzerErrors Type: boolean Default: true Whether to show a notification the first few times an analysis server exception occurs. dart.openDevTools enum { \"never\", \"flutter\", \"always\" } Default: \"never\" Whether to automatically open DevTools at the start of a debug session. If embedded DevTools is enabled\\, this will launch the Widget Inspector embedded for Flutter projects\\, or launch DevTools externally in a browser for Dart projects. dart.openTestView Type: array Default: { \"testRunStart\" } Array items: {enum = { \"testRunStart\", \"testFailure\" }} When to automatically switch focus to the test list (array to support multiple values). dart.previewBazelWorkspaceCustomScripts Type: boolean null dart.previewCommitCharacters Type: boolean EXPERIMENTAL\\: Whether to enable commit characters for the LSP server. In a future release\\, the dart.enableCompletionCommitCharacters setting will also apply to LSP. dart.previewFlutterUiGuides Type: boolean null dart.previewFlutterUiGuidesCustomTracking Type: boolean EXPERIMENTAL\\: Whether to enable custom tracking of Flutter UI guidelines (to hide some latency of waiting for the next Flutter Outline). dart.previewHotReloadOnSaveWatcher Type: boolean null dart.previewLsp Type: null|boolean Default: vim.NIL null dart.promptToGetPackages Type: boolean Default: true Whether to prompt to get packages when opening a project with out of date packages. dart.promptToRunIfErrors Type: boolean Default: true Whether to prompt before running if there are errors in your project. Test scripts will be excluded from the check unless they\\'re the script being run. dart.pubAdditionalArgs Type: array Default: {} Array items: {type = \"string\"} Additional args to pass to all `pub` commands. dart.pubTestLogFile Type: null|string Default: vim.NIL null dart.runPubGetOnPubspecChanges Type: boolean Default: true null dart.sdkPath Type: null|string Default: vim.NIL null dart.sdkPaths Type: array Default: {} Array items: {type = \"string\"} An array of paths that either directly point to a Dart SDK or the parent directory of multiple Dart SDKs. When set\\, the version number in the status bar can be used to quickly switch between SDKs. dart.shareDevToolsWithFlutter Type: boolean Default: true Whether to eagerly run DevTools for Flutter workspaces and share the spawned server with `flutter run`. dart.showDartDeveloperLogs Type: boolean Default: true null dart.showDartPadSampleCodeLens Type: boolean Default: true Whether to show CodeLens actions in the editor for opening online DartPad samples. dart.showDevToolsDebugToolBarButtons Type: boolean Default: true Whether to show DevTools buttons in the Debug toolbar. dart.showIgnoreQuickFixes Type: boolean Default: true Whether to show quick fixes for ignoring hints and lints. dart.showInspectorNotificationsForWidgetErrors Type: boolean Default: true null dart.showMainCodeLens Type: boolean Default: true Whether to show CodeLens actions in the editor for quick running \\/ debugging scripts with main functions. dart.showSkippedTests Type: boolean Default: true null dart.showTestCodeLens Type: boolean Default: true Whether to show CodeLens actions in the editor for quick running \\/ debugging tests. dart.showTodos Type: boolean Default: true Whether to show TODOs in the Problems list. dart.triggerSignatureHelpAutomatically Type: boolean Whether to automatically trigger signature help when pressing keys such as \\, and (. dart.updateImportsOnRename Type: boolean Default: true Whether to automatically update imports when moving or renaming files. Currently only supports single file moves \\/ renames. dart.useKnownChromeOSPorts Type: boolean Default: true Whether to use specific ports for the VM service and DevTools when running in Chrome OS. This is required to connect from the native Chrome OS browser but will prevent apps from launching if the ports are already in-use (for example if trying to run a second app). dart.vmAdditionalArgs Type: array Default: {} Array items: {type = \"string\"} Additional args to pass to the Dart VM when running\\/debugging command line apps. dart.vmServiceLogFile Type: null|string Default: vim.NIL null dart.warnWhenEditingFilesInPubCache Type: boolean Default: true null dart.warnWhenEditingFilesOutsideWorkspace Type: boolean Default: true Whether to show a warning when modifying files outside of the workspace. dart.webDaemonLogFile Type: null|string Default: vim.NIL null","title":"Dart (dartls)"},{"location":"lsp/dartls/#dart-dartls","text":"https://github.com/dart-lang/sdk/tree/master/pkg/analysis_server/tool/lsp_spec Language server for dart.","title":"Dart (dartls)"},{"location":"lsp/dartls/#setup","text":"require 'lspconfig' . dartls . setup {}","title":"Setup"},{"location":"lsp/dartls/#default-values","text":"cmd = { \"dart\" , \"/opt/dart-sdk/bin/snapshots/analysis_server.dart.snapshot\" , \"--lsp\" } filetypes = { \"dart\" } init_options = { closingLabels = false , flutterOutline = false , onlyAnalyzeProjectsWithOpenFiles = false , outline = false , suggestFromUnimportedLibraries = true } root_dir = root_pattern ( \"pubspec.yaml\" ) This server accepts configuration via the settings key.","title":"Default Values"},{"location":"lsp/dartls/#available-settings","text":"","title":"Available settings"},{"location":"lsp/dartls/#dartadditionalanalyzerfileextensions","text":"Type: array Default: {} Array items: {type = \"string\"} Additional file extensions that should be analyzed (usually used in combination with analyzer plugins).","title":"dart.additionalAnalyzerFileExtensions"},{"location":"lsp/dartls/#dartallowanalytics","text":"Type: boolean Default: true Whether to send analytics such as startup timings\\, frequency of use of features and analysis server crashes.","title":"dart.allowAnalytics"},{"location":"lsp/dartls/#dartallowtestsoutsidetestfolder","text":"Type: boolean null","title":"dart.allowTestsOutsideTestFolder"},{"location":"lsp/dartls/#dartanalysisexcludedfolders","text":"Type: array Default: {} Array items: {type = \"string\"} An array of paths to be excluded from Dart analysis. This option should usually be set at the Workspace level. Excluded folders will also be ignored when detecting project types.","title":"dart.analysisExcludedFolders"},{"location":"lsp/dartls/#dartanalysisserverfolding","text":"Type: boolean Default: true Whether to use folding data from the Dart analysis server instead of the built-in VS Code indent-based folding.","title":"dart.analysisServerFolding"},{"location":"lsp/dartls/#dartanalyzeangulartemplates","text":"Type: boolean Default: true null","title":"dart.analyzeAngularTemplates"},{"location":"lsp/dartls/#dartanalyzeradditionalargs","text":"Type: array Default: {} Array items: {type = \"string\"} Additional arguments to pass to the Dart analysis server.","title":"dart.analyzerAdditionalArgs"},{"location":"lsp/dartls/#dartanalyzerdiagnosticsport","text":"Type: null|number Default: vim.NIL The port number to be used for the Dart analyzer diagnostic server.","title":"dart.analyzerDiagnosticsPort"},{"location":"lsp/dartls/#dartanalyzerinstrumentationlogfile","text":"Type: null|string Default: vim.NIL The path to a log file for very detailed logging in the Dart analysis server that may be useful when trying to diagnose analysis server issues.","title":"dart.analyzerInstrumentationLogFile"},{"location":"lsp/dartls/#dartanalyzerlogfile","text":"Type: null|string Default: vim.NIL The path to a log file for communication between Dart Code and the analysis server.","title":"dart.analyzerLogFile"},{"location":"lsp/dartls/#dartanalyzerpath","text":"Type: null|string Default: vim.NIL The path to a custom Dart analysis server.","title":"dart.analyzerPath"},{"location":"lsp/dartls/#dartanalyzersshhost","text":"Type: null|string Default: vim.NIL An SSH host to run the analysis server. This can be useful when modifying code on a remote machine using SSHFS.","title":"dart.analyzerSshHost"},{"location":"lsp/dartls/#dartanalyzervmserviceport","text":"Type: null|number Default: vim.NIL The port number to be used for the Dart analysis server VM service.","title":"dart.analyzerVmServicePort"},{"location":"lsp/dartls/#dartautoimportcompletions","text":"Type: boolean Default: true Whether to include symbols that have not been imported in the code completion list and automatically insert the required import when selecting them (requires restart).","title":"dart.autoImportCompletions"},{"location":"lsp/dartls/#dartautomaticcommentslashes","text":"enum { \"none\", \"tripleSlash\", \"all\" } Default: \"tripleSlash\" null","title":"dart.automaticCommentSlashes"},{"location":"lsp/dartls/#dartbuildrunneradditionalargs","text":"Type: array Default: {} Array items: {type = \"string\"} null","title":"dart.buildRunnerAdditionalArgs"},{"location":"lsp/dartls/#dartcheckforsdkupdates","text":"Type: boolean Default: true Whether to check you are using the latest version of the Dart SDK at startup.","title":"dart.checkForSdkUpdates"},{"location":"lsp/dartls/#dartcliconsole","text":"enum { \"debugConsole\", \"terminal\", \"externalTerminal\" } Default: \"debugConsole\" Whether to run Dart CLI apps in the Debug Console or a terminal. The Debug Console has more functionality because the process is controlled by the debug adapter\\, but is unable to accept input from the user via stdin.","title":"dart.cliConsole"},{"location":"lsp/dartls/#dartclosinglabels","text":"Type: boolean Default: true Whether to show annotations against constructor\\, method invocations and lists that span multiple lines.","title":"dart.closingLabels"},{"location":"lsp/dartls/#dartcompletefunctioncalls","text":"Type: boolean Default: true null","title":"dart.completeFunctionCalls"},{"location":"lsp/dartls/#dartdaplogfile","text":"Type: null|string Default: vim.NIL null","title":"dart.dapLogFile"},{"location":"lsp/dartls/#dartdebugextensionbackendprotocol","text":"enum { \"sse\", \"ws\" } Default: \"ws\" The protocol to use for the Dart Debug Extension backend service and injected client. Using WebSockets can improve performance but may fail when connecting through some proxy servers.","title":"dart.debugExtensionBackendProtocol"},{"location":"lsp/dartls/#dartdebugexternallibraries","text":"Type: boolean null","title":"dart.debugExternalLibraries"},{"location":"lsp/dartls/#dartdebugsdklibraries","text":"Type: boolean null","title":"dart.debugSdkLibraries"},{"location":"lsp/dartls/#dartdevtoolsbrowser","text":"enum { \"chrome\", \"default\" } Default: \"chrome\" Whether to launch external DevTools windows using Chrome or the system default browser.","title":"dart.devToolsBrowser"},{"location":"lsp/dartls/#dartdevtoolslogfile","text":"Type: null|string Default: vim.NIL The path to a low-traffic log file for the Dart DevTools service.","title":"dart.devToolsLogFile"},{"location":"lsp/dartls/#dartdevtoolsport","text":"Type: null|number Default: vim.NIL The port number to be used for the Dart DevTools.","title":"dart.devToolsPort"},{"location":"lsp/dartls/#dartdevtoolsreusewindows","text":"Type: boolean Default: true Whether to try to reuse existing DevTools windows instead of launching new ones. Only works for instances of DevTools launched by the DevTools server on the local machine.","title":"dart.devToolsReuseWindows"},{"location":"lsp/dartls/#dartdevtoolstheme","text":"enum { \"dark\", \"light\" } Default: \"dark\" The theme to use for Dart DevTools.","title":"dart.devToolsTheme"},{"location":"lsp/dartls/#dartdonotformat","text":"Type: array Default: {} Array items: {type = \"string\"} null","title":"dart.doNotFormat"},{"location":"lsp/dartls/#dartembeddevtools","text":"Type: boolean Default: true null","title":"dart.embedDevTools"},{"location":"lsp/dartls/#dartenablecompletioncommitcharacters","text":"Type: boolean null","title":"dart.enableCompletionCommitCharacters"},{"location":"lsp/dartls/#dartenablesdkformatter","text":"Type: boolean Default: true null","title":"dart.enableSdkFormatter"},{"location":"lsp/dartls/#dartenableserversnippets","text":"Type: boolean null","title":"dart.enableServerSnippets"},{"location":"lsp/dartls/#dartenablesnippets","text":"Type: boolean Default: true Whether to include Dart and Flutter snippets in code completion.","title":"dart.enableSnippets"},{"location":"lsp/dartls/#dartenv","text":"Type: object Default: vim.empty_dict() Additional environment variables to be added to all Dart\\/Flutter processes spawned by the Dart and Flutter extensions.","title":"dart.env"},{"location":"lsp/dartls/#dartevaluategettersindebugviews","text":"Type: boolean Default: true Whether to evaluate getters in order to display them in debug views (such as the Variables\\, Watch and Hovers views).","title":"dart.evaluateGettersInDebugViews"},{"location":"lsp/dartls/#dartevaluatetostringindebugviews","text":"Type: boolean Default: true Whether to call toString() on objects when rendering them in debug views (such as the Variables\\, Watch and Hovers views). Only applies to views of 100 or fewer values for performance reasons.","title":"dart.evaluateToStringInDebugViews"},{"location":"lsp/dartls/#dartextensionlogfile","text":"Type: null|string Default: vim.NIL The path to a low-traffic log file for basic extension and editor issues.","title":"dart.extensionLogFile"},{"location":"lsp/dartls/#dartflutteradbconnectonchromeos","text":"Type: boolean null","title":"dart.flutterAdbConnectOnChromeOs"},{"location":"lsp/dartls/#dartflutteradditionalargs","text":"Type: array Default: {} Array items: {type = \"string\"} null","title":"dart.flutterAdditionalArgs"},{"location":"lsp/dartls/#dartflutterattachadditionalargs","text":"Type: array Default: {} Array items: {type = \"string\"} null","title":"dart.flutterAttachAdditionalArgs"},{"location":"lsp/dartls/#dartfluttercreateandroidlanguage","text":"enum { \"java\", \"kotlin\" } Default: \"kotlin\" The programming language to use for Android apps when creating new projects using the \\'Flutter\\: New Application Project\\' command.","title":"dart.flutterCreateAndroidLanguage"},{"location":"lsp/dartls/#dartfluttercreateioslanguage","text":"enum { \"objc\", \"swift\" } Default: \"swift\" The programming language to use for iOS apps when creating new projects using the \\'Flutter\\: New Application Project\\' command.","title":"dart.flutterCreateIOSLanguage"},{"location":"lsp/dartls/#dartfluttercreateoffline","text":"Type: boolean Whether to use offline mode when creating new projects with the \\'Flutter\\: New Application Project\\' command.","title":"dart.flutterCreateOffline"},{"location":"lsp/dartls/#dartfluttercreateorganization","text":"Type: null|string Default: vim.NIL null","title":"dart.flutterCreateOrganization"},{"location":"lsp/dartls/#dartfluttercustomemulators","text":"Type: array Default: {} Array items: {properties = {args = {items = {type = \"string\"},type = \"array\"},env = vim.empty_dict(),executable = {type = \"string\"},id = {type = \"string\"},name = {type = \"string\"}},type = \"object\"} Custom emulators to show in the emulator list for easier launching. If IDs match existing emulators returned by Flutter\\, the custom emulators will override them.","title":"dart.flutterCustomEmulators"},{"location":"lsp/dartls/#dartflutterdaemonlogfile","text":"Type: null|string Default: vim.NIL null","title":"dart.flutterDaemonLogFile"},{"location":"lsp/dartls/#dartflutterguttericons","text":"Type: boolean Default: true Whether to show Flutter icons and colors in the editor gutter.","title":"dart.flutterGutterIcons"},{"location":"lsp/dartls/#dartflutterhotreloadonsave","text":"enum { \"never\", \"always\", \"manual\" } Default: \"manual\" null","title":"dart.flutterHotReloadOnSave"},{"location":"lsp/dartls/#dartflutterhotrestartonsave","text":"Type: boolean Default: true Whether to automatically send a Hot Restart request during a debug session when saving files if Hot Reload is not available but Hot Restart is.","title":"dart.flutterHotRestartOnSave"},{"location":"lsp/dartls/#dartflutteroutline","text":"Type: boolean Default: true Whether to show the Flutter Outline tree in the sidebar.","title":"dart.flutterOutline"},{"location":"lsp/dartls/#dartflutterrunadditionalargs","text":"Type: array Default: {} Array items: {type = \"string\"} null","title":"dart.flutterRunAdditionalArgs"},{"location":"lsp/dartls/#dartflutterrunlogfile","text":"Type: null|string Default: vim.NIL null","title":"dart.flutterRunLogFile"},{"location":"lsp/dartls/#dartflutterscreenshotpath","text":"Type: null|string Default: vim.NIL The path to a directory to save Flutter screenshots.","title":"dart.flutterScreenshotPath"},{"location":"lsp/dartls/#dartfluttersdkpath","text":"Type: null|string Default: vim.NIL null","title":"dart.flutterSdkPath"},{"location":"lsp/dartls/#dartfluttersdkpaths","text":"Type: array Default: {} Array items: {type = \"string\"} An array of paths that either directly point to a Flutter SDK or the parent directory of multiple Flutter SDKs. When set\\, the version number in the status bar can be used to quickly switch between SDKs.","title":"dart.flutterSdkPaths"},{"location":"lsp/dartls/#dartflutterselectdevicewhenconnected","text":"Type: boolean Default: true Whether to set newly connected devices as the current device in Flutter projects.","title":"dart.flutterSelectDeviceWhenConnected"},{"location":"lsp/dartls/#dartfluttershowemulators","text":"enum { \"local\", \"always\" } Default: \"local\" null","title":"dart.flutterShowEmulators"},{"location":"lsp/dartls/#dartfluttershowwebserverdevice","text":"enum { \"remote\", \"always\" } Default: \"remote\" null","title":"dart.flutterShowWebServerDevice"},{"location":"lsp/dartls/#dartflutterstructurederrors","text":"Type: boolean Default: true null","title":"dart.flutterStructuredErrors"},{"location":"lsp/dartls/#dartfluttertestadditionalargs","text":"Type: array Default: {} Array items: {type = \"string\"} null","title":"dart.flutterTestAdditionalArgs"},{"location":"lsp/dartls/#dartfluttertestlogfile","text":"Type: null|string Default: vim.NIL null","title":"dart.flutterTestLogFile"},{"location":"lsp/dartls/#dartfluttertrackwidgetcreation","text":"Type: boolean Default: true null","title":"dart.flutterTrackWidgetCreation"},{"location":"lsp/dartls/#dartflutterwebrenderer","text":"enum { \"auto\", \"html\", \"canvaskit\" } Default: \"auto\" null","title":"dart.flutterWebRenderer"},{"location":"lsp/dartls/#darthotreloadprogress","text":"enum { \"notification\", \"statusBar\" } Default: \"notification\" Determines how to display Hot Restart and Hot Reload progress.","title":"dart.hotReloadProgress"},{"location":"lsp/dartls/#dartinsertargumentplaceholders","text":"Type: boolean Default: true null","title":"dart.insertArgumentPlaceholders"},{"location":"lsp/dartls/#dartlinelength","text":"Type: integer Default: 80 The maximum length of a line of code. This is used by the document formatter.","title":"dart.lineLength"},{"location":"lsp/dartls/#dartlspsnippettextedits","text":"Type: boolean Default: true null","title":"dart.lspSnippetTextEdits"},{"location":"lsp/dartls/#dartmaxloglinelength","text":"Type: number Default: 2000 The maximum length of a line in the log file. Lines longer than this will be truncated and suffixed with an ellipsis.","title":"dart.maxLogLineLength"},{"location":"lsp/dartls/#dartnotifyanalyzererrors","text":"Type: boolean Default: true Whether to show a notification the first few times an analysis server exception occurs.","title":"dart.notifyAnalyzerErrors"},{"location":"lsp/dartls/#dartopendevtools","text":"enum { \"never\", \"flutter\", \"always\" } Default: \"never\" Whether to automatically open DevTools at the start of a debug session. If embedded DevTools is enabled\\, this will launch the Widget Inspector embedded for Flutter projects\\, or launch DevTools externally in a browser for Dart projects.","title":"dart.openDevTools"},{"location":"lsp/dartls/#dartopentestview","text":"Type: array Default: { \"testRunStart\" } Array items: {enum = { \"testRunStart\", \"testFailure\" }} When to automatically switch focus to the test list (array to support multiple values).","title":"dart.openTestView"},{"location":"lsp/dartls/#dartpreviewbazelworkspacecustomscripts","text":"Type: boolean null","title":"dart.previewBazelWorkspaceCustomScripts"},{"location":"lsp/dartls/#dartpreviewcommitcharacters","text":"Type: boolean EXPERIMENTAL\\: Whether to enable commit characters for the LSP server. In a future release\\, the dart.enableCompletionCommitCharacters setting will also apply to LSP.","title":"dart.previewCommitCharacters"},{"location":"lsp/dartls/#dartpreviewflutteruiguides","text":"Type: boolean null","title":"dart.previewFlutterUiGuides"},{"location":"lsp/dartls/#dartpreviewflutteruiguidescustomtracking","text":"Type: boolean EXPERIMENTAL\\: Whether to enable custom tracking of Flutter UI guidelines (to hide some latency of waiting for the next Flutter Outline).","title":"dart.previewFlutterUiGuidesCustomTracking"},{"location":"lsp/dartls/#dartpreviewhotreloadonsavewatcher","text":"Type: boolean null","title":"dart.previewHotReloadOnSaveWatcher"},{"location":"lsp/dartls/#dartpreviewlsp","text":"Type: null|boolean Default: vim.NIL null","title":"dart.previewLsp"},{"location":"lsp/dartls/#dartprompttogetpackages","text":"Type: boolean Default: true Whether to prompt to get packages when opening a project with out of date packages.","title":"dart.promptToGetPackages"},{"location":"lsp/dartls/#dartprompttoruniferrors","text":"Type: boolean Default: true Whether to prompt before running if there are errors in your project. Test scripts will be excluded from the check unless they\\'re the script being run.","title":"dart.promptToRunIfErrors"},{"location":"lsp/dartls/#dartpubadditionalargs","text":"Type: array Default: {} Array items: {type = \"string\"} Additional args to pass to all `pub` commands.","title":"dart.pubAdditionalArgs"},{"location":"lsp/dartls/#dartpubtestlogfile","text":"Type: null|string Default: vim.NIL null","title":"dart.pubTestLogFile"},{"location":"lsp/dartls/#dartrunpubgetonpubspecchanges","text":"Type: boolean Default: true null","title":"dart.runPubGetOnPubspecChanges"},{"location":"lsp/dartls/#dartsdkpath","text":"Type: null|string Default: vim.NIL null","title":"dart.sdkPath"},{"location":"lsp/dartls/#dartsdkpaths","text":"Type: array Default: {} Array items: {type = \"string\"} An array of paths that either directly point to a Dart SDK or the parent directory of multiple Dart SDKs. When set\\, the version number in the status bar can be used to quickly switch between SDKs.","title":"dart.sdkPaths"},{"location":"lsp/dartls/#dartsharedevtoolswithflutter","text":"Type: boolean Default: true Whether to eagerly run DevTools for Flutter workspaces and share the spawned server with `flutter run`.","title":"dart.shareDevToolsWithFlutter"},{"location":"lsp/dartls/#dartshowdartdeveloperlogs","text":"Type: boolean Default: true null","title":"dart.showDartDeveloperLogs"},{"location":"lsp/dartls/#dartshowdartpadsamplecodelens","text":"Type: boolean Default: true Whether to show CodeLens actions in the editor for opening online DartPad samples.","title":"dart.showDartPadSampleCodeLens"},{"location":"lsp/dartls/#dartshowdevtoolsdebugtoolbarbuttons","text":"Type: boolean Default: true Whether to show DevTools buttons in the Debug toolbar.","title":"dart.showDevToolsDebugToolBarButtons"},{"location":"lsp/dartls/#dartshowignorequickfixes","text":"Type: boolean Default: true Whether to show quick fixes for ignoring hints and lints.","title":"dart.showIgnoreQuickFixes"},{"location":"lsp/dartls/#dartshowinspectornotificationsforwidgeterrors","text":"Type: boolean Default: true null","title":"dart.showInspectorNotificationsForWidgetErrors"},{"location":"lsp/dartls/#dartshowmaincodelens","text":"Type: boolean Default: true Whether to show CodeLens actions in the editor for quick running \\/ debugging scripts with main functions.","title":"dart.showMainCodeLens"},{"location":"lsp/dartls/#dartshowskippedtests","text":"Type: boolean Default: true null","title":"dart.showSkippedTests"},{"location":"lsp/dartls/#dartshowtestcodelens","text":"Type: boolean Default: true Whether to show CodeLens actions in the editor for quick running \\/ debugging tests.","title":"dart.showTestCodeLens"},{"location":"lsp/dartls/#dartshowtodos","text":"Type: boolean Default: true Whether to show TODOs in the Problems list.","title":"dart.showTodos"},{"location":"lsp/dartls/#darttriggersignaturehelpautomatically","text":"Type: boolean Whether to automatically trigger signature help when pressing keys such as \\, and (.","title":"dart.triggerSignatureHelpAutomatically"},{"location":"lsp/dartls/#dartupdateimportsonrename","text":"Type: boolean Default: true Whether to automatically update imports when moving or renaming files. Currently only supports single file moves \\/ renames.","title":"dart.updateImportsOnRename"},{"location":"lsp/dartls/#dartuseknownchromeosports","text":"Type: boolean Default: true Whether to use specific ports for the VM service and DevTools when running in Chrome OS. This is required to connect from the native Chrome OS browser but will prevent apps from launching if the ports are already in-use (for example if trying to run a second app).","title":"dart.useKnownChromeOSPorts"},{"location":"lsp/dartls/#dartvmadditionalargs","text":"Type: array Default: {} Array items: {type = \"string\"} Additional args to pass to the Dart VM when running\\/debugging command line apps.","title":"dart.vmAdditionalArgs"},{"location":"lsp/dartls/#dartvmservicelogfile","text":"Type: null|string Default: vim.NIL null","title":"dart.vmServiceLogFile"},{"location":"lsp/dartls/#dartwarnwheneditingfilesinpubcache","text":"Type: boolean Default: true null","title":"dart.warnWhenEditingFilesInPubCache"},{"location":"lsp/dartls/#dartwarnwheneditingfilesoutsideworkspace","text":"Type: boolean Default: true Whether to show a warning when modifying files outside of the workspace.","title":"dart.warnWhenEditingFilesOutsideWorkspace"},{"location":"lsp/dartls/#dartwebdaemonlogfile","text":"Type: null|string Default: vim.NIL null","title":"dart.webDaemonLogFile"},{"location":"lsp/denols/","text":"TypeScript (denols) https://github.com/denoland/deno Deno's built-in language server Setup require 'lspconfig' . denols . setup {} Commands DenolsCache: Cache a module and all of its dependencies. DenolsDefinition: Jump to definition. This handle deno:/ schema in deno:// buffer. DenolsReferences: List references. This handle deno:/ schema in deno:// buffer. Default Values cmd = { \"deno\" , \"lsp\" } filetypes = { \"javascript\" , \"javascriptreact\" , \"javascript.jsx\" , \"typescript\" , \"typescriptreact\" , \"typescript.tsx\" } handlers = { [ \"textDocument/definition\" ] = < function 1>, [\" textDocument / references \"] = <function 1> } init_options = { enable = true, lint = false, unstable = false } root_dir = root_pattern(\" package . json \", \" tsconfig . json \", \" . git \")","title":"TypeScript (denols)"},{"location":"lsp/denols/#typescript-denols","text":"https://github.com/denoland/deno Deno's built-in language server","title":"TypeScript (denols)"},{"location":"lsp/denols/#setup","text":"require 'lspconfig' . denols . setup {}","title":"Setup"},{"location":"lsp/denols/#commands","text":"DenolsCache: Cache a module and all of its dependencies. DenolsDefinition: Jump to definition. This handle deno:/ schema in deno:// buffer. DenolsReferences: List references. This handle deno:/ schema in deno:// buffer.","title":"Commands"},{"location":"lsp/denols/#default-values","text":"cmd = { \"deno\" , \"lsp\" } filetypes = { \"javascript\" , \"javascriptreact\" , \"javascript.jsx\" , \"typescript\" , \"typescriptreact\" , \"typescript.tsx\" } handlers = { [ \"textDocument/definition\" ] = < function 1>, [\" textDocument / references \"] = <function 1> } init_options = { enable = true, lint = false, unstable = false } root_dir = root_pattern(\" package . json \", \" tsconfig . json \", \" . git \")","title":"Default Values"},{"location":"lsp/dhall_lsp_server/","text":"dhall_lsp_server Setup require 'lspconfig' . dhall_lsp_server . setup {} Default Values cmd = { \"dhall-lsp-server\" } docs = { default_config = { language_name = \"Dhall\" , root_dir = 'root_pattern(\".git\", vim.fn.getcwd())' }, description = \"https://github.com/dhall-lang/dhall-haskell/tree/master/dhall-lsp-server \\n\\n language server for dhall \\n\\n `dhall-lsp-server` can be installed via cabal: \\n ```sh \\n cabal install dhall-lsp-server \\n ``` \\n prebuilt binaries can be found [here](https://github.com/dhall-lang/dhall-haskell/releases). \\n \" } filetypes = { \"dhall\" } root_dir = function ( startpath ) return M . search_ancestors ( startpath , matcher ) end","title":"dhall_lsp_server"},{"location":"lsp/dhall_lsp_server/#dhall_lsp_server","text":"","title":"dhall_lsp_server"},{"location":"lsp/dhall_lsp_server/#setup","text":"require 'lspconfig' . dhall_lsp_server . setup {}","title":"Setup"},{"location":"lsp/dhall_lsp_server/#default-values","text":"cmd = { \"dhall-lsp-server\" } docs = { default_config = { language_name = \"Dhall\" , root_dir = 'root_pattern(\".git\", vim.fn.getcwd())' }, description = \"https://github.com/dhall-lang/dhall-haskell/tree/master/dhall-lsp-server \\n\\n language server for dhall \\n\\n `dhall-lsp-server` can be installed via cabal: \\n ```sh \\n cabal install dhall-lsp-server \\n ``` \\n prebuilt binaries can be found [here](https://github.com/dhall-lang/dhall-haskell/releases). \\n \" } filetypes = { \"dhall\" } root_dir = function ( startpath ) return M . search_ancestors ( startpath , matcher ) end","title":"Default Values"},{"location":"lsp/diagnosticls/","text":"Diagnostics (diagnosticls) https://github.com/iamcco/diagnostic-languageserver Diagnostic language server integrate with linters. Setup require 'lspconfig' . diagnosticls . setup {} Default Values cmd = { \"diagnostic-languageserver\" , \"--stdio\" } filetypes = Empty by default , override to add filetypes root_dir = Vim 's starting directory","title":"Diagnostics (diagnosticls)"},{"location":"lsp/diagnosticls/#diagnostics-diagnosticls","text":"https://github.com/iamcco/diagnostic-languageserver Diagnostic language server integrate with linters.","title":"Diagnostics (diagnosticls)"},{"location":"lsp/diagnosticls/#setup","text":"require 'lspconfig' . diagnosticls . setup {}","title":"Setup"},{"location":"lsp/diagnosticls/#default-values","text":"cmd = { \"diagnostic-languageserver\" , \"--stdio\" } filetypes = Empty by default , override to add filetypes root_dir = Vim 's starting directory","title":"Default Values"},{"location":"lsp/dockerls/","text":"Docker (dockerls) https://github.com/rcjsuen/dockerfile-language-server-nodejs docker-langserver can be installed via npm : npm install -g dockerfile-language-server-nodejs Setup require 'lspconfig' . dockerls . setup {} Default Values cmd = { \"docker-langserver\" , \"--stdio\" } filetypes = { \"Dockerfile\" , \"dockerfile\" } root_dir = root_pattern ( \"Dockerfile\" )","title":"Docker (dockerls)"},{"location":"lsp/dockerls/#docker-dockerls","text":"https://github.com/rcjsuen/dockerfile-language-server-nodejs docker-langserver can be installed via npm : npm install -g dockerfile-language-server-nodejs","title":"Docker (dockerls)"},{"location":"lsp/dockerls/#setup","text":"require 'lspconfig' . dockerls . setup {}","title":"Setup"},{"location":"lsp/dockerls/#default-values","text":"cmd = { \"docker-langserver\" , \"--stdio\" } filetypes = { \"Dockerfile\" , \"dockerfile\" } root_dir = root_pattern ( \"Dockerfile\" )","title":"Default Values"},{"location":"lsp/dotls/","text":"DOT (dotls) https://github.com/nikeee/dot-language-server dot-language-server can be installed via npm : npm install -g dot-language-server Setup require 'lspconfig' . dotls . setup {} Default Values cmd = { \"dot-language-server\" , \"--stdio\" } filetypes = { \"dot\" } root_dir = function ( filename ) return util . root_pattern ( unpack ( root_files ))( filename ) or util . path . dirname ( filename ) end ,","title":"DOT (dotls)"},{"location":"lsp/dotls/#dot-dotls","text":"https://github.com/nikeee/dot-language-server dot-language-server can be installed via npm : npm install -g dot-language-server","title":"DOT (dotls)"},{"location":"lsp/dotls/#setup","text":"require 'lspconfig' . dotls . setup {}","title":"Setup"},{"location":"lsp/dotls/#default-values","text":"cmd = { \"dot-language-server\" , \"--stdio\" } filetypes = { \"dot\" } root_dir = function ( filename ) return util . root_pattern ( unpack ( root_files ))( filename ) or util . path . dirname ( filename ) end ,","title":"Default Values"},{"location":"lsp/efm/","text":"Diagnostics (efm) https://github.com/mattn/efm-langserver General purpose Language Server that can use specified error message format generated from specified command. Setup require 'lspconfig' . efm . setup {} Default Values cmd = { \"efm-langserver\" } root_dir = util . root_pattern ( \".git\" )( fname ) or util . path . dirname ( fname )","title":"Diagnostics (efm)"},{"location":"lsp/efm/#diagnostics-efm","text":"https://github.com/mattn/efm-langserver General purpose Language Server that can use specified error message format generated from specified command.","title":"Diagnostics (efm)"},{"location":"lsp/efm/#setup","text":"require 'lspconfig' . efm . setup {}","title":"Setup"},{"location":"lsp/efm/#default-values","text":"cmd = { \"efm-langserver\" } root_dir = util . root_pattern ( \".git\" )( fname ) or util . path . dirname ( fname )","title":"Default Values"},{"location":"lsp/elixirls/","text":"Elexir (elixirls) https://github.com/elixir-lsp/elixir-ls elixir-ls can be installed by following the instructions here . curl -fLO https://github.com/elixir-lsp/elixir-ls/releases/latest/download/elixir-ls.zip unzip elixir-ls.zip -d /path/to/elixir-ls # Unix chmod +x /path/to/elixir-ls/language_server.sh By default, elixir-ls doesn't have a cmd set. This is because nvim-lspconfig does not make assumptions about your path. You must add the following to your init.vim or init.lua to set cmd to the absolute path ($HOME and ~ are not expanded) of your unzipped elixir-ls. require 'lspconfig' . elixirls . setup { -- Unix cmd = { \"/path/to/elixir-ls/language_server.sh\" }; -- Windows cmd = { \"/path/to/elixir-ls/language_server.bat\" }; ... } Setup require 'lspconfig' . elixirls . setup {} Default Values filetypes = { \"elixir\" , \"eelixir\" } root_dir = root_pattern ( \"mix.exs\" , \".git\" ) or vim . loop . os_homedir () This server accepts configuration via the settings key. Available settings elixirLS.dialyzerEnabled Type: boolean Default: true Run ElixirLS\\'s rapid Dialyzer when code is saved elixirLS.dialyzerFormat enum { \"dialyzer\", \"dialyxir_short\", \"dialyxir_long\" } Default: \"dialyzer\" Formatter to use for Dialyzer warnings elixirLS.dialyzerWarnOpts Type: array Default: {} Array items: {enum = { \"error_handling\", \"no_behaviours\", \"no_contracts\", \"no_fail_call\", \"no_fun_app\", \"no_improper_lists\", \"no_match\", \"no_missing_calls\", \"no_opaque\", \"no_return\", \"no_undefined_callbacks\", \"no_unused\", \"underspecs\", \"unknown\", \"unmatched_returns\", \"overspecs\", \"specdiffs\" },type = \"string\"} Dialyzer options to enable or disable warnings. See Dialyzer\\'s documentation for options. Note that the \\\"race_conditions\\\" option is unsupported elixirLS.fetchDeps Type: boolean Default: true Automatically fetch project dependencies when compiling elixirLS.mixEnv Type: string Default: \"test\" Mix environment to use for compilation elixirLS.projectDir Type: string Subdirectory containing Mix project if not in the project root elixirLS.suggestSpecs Type: boolean Default: true Suggest \\@spec annotations inline using Dialyzer\\'s inferred success typings (Requires Dialyzer)","title":"Elexir (elixirls)"},{"location":"lsp/elixirls/#elexir-elixirls","text":"https://github.com/elixir-lsp/elixir-ls elixir-ls can be installed by following the instructions here . curl -fLO https://github.com/elixir-lsp/elixir-ls/releases/latest/download/elixir-ls.zip unzip elixir-ls.zip -d /path/to/elixir-ls # Unix chmod +x /path/to/elixir-ls/language_server.sh By default, elixir-ls doesn't have a cmd set. This is because nvim-lspconfig does not make assumptions about your path. You must add the following to your init.vim or init.lua to set cmd to the absolute path ($HOME and ~ are not expanded) of your unzipped elixir-ls. require 'lspconfig' . elixirls . setup { -- Unix cmd = { \"/path/to/elixir-ls/language_server.sh\" }; -- Windows cmd = { \"/path/to/elixir-ls/language_server.bat\" }; ... }","title":"Elexir (elixirls)"},{"location":"lsp/elixirls/#setup","text":"require 'lspconfig' . elixirls . setup {}","title":"Setup"},{"location":"lsp/elixirls/#default-values","text":"filetypes = { \"elixir\" , \"eelixir\" } root_dir = root_pattern ( \"mix.exs\" , \".git\" ) or vim . loop . os_homedir () This server accepts configuration via the settings key.","title":"Default Values"},{"location":"lsp/elixirls/#available-settings","text":"","title":"Available settings"},{"location":"lsp/elixirls/#elixirlsdialyzerenabled","text":"Type: boolean Default: true Run ElixirLS\\'s rapid Dialyzer when code is saved","title":"elixirLS.dialyzerEnabled"},{"location":"lsp/elixirls/#elixirlsdialyzerformat","text":"enum { \"dialyzer\", \"dialyxir_short\", \"dialyxir_long\" } Default: \"dialyzer\" Formatter to use for Dialyzer warnings","title":"elixirLS.dialyzerFormat"},{"location":"lsp/elixirls/#elixirlsdialyzerwarnopts","text":"Type: array Default: {} Array items: {enum = { \"error_handling\", \"no_behaviours\", \"no_contracts\", \"no_fail_call\", \"no_fun_app\", \"no_improper_lists\", \"no_match\", \"no_missing_calls\", \"no_opaque\", \"no_return\", \"no_undefined_callbacks\", \"no_unused\", \"underspecs\", \"unknown\", \"unmatched_returns\", \"overspecs\", \"specdiffs\" },type = \"string\"} Dialyzer options to enable or disable warnings. See Dialyzer\\'s documentation for options. Note that the \\\"race_conditions\\\" option is unsupported","title":"elixirLS.dialyzerWarnOpts"},{"location":"lsp/elixirls/#elixirlsfetchdeps","text":"Type: boolean Default: true Automatically fetch project dependencies when compiling","title":"elixirLS.fetchDeps"},{"location":"lsp/elixirls/#elixirlsmixenv","text":"Type: string Default: \"test\" Mix environment to use for compilation","title":"elixirLS.mixEnv"},{"location":"lsp/elixirls/#elixirlsprojectdir","text":"Type: string Subdirectory containing Mix project if not in the project root","title":"elixirLS.projectDir"},{"location":"lsp/elixirls/#elixirlssuggestspecs","text":"Type: boolean Default: true Suggest \\@spec annotations inline using Dialyzer\\'s inferred success typings (Requires Dialyzer)","title":"elixirLS.suggestSpecs"},{"location":"lsp/elmls/","text":"Elm (elmls) https://github.com/elm-tooling/elm-language-server#installation If you don't want to use Nvim to install it, then you can use: npm install -g elm elm-test elm-format @elm-tooling/elm-language-server Setup require 'lspconfig' . elmls . setup {} Default Values cmd = { \"elm-language-server\" } filetypes = { \"elm\" } init_options = { elmAnalyseTrigger = \"change\" , elmFormatPath = \"elm-format\" , elmPath = \"elm\" , elmTestPath = \"elm-test\" } root_dir = root_pattern ( \"elm.json\" ) This server accepts configuration via the settings key. Available settings elmLS.disableElmLSDiagnostics Type: boolean Disable linting diagnostics from the language server. elmLS.elmFormatPath Type: string Default: \"\" The path to your elm-format executable. Should be empty by default\\, in that case it will assume the name and try to first get it from a local npm installation or a global one. If you set it manually it will not try to load from the npm folder. elmLS.elmPath Type: string Default: \"\" The path to your elm executable. Should be empty by default\\, in that case it will assume the name and try to first get it from a local npm installation or a global one. If you set it manually it will not try to load from the npm folder. elmLS.elmReviewDiagnostics enum { \"off\", \"warning\", \"error\" } Default: \"off\" Set severity or disable linting diagnostics for elm-review. elmLS.elmReviewPath Type: string Default: \"\" The path to your elm-review executable. Should be empty by default\\, in that case it will assume the name and try to first get it from a local npm installation or a global one. If you set it manually it will not try to load from the npm folder. elmLS.elmTestPath Type: string Default: \"\" The path to your elm-test executable. Should be empty by default\\, in that case it will assume the name and try to first get it from a local npm installation or a global one. If you set it manually it will not try to load from the npm folder. elmLS.elmTestRunner.showElmTestOutput Type: boolean Show output of elm-test as terminal task elmLS.onlyUpdateDiagnosticsOnSave Type: boolean Only update compiler diagnostics on save\\, not on document change. elmLS.skipInstallPackageConfirmation Type: boolean Skips confirmation for the Install Package code action. elmLS.trace.server enum { \"off\", \"messages\", \"verbose\" } Default: \"off\" Traces the communication between VS Code and the language server.","title":"Elm (elmls)"},{"location":"lsp/elmls/#elm-elmls","text":"https://github.com/elm-tooling/elm-language-server#installation If you don't want to use Nvim to install it, then you can use: npm install -g elm elm-test elm-format @elm-tooling/elm-language-server","title":"Elm (elmls)"},{"location":"lsp/elmls/#setup","text":"require 'lspconfig' . elmls . setup {}","title":"Setup"},{"location":"lsp/elmls/#default-values","text":"cmd = { \"elm-language-server\" } filetypes = { \"elm\" } init_options = { elmAnalyseTrigger = \"change\" , elmFormatPath = \"elm-format\" , elmPath = \"elm\" , elmTestPath = \"elm-test\" } root_dir = root_pattern ( \"elm.json\" ) This server accepts configuration via the settings key.","title":"Default Values"},{"location":"lsp/elmls/#available-settings","text":"","title":"Available settings"},{"location":"lsp/elmls/#elmlsdisableelmlsdiagnostics","text":"Type: boolean Disable linting diagnostics from the language server.","title":"elmLS.disableElmLSDiagnostics"},{"location":"lsp/elmls/#elmlselmformatpath","text":"Type: string Default: \"\" The path to your elm-format executable. Should be empty by default\\, in that case it will assume the name and try to first get it from a local npm installation or a global one. If you set it manually it will not try to load from the npm folder.","title":"elmLS.elmFormatPath"},{"location":"lsp/elmls/#elmlselmpath","text":"Type: string Default: \"\" The path to your elm executable. Should be empty by default\\, in that case it will assume the name and try to first get it from a local npm installation or a global one. If you set it manually it will not try to load from the npm folder.","title":"elmLS.elmPath"},{"location":"lsp/elmls/#elmlselmreviewdiagnostics","text":"enum { \"off\", \"warning\", \"error\" } Default: \"off\" Set severity or disable linting diagnostics for elm-review.","title":"elmLS.elmReviewDiagnostics"},{"location":"lsp/elmls/#elmlselmreviewpath","text":"Type: string Default: \"\" The path to your elm-review executable. Should be empty by default\\, in that case it will assume the name and try to first get it from a local npm installation or a global one. If you set it manually it will not try to load from the npm folder.","title":"elmLS.elmReviewPath"},{"location":"lsp/elmls/#elmlselmtestpath","text":"Type: string Default: \"\" The path to your elm-test executable. Should be empty by default\\, in that case it will assume the name and try to first get it from a local npm installation or a global one. If you set it manually it will not try to load from the npm folder.","title":"elmLS.elmTestPath"},{"location":"lsp/elmls/#elmlselmtestrunnershowelmtestoutput","text":"Type: boolean Show output of elm-test as terminal task","title":"elmLS.elmTestRunner.showElmTestOutput"},{"location":"lsp/elmls/#elmlsonlyupdatediagnosticsonsave","text":"Type: boolean Only update compiler diagnostics on save\\, not on document change.","title":"elmLS.onlyUpdateDiagnosticsOnSave"},{"location":"lsp/elmls/#elmlsskipinstallpackageconfirmation","text":"Type: boolean Skips confirmation for the Install Package code action.","title":"elmLS.skipInstallPackageConfirmation"},{"location":"lsp/elmls/#elmlstraceserver","text":"enum { \"off\", \"messages\", \"verbose\" } Default: \"off\" Traces the communication between VS Code and the language server.","title":"elmLS.trace.server"},{"location":"lsp/erlangls/","text":"Erlang (erlangls) https://erlang-ls.github.io Language Server for Erlang. Clone erlang_ls Compile the project with make and copy resulting binaries somewhere in your $PATH eg. cp _build/*/bin/* ~/local/bin Installation instruction can be found here . Installation requirements: - Erlang OTP 21+ - rebar3 3.9.1+ Setup require 'lspconfig' . erlangls . setup {} Default Values cmd = { \"erlang_ls\" } filetypes = { \"erlang\" } root_dir = root_pattern ( 'rebar.config' , 'erlang.mk' , '.git' ) or util . path . dirname ( fname )","title":"Erlang (erlangls)"},{"location":"lsp/erlangls/#erlang-erlangls","text":"https://erlang-ls.github.io Language Server for Erlang. Clone erlang_ls Compile the project with make and copy resulting binaries somewhere in your $PATH eg. cp _build/*/bin/* ~/local/bin Installation instruction can be found here . Installation requirements: - Erlang OTP 21+ - rebar3 3.9.1+","title":"Erlang (erlangls)"},{"location":"lsp/erlangls/#setup","text":"require 'lspconfig' . erlangls . setup {}","title":"Setup"},{"location":"lsp/erlangls/#default-values","text":"cmd = { \"erlang_ls\" } filetypes = { \"erlang\" } root_dir = root_pattern ( 'rebar.config' , 'erlang.mk' , '.git' ) or util . path . dirname ( fname )","title":"Default Values"},{"location":"lsp/flow/","text":"TypeScript (flow) https://flow.org/ https://github.com/facebook/flow See below for how to setup Flow itself. https://flow.org/en/docs/install/ See below for lsp command options. npx flow lsp --help Setup require 'lspconfig' . flow . setup {} Default Values cmd = { \"npx\" , \"--no-install\" , \"flow\" , \"lsp\" } filetypes = { \"javascript\" , \"javascriptreact\" , \"javascript.jsx\" } root_dir = root_pattern ( \".flowconfig\" ) This server accepts configuration via the settings key. Available settings flow.coverageSeverity enum { \"error\", \"warn\", \"info\" } Default: \"info\" Type coverage diagnostic severity flow.enabled Type: boolean Default: true Is flow enabled flow.fileExtensions Type: array Default: { \".js\", \".mjs\", \".jsx\", \".flow\", \".json\" } Array items: {type = \"string\"} (Supported only when useLSP\\: false). File extensions to consider for flow processing flow.lazyMode Type: string Default: vim.NIL Set value to enable flow lazy mode flow.logLevel enum { \"error\", \"warn\", \"info\", \"trace\" } Default: \"info\" Log level for output panel logs flow.pathToFlow Type: string Default: \"flow\" Absolute path to flow binary. Special var \\${workspaceFolder} or \\${flowconfigDir} can be used in path (NOTE\\: in windows you can use \\'\\/\\' and can omit \\'.cmd\\' in path) flow.runOnAllFiles Type: boolean (Supported only when useLSP\\: false) Run Flow on all files\\, No need to put \\/\\/\\@flow comment on top of files. flow.runOnEdit Type: boolean Default: true If true will run flow on every edit\\, otherwise will run only when changes are saved (Note\\: \\'useLSP\\: true\\' only supports syntax errors) flow.showStatus Type: boolean Default: true (Supported only when useLSP\\: false) If true will display flow status is the statusbar flow.showUncovered Type: boolean If true will show uncovered code by default flow.stopFlowOnExit Type: boolean Default: true Stop Flow on Exit flow.trace.server Default: \"off\" Traces the communication between VSCode and the flow lsp service. flow.useBundledFlow Type: boolean Default: true If true will use flow bundled with this plugin if nothing works flow.useCodeSnippetOnFunctionSuggest Type: boolean Default: true Complete functions with their parameter signature. flow.useLSP Type: boolean Default: true Turn off to switch from the official Flow Language Server implementation to talking directly to flow. flow.useNPMPackagedFlow Type: boolean Default: true Support using flow through your node_modules folder\\, WARNING\\: Checking this box is a security risk. When you open a project we will immediately run code contained within it.","title":"TypeScript (flow)"},{"location":"lsp/flow/#typescript-flow","text":"https://flow.org/ https://github.com/facebook/flow See below for how to setup Flow itself. https://flow.org/en/docs/install/ See below for lsp command options. npx flow lsp --help","title":"TypeScript (flow)"},{"location":"lsp/flow/#setup","text":"require 'lspconfig' . flow . setup {}","title":"Setup"},{"location":"lsp/flow/#default-values","text":"cmd = { \"npx\" , \"--no-install\" , \"flow\" , \"lsp\" } filetypes = { \"javascript\" , \"javascriptreact\" , \"javascript.jsx\" } root_dir = root_pattern ( \".flowconfig\" ) This server accepts configuration via the settings key.","title":"Default Values"},{"location":"lsp/flow/#available-settings","text":"","title":"Available settings"},{"location":"lsp/flow/#flowcoverageseverity","text":"enum { \"error\", \"warn\", \"info\" } Default: \"info\" Type coverage diagnostic severity","title":"flow.coverageSeverity"},{"location":"lsp/flow/#flowenabled","text":"Type: boolean Default: true Is flow enabled","title":"flow.enabled"},{"location":"lsp/flow/#flowfileextensions","text":"Type: array Default: { \".js\", \".mjs\", \".jsx\", \".flow\", \".json\" } Array items: {type = \"string\"} (Supported only when useLSP\\: false). File extensions to consider for flow processing","title":"flow.fileExtensions"},{"location":"lsp/flow/#flowlazymode","text":"Type: string Default: vim.NIL Set value to enable flow lazy mode","title":"flow.lazyMode"},{"location":"lsp/flow/#flowloglevel","text":"enum { \"error\", \"warn\", \"info\", \"trace\" } Default: \"info\" Log level for output panel logs","title":"flow.logLevel"},{"location":"lsp/flow/#flowpathtoflow","text":"Type: string Default: \"flow\" Absolute path to flow binary. Special var \\${workspaceFolder} or \\${flowconfigDir} can be used in path (NOTE\\: in windows you can use \\'\\/\\' and can omit \\'.cmd\\' in path)","title":"flow.pathToFlow"},{"location":"lsp/flow/#flowrunonallfiles","text":"Type: boolean (Supported only when useLSP\\: false) Run Flow on all files\\, No need to put \\/\\/\\@flow comment on top of files.","title":"flow.runOnAllFiles"},{"location":"lsp/flow/#flowrunonedit","text":"Type: boolean Default: true If true will run flow on every edit\\, otherwise will run only when changes are saved (Note\\: \\'useLSP\\: true\\' only supports syntax errors)","title":"flow.runOnEdit"},{"location":"lsp/flow/#flowshowstatus","text":"Type: boolean Default: true (Supported only when useLSP\\: false) If true will display flow status is the statusbar","title":"flow.showStatus"},{"location":"lsp/flow/#flowshowuncovered","text":"Type: boolean If true will show uncovered code by default","title":"flow.showUncovered"},{"location":"lsp/flow/#flowstopflowonexit","text":"Type: boolean Default: true Stop Flow on Exit","title":"flow.stopFlowOnExit"},{"location":"lsp/flow/#flowtraceserver","text":"Default: \"off\" Traces the communication between VSCode and the flow lsp service.","title":"flow.trace.server"},{"location":"lsp/flow/#flowusebundledflow","text":"Type: boolean Default: true If true will use flow bundled with this plugin if nothing works","title":"flow.useBundledFlow"},{"location":"lsp/flow/#flowusecodesnippetonfunctionsuggest","text":"Type: boolean Default: true Complete functions with their parameter signature.","title":"flow.useCodeSnippetOnFunctionSuggest"},{"location":"lsp/flow/#flowuselsp","text":"Type: boolean Default: true Turn off to switch from the official Flow Language Server implementation to talking directly to flow.","title":"flow.useLSP"},{"location":"lsp/flow/#flowusenpmpackagedflow","text":"Type: boolean Default: true Support using flow through your node_modules folder\\, WARNING\\: Checking this box is a security risk. When you open a project we will immediately run code contained within it.","title":"flow.useNPMPackagedFlow"},{"location":"lsp/fortls/","text":"Fortan (fortls) https://github.com/hansec/fortran-language-server Fortran Language Server for the Language Server Protocol Setup require 'lspconfig' . fortls . setup {} Default Values cmd = { \"fortls\" } filetypes = { \"fortran\" } root_dir = root_pattern ( \".fortls\" ) settings = { nthreads = 1 } This server accepts configuration via the settings key. Available settings fortran-ls.autocompletePrefix Type: boolean Filter autocomplete suggestions with variable prefix fortran-ls.disableDiagnostics Type: boolean Disable diagnostics (requires v1.12.0+). fortran-ls.displayVerWarning Type: boolean Default: true Provides notifications when the underlying language server is out of date. fortran-ls.enableCodeActions Type: boolean Enable experimental code actions (requires v1.7.0+). fortran-ls.executablePath Type: string Default: \"fortls\" Path to the Fortran language server (fortls). fortran-ls.hoverSignature Type: boolean Show signature information in hover for argument (also enables \\'variableHover\\'). fortran-ls.includeSymbolMem Type: boolean Default: true Include type members in document outline (also used for \\'Go to Symbol in File\\') fortran-ls.incrementalSync Type: boolean Default: true Use incremental synchronization for file changes. fortran-ls.lowercaseIntrinsics Type: boolean Use lowercase for intrinsics and keywords in autocomplete requests. fortran-ls.maxCommentLineLength Type: number Default: -1 Maximum comment line length (requires v1.8.0+). fortran-ls.maxLineLength Type: number Default: -1 Maximum line length (requires v1.8.0+). fortran-ls.notifyInit Type: boolean Notify when workspace initialization is complete (requires v1.7.0+). fortran-ls.useSignatureHelp Type: boolean Default: true Use signature help instead of snippets when available. fortran-ls.variableHover Type: boolean Show hover information for variables.","title":"Fortan (fortls)"},{"location":"lsp/fortls/#fortan-fortls","text":"https://github.com/hansec/fortran-language-server Fortran Language Server for the Language Server Protocol","title":"Fortan (fortls)"},{"location":"lsp/fortls/#setup","text":"require 'lspconfig' . fortls . setup {}","title":"Setup"},{"location":"lsp/fortls/#default-values","text":"cmd = { \"fortls\" } filetypes = { \"fortran\" } root_dir = root_pattern ( \".fortls\" ) settings = { nthreads = 1 } This server accepts configuration via the settings key.","title":"Default Values"},{"location":"lsp/fortls/#available-settings","text":"","title":"Available settings"},{"location":"lsp/fortls/#fortran-lsautocompleteprefix","text":"Type: boolean Filter autocomplete suggestions with variable prefix","title":"fortran-ls.autocompletePrefix"},{"location":"lsp/fortls/#fortran-lsdisablediagnostics","text":"Type: boolean Disable diagnostics (requires v1.12.0+).","title":"fortran-ls.disableDiagnostics"},{"location":"lsp/fortls/#fortran-lsdisplayverwarning","text":"Type: boolean Default: true Provides notifications when the underlying language server is out of date.","title":"fortran-ls.displayVerWarning"},{"location":"lsp/fortls/#fortran-lsenablecodeactions","text":"Type: boolean Enable experimental code actions (requires v1.7.0+).","title":"fortran-ls.enableCodeActions"},{"location":"lsp/fortls/#fortran-lsexecutablepath","text":"Type: string Default: \"fortls\" Path to the Fortran language server (fortls).","title":"fortran-ls.executablePath"},{"location":"lsp/fortls/#fortran-lshoversignature","text":"Type: boolean Show signature information in hover for argument (also enables \\'variableHover\\').","title":"fortran-ls.hoverSignature"},{"location":"lsp/fortls/#fortran-lsincludesymbolmem","text":"Type: boolean Default: true Include type members in document outline (also used for \\'Go to Symbol in File\\')","title":"fortran-ls.includeSymbolMem"},{"location":"lsp/fortls/#fortran-lsincrementalsync","text":"Type: boolean Default: true Use incremental synchronization for file changes.","title":"fortran-ls.incrementalSync"},{"location":"lsp/fortls/#fortran-lslowercaseintrinsics","text":"Type: boolean Use lowercase for intrinsics and keywords in autocomplete requests.","title":"fortran-ls.lowercaseIntrinsics"},{"location":"lsp/fortls/#fortran-lsmaxcommentlinelength","text":"Type: number Default: -1 Maximum comment line length (requires v1.8.0+).","title":"fortran-ls.maxCommentLineLength"},{"location":"lsp/fortls/#fortran-lsmaxlinelength","text":"Type: number Default: -1 Maximum line length (requires v1.8.0+).","title":"fortran-ls.maxLineLength"},{"location":"lsp/fortls/#fortran-lsnotifyinit","text":"Type: boolean Notify when workspace initialization is complete (requires v1.7.0+).","title":"fortran-ls.notifyInit"},{"location":"lsp/fortls/#fortran-lsusesignaturehelp","text":"Type: boolean Default: true Use signature help instead of snippets when available.","title":"fortran-ls.useSignatureHelp"},{"location":"lsp/fortls/#fortran-lsvariablehover","text":"Type: boolean Show hover information for variables.","title":"fortran-ls.variableHover"},{"location":"lsp/fsautocomplete/","text":"F# (fsautocomplete) https://github.com/fsharp/FsAutoComplete Language Server for F# provided by FsAutoComplete (FSAC). FsAutoComplete requires the dotnet-sdk to be installed. The prefered way to install FsAutoComplete is with dotnet tool install --global fsautocomplete . Instructions to compile from source are found on the main repository . You may also need to configure the filetype as Vim defaults to Forth for *.fs files: autocmd BufNewFile,BufRead *.fs,*.fsx,*.fsi set filetype=fsharp This is automatically done by plugins such as PhilT/vim-fsharp , fsharp/vim-fsharp , and adelarsq/neofsharp.vim . Setup require 'lspconfig' . fsautocomplete . setup {} Default Values cmd = { \"dotnet\" , \"fsautocomplete\" , \"--background-service-enabled\" } filetypes = { \"fsharp\" } init_options = { AutomaticWorkspaceInit = true } root_dir = function ( startpath ) return M . search_ancestors ( startpath , matcher ) end","title":"F# (fsautocomplete)"},{"location":"lsp/fsautocomplete/#f-fsautocomplete","text":"https://github.com/fsharp/FsAutoComplete Language Server for F# provided by FsAutoComplete (FSAC). FsAutoComplete requires the dotnet-sdk to be installed. The prefered way to install FsAutoComplete is with dotnet tool install --global fsautocomplete . Instructions to compile from source are found on the main repository . You may also need to configure the filetype as Vim defaults to Forth for *.fs files: autocmd BufNewFile,BufRead *.fs,*.fsx,*.fsi set filetype=fsharp This is automatically done by plugins such as PhilT/vim-fsharp , fsharp/vim-fsharp , and adelarsq/neofsharp.vim .","title":"F# (fsautocomplete)"},{"location":"lsp/fsautocomplete/#setup","text":"require 'lspconfig' . fsautocomplete . setup {}","title":"Setup"},{"location":"lsp/fsautocomplete/#default-values","text":"cmd = { \"dotnet\" , \"fsautocomplete\" , \"--background-service-enabled\" } filetypes = { \"fsharp\" } init_options = { AutomaticWorkspaceInit = true } root_dir = function ( startpath ) return M . search_ancestors ( startpath , matcher ) end","title":"Default Values"},{"location":"lsp/gdscript/","text":"GDScript (gdscript) https://github.com/godotengine/godot Language server for GDScript, used by Godot Engine. Setup require 'lspconfig' . gdscript . setup {} Default Values cmd = { \"nc\" , \"localhost\" , \"6008\" } filetypes = { \"gd\" , \"gdscript\" , \"gdscript3\" } root_dir = util . root_pattern ( \"project.godot\" , \".git\" )","title":"GDScript (gdscript)"},{"location":"lsp/gdscript/#gdscript-gdscript","text":"https://github.com/godotengine/godot Language server for GDScript, used by Godot Engine.","title":"GDScript (gdscript)"},{"location":"lsp/gdscript/#setup","text":"require 'lspconfig' . gdscript . setup {}","title":"Setup"},{"location":"lsp/gdscript/#default-values","text":"cmd = { \"nc\" , \"localhost\" , \"6008\" } filetypes = { \"gd\" , \"gdscript\" , \"gdscript3\" } root_dir = util . root_pattern ( \"project.godot\" , \".git\" )","title":"Default Values"},{"location":"lsp/ghcide/","text":"Haskell (ghcide) https://github.com/digital-asset/ghcide A library for building Haskell IDE tooling. \"ghcide\" isn't for end users now. Use \"haskell-language-server\" instead of \"ghcide\". Setup require 'lspconfig' . ghcide . setup {} Default Values cmd = { \"ghcide\" , \"--lsp\" } filetypes = { \"haskell\" , \"lhaskell\" } root_dir = root_pattern ( \"stack.yaml\" , \"hie-bios\" , \"BUILD.bazel\" , \"cabal.config\" , \"package.yaml\" )","title":"Haskell (ghcide)"},{"location":"lsp/ghcide/#haskell-ghcide","text":"https://github.com/digital-asset/ghcide A library for building Haskell IDE tooling. \"ghcide\" isn't for end users now. Use \"haskell-language-server\" instead of \"ghcide\".","title":"Haskell (ghcide)"},{"location":"lsp/ghcide/#setup","text":"require 'lspconfig' . ghcide . setup {}","title":"Setup"},{"location":"lsp/ghcide/#default-values","text":"cmd = { \"ghcide\" , \"--lsp\" } filetypes = { \"haskell\" , \"lhaskell\" } root_dir = root_pattern ( \"stack.yaml\" , \"hie-bios\" , \"BUILD.bazel\" , \"cabal.config\" , \"package.yaml\" )","title":"Default Values"},{"location":"lsp/gopls/","text":"Go (gopls) https://github.com/golang/tools/tree/master/gopls Google's lsp server for golang. Setup require 'lspconfig' . gopls . setup {} Default Values cmd = { \"gopls\" } filetypes = { \"go\" , \"gomod\" } root_dir = root_pattern ( \"go.mod\" , \".git\" )","title":"Go (gopls)"},{"location":"lsp/gopls/#go-gopls","text":"https://github.com/golang/tools/tree/master/gopls Google's lsp server for golang.","title":"Go (gopls)"},{"location":"lsp/gopls/#setup","text":"require 'lspconfig' . gopls . setup {}","title":"Setup"},{"location":"lsp/gopls/#default-values","text":"cmd = { \"gopls\" } filetypes = { \"go\" , \"gomod\" } root_dir = root_pattern ( \"go.mod\" , \".git\" )","title":"Default Values"},{"location":"lsp/graphql/","text":"GraphQL (graphql) https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-cli graphql-lsp can be installed via npm : npm install -g graphql-language-service-cli Setup require 'lspconfig' . graphql . setup {} Default Values cmd = { \"graphql-lsp\" , \"server\" , \"-m\" , \"stream\" } filetypes = { \"graphql\" } root_dir = root_pattern ( '.git' , '.graphqlrc' )","title":"GraphQL (graphql)"},{"location":"lsp/graphql/#graphql-graphql","text":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-cli graphql-lsp can be installed via npm : npm install -g graphql-language-service-cli","title":"GraphQL (graphql)"},{"location":"lsp/graphql/#setup","text":"require 'lspconfig' . graphql . setup {}","title":"Setup"},{"location":"lsp/graphql/#default-values","text":"cmd = { \"graphql-lsp\" , \"server\" , \"-m\" , \"stream\" } filetypes = { \"graphql\" } root_dir = root_pattern ( '.git' , '.graphqlrc' )","title":"Default Values"},{"location":"lsp/groovyls/","text":"Java (groovyls) https://github.com/prominic/groovy-language-server.git Requirements: - Linux/macOS (for now) - Java 11+ groovyls can be installed by following the instructions here . If you have installed groovy language server, you can set the cmd custom path as follow: require 'lspconfig' . groovyls . setup { -- Unix cmd = { \"java\" , \"-jar\" , \"path/to/groovyls/groovy-language-server-all.jar\" }, ... } Setup require 'lspconfig' . groovyls . setup {} Default Values cmd = { \"java\" , \"-jar\" , \"groovy-language-server-all.jar\" } filetypes = { \"groovy\" } root_dir = root_pattern ( \".git\" ) or vim . loop . os_homedir ()","title":"Java (groovyls)"},{"location":"lsp/groovyls/#java-groovyls","text":"https://github.com/prominic/groovy-language-server.git Requirements: - Linux/macOS (for now) - Java 11+ groovyls can be installed by following the instructions here . If you have installed groovy language server, you can set the cmd custom path as follow: require 'lspconfig' . groovyls . setup { -- Unix cmd = { \"java\" , \"-jar\" , \"path/to/groovyls/groovy-language-server-all.jar\" }, ... }","title":"Java (groovyls)"},{"location":"lsp/groovyls/#setup","text":"require 'lspconfig' . groovyls . setup {}","title":"Setup"},{"location":"lsp/groovyls/#default-values","text":"cmd = { \"java\" , \"-jar\" , \"groovy-language-server-all.jar\" } filetypes = { \"groovy\" } root_dir = root_pattern ( \".git\" ) or vim . loop . os_homedir ()","title":"Default Values"},{"location":"lsp/haxe_language_server/","text":"Haxe (haxe_language_server) https://github.com/vshaxe/haxe-language-server The Haxe language server can be built by running the following commands from the project's root directory: npm install npx lix run vshaxe-build -t language-server This will create bin/server.js . Note that the server requires Haxe 3.4.0 or higher. After building the language server, set the cmd setting in your setup function: lspconfig . haxe_language_server . setup ({ cmd = { \"node\" , \"path/to/bin/server.js\" }, }) By default, an HXML compiler arguments file named build.hxml is expected in your project's root directory. If your file is named something different, specify it using the init_options.displayArguments setting. Setup require 'lspconfig' . haxe_language_server . setup {} Default Values cmd = { \"haxe-language-server\" } filetypes = { \"haxe\" } init_options = { displayArguments = { \"build.hxml\" } } root_dir = root_pattern ( \"*.hxml\" ) settings = { haxe = { executable = \"haxe\" } }","title":"Haxe (haxe_language_server)"},{"location":"lsp/haxe_language_server/#haxe-haxe_language_server","text":"https://github.com/vshaxe/haxe-language-server The Haxe language server can be built by running the following commands from the project's root directory: npm install npx lix run vshaxe-build -t language-server This will create bin/server.js . Note that the server requires Haxe 3.4.0 or higher. After building the language server, set the cmd setting in your setup function: lspconfig . haxe_language_server . setup ({ cmd = { \"node\" , \"path/to/bin/server.js\" }, }) By default, an HXML compiler arguments file named build.hxml is expected in your project's root directory. If your file is named something different, specify it using the init_options.displayArguments setting.","title":"Haxe (haxe_language_server)"},{"location":"lsp/haxe_language_server/#setup","text":"require 'lspconfig' . haxe_language_server . setup {}","title":"Setup"},{"location":"lsp/haxe_language_server/#default-values","text":"cmd = { \"haxe-language-server\" } filetypes = { \"haxe\" } init_options = { displayArguments = { \"build.hxml\" } } root_dir = root_pattern ( \"*.hxml\" ) settings = { haxe = { executable = \"haxe\" } }","title":"Default Values"},{"location":"lsp/hie/","text":"Haskell (hie) https://github.com/haskell/haskell-ide-engine the following init_options are supported (see https://github.com/haskell/haskell-ide-engine#configuration ): init_options = { languageServerHaskell = { hlintOn = bool ; maxNumberOfProblems = number ; diagnosticsDebounceDuration = number ; liquidOn = bool ( default false ); completionSnippetsOn = bool ( default true ); formatOnImportOn = bool ( default true ); formattingProvider = string ( default \"brittany\" , alternate \"floskell\" ); } } Setup require 'lspconfig' . hie . setup {} Default Values cmd = { \"hie-wrapper\" , \"--lsp\" } filetypes = { \"haskell\" } root_dir = root_pattern ( \"stack.yaml\" , \"package.yaml\" , \".git\" ) This server accepts configuration via the settings key. Available settings haskell.completionSnippetsOn Type: boolean Default: true Show snippets with type information when using code completion haskell.diagnosticsOnChange Type: boolean Default: true Compute diagnostics continuously as you type. Turn off to only generate diagnostics on file save. haskell.formatOnImportOn Type: boolean Default: true When adding an import\\, use the formatter on the result haskell.formattingProvider enum { \"brittany\", \"floskell\", \"fourmolu\", \"ormolu\", \"stylish-haskell\", \"none\" } Default: \"ormolu\" The formatter to use when formatting a document or range. Ensure the plugin is enabled. haskell.hlintOn Type: boolean Default: true Get suggestions from hlint haskell.logFile Type: string Default: \"\" If set\\, redirects the logs to a file. haskell.plugin.class.globalOn Type: boolean Default: true Enables type class plugin haskell.plugin.eval.globalOn Type: boolean Default: true Enables eval plugin haskell.plugin.ghcide-completions.config.autoExtendOn Type: boolean Default: true null haskell.plugin.ghcide-completions.config.snippetsOn Type: boolean Default: true null haskell.plugin.ghcide-type-lenses.config.mode enum { \"always\", \"exported\", \"diagnostics\" } Default: true Control how type lenses are shown haskell.plugin.ghcide-type-lenses.globalOn Type: boolean Default: true Enables type lenses plugin haskell.plugin.haddockComments.globalOn Type: boolean Default: true Enables haddock comments plugin haskell.plugin.hlint.codeActionsOn Type: boolean Default: true Enables hlint code actions (apply hints) haskell.plugin.hlint.diagnosticsOn Type: boolean Default: true Enables hlint diagnostics haskell.plugin.importLens.codeActionsOn Type: boolean Default: true Enables explicit imports code actions haskell.plugin.importLens.codeLensOn Type: boolean Default: true Enables explicit imports code lenses haskell.plugin.moduleName.globalOn Type: boolean Default: true Enables module name plugin haskell.plugin.pragmas.codeActionsOn Type: boolean Default: true Enables pragmas code actions haskell.plugin.pragmas.completionOn Type: boolean Default: true Enables pragmas completions haskell.plugin.retrie.globalOn Type: boolean Default: true Enables retrie plugin haskell.plugin.splice.globalOn Type: boolean Default: true Enables splice plugin (expand template haskell definitions) haskell.plugin.tactic.config.features Type: string Default: true null haskell.plugin.tactic.config.max_use_ctor_actions Type: integer Default: 5 null haskell.plugin.tactic.globalOn Type: boolean Default: true Enables wingman (tactic) plugin haskell.plugin.tactics.config.hole_severity enum { 1, 2, 3, 4, vim.NIL } Default: vim.NIL The severity to use when showing hole diagnostics. haskell.plugin.tactics.config.timeout_duration Type: integer Default: 2 null haskell.releasesURL Type: string Default: \"\" An optional URL to override where to check for haskell-language-server releases haskell.serverExecutablePath Type: string Default: \"\" null haskell.trace.server enum { \"off\", \"messages\" } Default: \"off\" Traces the communication between VS Code and the language server. haskell.updateBehavior enum { \"keep-up-to-date\", \"prompt\", \"never-check\" } Default: \"keep-up-to-date\" null","title":"Haskell (hie)"},{"location":"lsp/hie/#haskell-hie","text":"https://github.com/haskell/haskell-ide-engine the following init_options are supported (see https://github.com/haskell/haskell-ide-engine#configuration ): init_options = { languageServerHaskell = { hlintOn = bool ; maxNumberOfProblems = number ; diagnosticsDebounceDuration = number ; liquidOn = bool ( default false ); completionSnippetsOn = bool ( default true ); formatOnImportOn = bool ( default true ); formattingProvider = string ( default \"brittany\" , alternate \"floskell\" ); } }","title":"Haskell (hie)"},{"location":"lsp/hie/#setup","text":"require 'lspconfig' . hie . setup {}","title":"Setup"},{"location":"lsp/hie/#default-values","text":"cmd = { \"hie-wrapper\" , \"--lsp\" } filetypes = { \"haskell\" } root_dir = root_pattern ( \"stack.yaml\" , \"package.yaml\" , \".git\" ) This server accepts configuration via the settings key.","title":"Default Values"},{"location":"lsp/hie/#available-settings","text":"","title":"Available settings"},{"location":"lsp/hie/#haskellcompletionsnippetson","text":"Type: boolean Default: true Show snippets with type information when using code completion","title":"haskell.completionSnippetsOn"},{"location":"lsp/hie/#haskelldiagnosticsonchange","text":"Type: boolean Default: true Compute diagnostics continuously as you type. Turn off to only generate diagnostics on file save.","title":"haskell.diagnosticsOnChange"},{"location":"lsp/hie/#haskellformatonimporton","text":"Type: boolean Default: true When adding an import\\, use the formatter on the result","title":"haskell.formatOnImportOn"},{"location":"lsp/hie/#haskellformattingprovider","text":"enum { \"brittany\", \"floskell\", \"fourmolu\", \"ormolu\", \"stylish-haskell\", \"none\" } Default: \"ormolu\" The formatter to use when formatting a document or range. Ensure the plugin is enabled.","title":"haskell.formattingProvider"},{"location":"lsp/hie/#haskellhlinton","text":"Type: boolean Default: true Get suggestions from hlint","title":"haskell.hlintOn"},{"location":"lsp/hie/#haskelllogfile","text":"Type: string Default: \"\" If set\\, redirects the logs to a file.","title":"haskell.logFile"},{"location":"lsp/hie/#haskellpluginclassglobalon","text":"Type: boolean Default: true Enables type class plugin","title":"haskell.plugin.class.globalOn"},{"location":"lsp/hie/#haskellpluginevalglobalon","text":"Type: boolean Default: true Enables eval plugin","title":"haskell.plugin.eval.globalOn"},{"location":"lsp/hie/#haskellpluginghcide-completionsconfigautoextendon","text":"Type: boolean Default: true null","title":"haskell.plugin.ghcide-completions.config.autoExtendOn"},{"location":"lsp/hie/#haskellpluginghcide-completionsconfigsnippetson","text":"Type: boolean Default: true null","title":"haskell.plugin.ghcide-completions.config.snippetsOn"},{"location":"lsp/hie/#haskellpluginghcide-type-lensesconfigmode","text":"enum { \"always\", \"exported\", \"diagnostics\" } Default: true Control how type lenses are shown","title":"haskell.plugin.ghcide-type-lenses.config.mode"},{"location":"lsp/hie/#haskellpluginghcide-type-lensesglobalon","text":"Type: boolean Default: true Enables type lenses plugin","title":"haskell.plugin.ghcide-type-lenses.globalOn"},{"location":"lsp/hie/#haskellpluginhaddockcommentsglobalon","text":"Type: boolean Default: true Enables haddock comments plugin","title":"haskell.plugin.haddockComments.globalOn"},{"location":"lsp/hie/#haskellpluginhlintcodeactionson","text":"Type: boolean Default: true Enables hlint code actions (apply hints)","title":"haskell.plugin.hlint.codeActionsOn"},{"location":"lsp/hie/#haskellpluginhlintdiagnosticson","text":"Type: boolean Default: true Enables hlint diagnostics","title":"haskell.plugin.hlint.diagnosticsOn"},{"location":"lsp/hie/#haskellpluginimportlenscodeactionson","text":"Type: boolean Default: true Enables explicit imports code actions","title":"haskell.plugin.importLens.codeActionsOn"},{"location":"lsp/hie/#haskellpluginimportlenscodelenson","text":"Type: boolean Default: true Enables explicit imports code lenses","title":"haskell.plugin.importLens.codeLensOn"},{"location":"lsp/hie/#haskellpluginmodulenameglobalon","text":"Type: boolean Default: true Enables module name plugin","title":"haskell.plugin.moduleName.globalOn"},{"location":"lsp/hie/#haskellpluginpragmascodeactionson","text":"Type: boolean Default: true Enables pragmas code actions","title":"haskell.plugin.pragmas.codeActionsOn"},{"location":"lsp/hie/#haskellpluginpragmascompletionon","text":"Type: boolean Default: true Enables pragmas completions","title":"haskell.plugin.pragmas.completionOn"},{"location":"lsp/hie/#haskellpluginretrieglobalon","text":"Type: boolean Default: true Enables retrie plugin","title":"haskell.plugin.retrie.globalOn"},{"location":"lsp/hie/#haskellpluginspliceglobalon","text":"Type: boolean Default: true Enables splice plugin (expand template haskell definitions)","title":"haskell.plugin.splice.globalOn"},{"location":"lsp/hie/#haskellplugintacticconfigfeatures","text":"Type: string Default: true null","title":"haskell.plugin.tactic.config.features"},{"location":"lsp/hie/#haskellplugintacticconfigmax_use_ctor_actions","text":"Type: integer Default: 5 null","title":"haskell.plugin.tactic.config.max_use_ctor_actions"},{"location":"lsp/hie/#haskellplugintacticglobalon","text":"Type: boolean Default: true Enables wingman (tactic) plugin","title":"haskell.plugin.tactic.globalOn"},{"location":"lsp/hie/#haskellplugintacticsconfighole_severity","text":"enum { 1, 2, 3, 4, vim.NIL } Default: vim.NIL The severity to use when showing hole diagnostics.","title":"haskell.plugin.tactics.config.hole_severity"},{"location":"lsp/hie/#haskellplugintacticsconfigtimeout_duration","text":"Type: integer Default: 2 null","title":"haskell.plugin.tactics.config.timeout_duration"},{"location":"lsp/hie/#haskellreleasesurl","text":"Type: string Default: \"\" An optional URL to override where to check for haskell-language-server releases","title":"haskell.releasesURL"},{"location":"lsp/hie/#haskellserverexecutablepath","text":"Type: string Default: \"\" null","title":"haskell.serverExecutablePath"},{"location":"lsp/hie/#haskelltraceserver","text":"enum { \"off\", \"messages\" } Default: \"off\" Traces the communication between VS Code and the language server.","title":"haskell.trace.server"},{"location":"lsp/hie/#haskellupdatebehavior","text":"enum { \"keep-up-to-date\", \"prompt\", \"never-check\" } Default: \"keep-up-to-date\" null","title":"haskell.updateBehavior"},{"location":"lsp/hls/","text":"Haskell (hls) https://github.com/haskell/haskell-language-server Haskell Language Server Setup require 'lspconfig' . hls . setup {} Default Values cmd = { \"haskell-language-server-wrapper\" , \"--lsp\" } filetypes = { \"haskell\" , \"lhaskell\" } lspinfo = function ( cfg ) -- return \"specific\" if cfg . settings . languageServerHaskell . logFile or false then return \"logfile: \" .. cfg . settings . languageServerHaskell . logFile end return \"\" end , root_dir = root_pattern ( \"*.cabal\" , \"stack.yaml\" , \"cabal.project\" , \"package.yaml\" , \"hie.yaml\" ) settings = { languageServerHaskell = { formattingProvider = \"ormolu\" } }","title":"Haskell (hls)"},{"location":"lsp/hls/#haskell-hls","text":"https://github.com/haskell/haskell-language-server Haskell Language Server","title":"Haskell (hls)"},{"location":"lsp/hls/#setup","text":"require 'lspconfig' . hls . setup {}","title":"Setup"},{"location":"lsp/hls/#default-values","text":"cmd = { \"haskell-language-server-wrapper\" , \"--lsp\" } filetypes = { \"haskell\" , \"lhaskell\" } lspinfo = function ( cfg ) -- return \"specific\" if cfg . settings . languageServerHaskell . logFile or false then return \"logfile: \" .. cfg . settings . languageServerHaskell . logFile end return \"\" end , root_dir = root_pattern ( \"*.cabal\" , \"stack.yaml\" , \"cabal.project\" , \"package.yaml\" , \"hie.yaml\" ) settings = { languageServerHaskell = { formattingProvider = \"ormolu\" } }","title":"Default Values"},{"location":"lsp/html/","text":"HTML (html) https://github.com/hrsh7th/vscode-langservers-extracted vscode-html-language-server can be installed via npm : npm i -g vscode-langservers-extracted Neovim does not currently include built-in snippets. vscode-html-language-server only provides completions when snippet support is enabled. To enable completion, install a snippet plugin and add the following override to your language client capabilities during setup. --Enable (broadcasting) snippet capability for completion local capabilities = vim . lsp . protocol . make_client_capabilities () capabilities . textDocument . completion . completionItem . snippetSupport = true require 'lspconfig' . html . setup { capabilities = capabilities , } Setup require 'lspconfig' . html . setup {} Default Values cmd = { \"vscode-html-language-server\" , \"--stdio\" } filetypes = { \"html\" } init_options = { configurationSection = { \"html\" , \"css\" , \"javascript\" }, embeddedLanguages = { css = true , javascript = true } } root_dir = function ( fname ) return root_pattern ( fname ) or vim . loop . os_homedir () end , settings = {}","title":"HTML (html)"},{"location":"lsp/html/#html-html","text":"https://github.com/hrsh7th/vscode-langservers-extracted vscode-html-language-server can be installed via npm : npm i -g vscode-langservers-extracted Neovim does not currently include built-in snippets. vscode-html-language-server only provides completions when snippet support is enabled. To enable completion, install a snippet plugin and add the following override to your language client capabilities during setup. --Enable (broadcasting) snippet capability for completion local capabilities = vim . lsp . protocol . make_client_capabilities () capabilities . textDocument . completion . completionItem . snippetSupport = true require 'lspconfig' . html . setup { capabilities = capabilities , }","title":"HTML (html)"},{"location":"lsp/html/#setup","text":"require 'lspconfig' . html . setup {}","title":"Setup"},{"location":"lsp/html/#default-values","text":"cmd = { \"vscode-html-language-server\" , \"--stdio\" } filetypes = { \"html\" } init_options = { configurationSection = { \"html\" , \"css\" , \"javascript\" }, embeddedLanguages = { css = true , javascript = true } } root_dir = function ( fname ) return root_pattern ( fname ) or vim . loop . os_homedir () end , settings = {}","title":"Default Values"},{"location":"lsp/intelephense/","text":"PHP (intelephense) https://intelephense.com/ intelephense can be installed via npm : npm install -g intelephense Setup require 'lspconfig' . intelephense . setup {} Default Values cmd = { \"intelephense\" , \"--stdio\" } filetypes = { \"php\" } root_dir = root_pattern ( \"composer.json\" , \".git\" )","title":"PHP (intelephense)"},{"location":"lsp/intelephense/#php-intelephense","text":"https://intelephense.com/ intelephense can be installed via npm : npm install -g intelephense","title":"PHP (intelephense)"},{"location":"lsp/intelephense/#setup","text":"require 'lspconfig' . intelephense . setup {}","title":"Setup"},{"location":"lsp/intelephense/#default-values","text":"cmd = { \"intelephense\" , \"--stdio\" } filetypes = { \"php\" } root_dir = root_pattern ( \"composer.json\" , \".git\" )","title":"Default Values"},{"location":"lsp/java_language_server/","text":"Java (java_language_server) https://github.com/georgewfraser/java-language-server Java language server Point cmd to lang_server_linux.sh or the equivalent script for macOS/Windows provided by java-language-server Setup require 'lspconfig' . java_language_server . setup {} Default Values cmd = {} filetypes = { \"java\" } root_dir = function ( startpath ) return M . search_ancestors ( startpath , matcher ) end settings = {}","title":"Java (java_language_server)"},{"location":"lsp/java_language_server/#java-java_language_server","text":"https://github.com/georgewfraser/java-language-server Java language server Point cmd to lang_server_linux.sh or the equivalent script for macOS/Windows provided by java-language-server","title":"Java (java_language_server)"},{"location":"lsp/java_language_server/#setup","text":"require 'lspconfig' . java_language_server . setup {}","title":"Setup"},{"location":"lsp/java_language_server/#default-values","text":"cmd = {} filetypes = { \"java\" } root_dir = function ( startpath ) return M . search_ancestors ( startpath , matcher ) end settings = {}","title":"Default Values"},{"location":"lsp/jdtls/","text":"Java (jdtls) https://projects.eclipse.org/projects/eclipse.jdt.ls Language server for Java. See project page for installation instructions. Due to the nature of java, the settings for eclipse jdtls cannot be automatically inferred. Please set the following environmental variables to match your installation. You can set these locally for your project with the help of direnv . Note version numbers will change depending on your project's version of java, your version of eclipse, and in the case of JDTLS_CONFIG, your OS. export JAR = /path/to/eclipse.jdt.ls/org.eclipse.jdt.ls.product/target/repository/plugins/org.eclipse.equinox.launcher_1.6.0.v20200915-1508.jar export GRADLE_HOME = $HOME /gradle export JAVA_HOME = $( readlink -f /usr/bin/java | sed \"s:/bin/java::\" ) export JDTLS_CONFIG = /path/to/eclipse.jdt.ls/org.eclipse.jdt.ls.product/target/repository/config_linux export WORKSPACE = $HOME /workspace Setup require 'lspconfig' . jdtls . setup {} Default Values cmd = { \"vim.NIL/bin/java\" , \"-Declipse.application=org.eclipse.jdt.ls.core.id1\" , \"-Dosgi.bundles.defaultStartLevel=4\" , \"-Declipse.product=org.eclipse.jdt.ls.core.product\" , \"-Dlog.protocol=true\" , \"-Dlog.level=ALL\" , \"-Xms1g\" , \"-Xmx2G\" , \"-jar\" , \"vim.NIL\" , \"-configuration\" , \"vim.NIL\" , \"-data\" , \"vim.NIL\" , \"--add-modules=ALL-SYSTEM\" , \"--add-opens java.base/java.util=ALL-UNNAMED\" , \"--add-opens java.base/java.lang=ALL-UNNAMED\" } cmd_env = { GRADLE_HOME = \"/usr/share/java/gradle\" , JAR = vim . NIL } filetypes = { \"java\" } handlers = { [ \"language/status\" ] = < function 1>, [\" textDocument / codeAction \"] = <function 2>, [\" textDocument / rename \"] = <function 3>, [\" workspace / applyEdit \"] = <function 4> } init_options = { jvm_args = {}, workspace = \" / home / anders / workspace \" } root_dir = root_pattern(\" . git \") This server accepts configuration via the settings key. Available settings java.autobuild.enabled Type: boolean Default: true Enable\\/disable the \\'auto build\\' java.codeGeneration.generateComments Type: boolean Generate method comments when generating the methods. java.codeGeneration.hashCodeEquals.useInstanceof Type: boolean Use \\'instanceof\\' to compare types when generating the hashCode and equals methods. java.codeGeneration.hashCodeEquals.useJava7Objects Type: boolean Use Objects.hash and Objects.equals when generating the hashCode and equals methods. This setting only applies to Java 7 and higher. java.codeGeneration.insertionLocation enum { \"afterCursor\", \"beforeCursor\", \"lastMember\" } Default: \"afterCursor\" Specifies the insertion location of the code generated by source actions. java.codeGeneration.toString.codeStyle enum { \"STRING_CONCATENATION\", \"STRING_BUILDER\", \"STRING_BUILDER_CHAINED\", \"STRING_FORMAT\" } Default: \"STRING_CONCATENATION\" The code style for generating the toString method. java.codeGeneration.toString.limitElements Type: integer Default: 0 Limit number of items in arrays\\/collections\\/maps to list\\, if 0 then list all. java.codeGeneration.toString.listArrayContents Type: boolean Default: true List contents of arrays instead of using native toString(). java.codeGeneration.toString.skipNullValues Type: boolean Skip null values when generating the toString method. java.codeGeneration.toString.template Type: string Default: \"${object.className} [${member.name()}=${member.value}, ${otherMembers}]\" The template for generating the toString method. java.codeGeneration.useBlocks Type: boolean Use blocks in \\'if\\' statements when generating the methods. java.completion.enabled Type: boolean Default: true Enable\\/disable code completion support java.completion.favoriteStaticMembers Type: array Default: { \"org.junit.Assert.*\", \"org.junit.Assume.*\", \"org.junit.jupiter.api.Assertions.*\", \"org.junit.jupiter.api.Assumptions.*\", \"org.junit.jupiter.api.DynamicContainer.*\", \"org.junit.jupiter.api.DynamicTest.*\", \"org.mockito.Mockito.*\", \"org.mockito.ArgumentMatchers.*\", \"org.mockito.Answers.*\" } Defines a list of static members or types with static members. Content assist will propose those static members even if the import is missing. java.completion.filteredTypes Type: array Default: { \"java.awt.*\", \"com.sun.*\", \"sun.*\" } Defines the type filters. All types whose fully qualified name matches the selected filter strings will be ignored in content assist or quick fix proposals and when organizing imports. For example \\'java.awt.*\\' will hide all types from the awt packages. java.completion.guessMethodArguments Type: boolean When set to true\\, method arguments are guessed when a method is selected from as list of code assist proposals. java.completion.importOrder Type: array Default: { \"java\", \"javax\", \"com\", \"org\" } Defines the sorting order of import statements. A package or type name prefix (e.g. \\'org.eclipse\\') is a valid entry. An import is always added to the most specific group. java.completion.maxResults Type: integer Default: 0 null java.completion.overwrite Type: boolean Default: true When set to true\\, code completion overwrites the current text. When set to false\\, code is simply added instead. java.configuration.checkProjectSettingsExclusions Type: boolean Default: true Controls whether to exclude extension-generated project settings files (.project\\, .classpath\\, .factorypath\\, .settings\\/) from the file explorer. java.configuration.maven.globalSettings Type: string Default: vim.NIL Path to Maven\\'s global settings.xml java.configuration.maven.notCoveredPluginExecutionSeverity enum { \"ignore\", \"warning\", \"error\" } Default: \"warning\" Specifies severity if the plugin execution is not covered by Maven build lifecycle. java.configuration.maven.userSettings Type: string Default: vim.NIL Path to Maven\\'s user settings.xml java.configuration.runtimes Type: array Default: {} Array items: {additionalProperties = false,default = vim.empty_dict(),properties = {default = {description = \"Is default runtime? Only one runtime can be default.\",type = \"boolean\"},javadoc = {description = \"JDK javadoc path.\",type = \"string\"},name = {description = \"Java Execution Environment name. Must be unique.\",enum = { \"J2SE-1.5\", \"JavaSE-1.6\", \"JavaSE-1.7\", \"JavaSE-1.8\", \"JavaSE-9\", \"JavaSE-10\", \"JavaSE-11\", \"JavaSE-12\", \"JavaSE-13\", \"JavaSE-14\", \"JavaSE-15\", \"JavaSE-16\" },type = \"string\"},path = {description = 'JDK home path. Should be the JDK installation directory, not the Java bin path.\\n On Windows, backslashes must be escaped, i.e.\\n\"path\":\"C:\\\\\\\\Program Files\\\\\\\\Java\\\\\\\\jdk1.8.0_161\".',pattern = \".*(?<!\\\\/bin|\\\\/bin\\\\/|\\\\\\\\bin|\\\\\\\\bin\\\\\\\\)$\",type = \"string\"},sources = {description = \"JDK sources path.\",type = \"string\"}},required = { \"path\", \"name\" },type = \"object\"} Map Java Execution Environments to local JDKs. java.configuration.updateBuildConfiguration enum { \"disabled\", \"interactive\", \"automatic\" } Default: \"interactive\" Specifies how modifications on build files update the Java classpath\\/configuration java.contentProvider.preferred Type: string Default: vim.NIL Preferred content provider (a 3rd party decompiler id\\, usually) java.eclipse.downloadSources Type: boolean Enable\\/disable download of Maven source artifacts for Eclipse projects. java.errors.incompleteClasspath.severity enum { \"ignore\", \"info\", \"warning\", \"error\" } Default: \"warning\" Specifies the severity of the message when the classpath is incomplete for a Java file java.foldingRange.enabled Type: boolean Default: true Enable\\/disable smart folding range support. If disabled\\, it will use the default indentation-based folding range provided by VS Code. java.format.comments.enabled Type: boolean Default: true Includes the comments during code formatting. java.format.enabled Type: boolean Default: true Enable\\/disable default Java formatter java.format.onType.enabled Type: boolean Default: true Enable\\/disable automatic block formatting when typing `\\;`\\, `\\<enter>` or `}` java.format.settings.profile Type: string Default: vim.NIL Optional formatter profile name from the Eclipse formatter settings. java.format.settings.url Type: string Default: vim.NIL null java.home Type: string|null Default: vim.NIL Specifies the folder path to the JDK (11 or more recent) used to launch the Java Language Server. On Windows\\, backslashes must be escaped\\, i.e. \\\"java.home\\\"\\:\\\"C\\:\\\\Program Files\\\\Java\\\\jdk11.0_8\\\" java.implementationsCodeLens.enabled Type: boolean Enable\\/disable the implementations code lens. java.import.exclusions Type: array Default: { \"**/node_modules/**\", \"**/.metadata/**\", \"**/archetype-resources/**\", \"**/META-INF/maven/**\" } Configure glob patterns for excluding folders. Use `!` to negate patterns to allow subfolders imports. You have to include a parent directory. The order is important. java.import.gradle.arguments Type: string Default: vim.NIL Arguments to pass to Gradle. java.import.gradle.enabled Type: boolean Default: true Enable\\/disable the Gradle importer. java.import.gradle.home Type: string Default: vim.NIL Use Gradle from the specified local installation directory or GRADLE_HOME if the Gradle wrapper is missing or disabled and no \\'java.import.gradle.version\\' is specified. java.import.gradle.java.home Type: string Default: vim.NIL The location to the JVM used to run the Gradle daemon. java.import.gradle.jvmArguments Type: string Default: vim.NIL JVM arguments to pass to Gradle. java.import.gradle.offline.enabled Type: boolean Enable\\/disable the Gradle offline mode. java.import.gradle.user.home Type: string Default: vim.NIL Setting for GRADLE_USER_HOME. java.import.gradle.version Type: string Default: vim.NIL Use Gradle from the specific version if the Gradle wrapper is missing or disabled. java.import.gradle.wrapper.enabled Type: boolean Default: true Use Gradle from the \\'gradle-wrapper.properties\\' file. java.import.maven.enabled Type: boolean Default: true Enable\\/disable the Maven importer. java.imports.gradle.wrapper.checksums Type: array Default: {} Array items: {additionalProperties = false,default = vim.empty_dict(),properties = {allowed = {default = true,label = \"Is allowed?\",type = \"boolean\"},sha256 = {label = \"SHA-256 checksum.\",type = \"string\"}},required = { \"sha256\" },type = \"object\",uniqueItems = true} Defines allowed\\/disallowed SHA-256 checksums of Gradle Wrappers java.jdt.ls.vmargs Type: string|null Default: \"-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx1G -Xms100m\" Specifies extra VM arguments used to launch the Java Language Server. Eg. use `-XX\\:+UseParallelGC -XX\\:GCTimeRatio\\=4 -XX\\:AdaptiveSizePolicyWeight\\=90 -Dsun.zip.disableMemoryMapping\\=true -Xmx1G -Xms100m ` to optimize memory usage with the parallel garbage collector java.maven.downloadSources Type: boolean Enable\\/disable download of Maven source artifacts as part of importing Maven projects. java.maven.updateSnapshots Type: boolean Force update of Snapshots\\/Releases. java.maxConcurrentBuilds Type: integer Default: 1 Max simultaneous project builds java.progressReports.enabled Type: boolean Default: true [Experimental] Enable\\/disable progress reports from background processes on the server. java.project.importHint Type: boolean Default: true Enable\\/disable the server-mode switch information\\, when Java projects import is skipped on startup. java.project.importOnFirstTimeStartup enum { \"disabled\", \"interactive\", \"automatic\" } Default: \"interactive\" Specifies whether to import the Java projects\\, when opening the folder in Hybrid mode for the first time. java.project.outputPath Type: string|null Default: \"\" null java.project.referencedLibraries Type: array|object Default: { \"lib/**/*.jar\" } Configure glob patterns for referencing local libraries to a Java project. java.project.resourceFilters Type: array Default: { \"node_modules\", \".git\" } Excludes files and folders from being refreshed by the Java Language Server\\, which can improve the overall performance. For example\\, [\\\"node_modules\\\"\\,\\\".git\\\"] will exclude all files and folders named \\'node_modules\\' or \\'.git\\'. Defaults to [\\\"node_modules\\\"\\,\\\".git\\\"]. java.project.sourcePaths Type: array Default: {} Array items: {type = \"string\"} null java.recommendations.dependency.analytics.show Type: boolean Default: true Show the recommended Dependency Analytics extension. java.references.includeAccessors Type: boolean Default: true Include getter\\, setter and builder\\/constructor when finding references. java.references.includeDecompiledSources Type: boolean Default: true Include the decompiled sources when finding references. java.referencesCodeLens.enabled Type: boolean Enable\\/disable the references code lens. java.saveActions.organizeImports Type: boolean Enable\\/disable auto organize imports on save action java.selectionRange.enabled Type: boolean Default: true Enable\\/disable Smart Selection support for Java. Disabling this option will not affect the VS Code built-in word-based and bracket-based smart selection. java.semanticHighlighting.enabled Type: boolean Default: true Enable\\/disable the semantic highlighting. java.server.launchMode enum { \"Standard\", \"LightWeight\", \"Hybrid\" } Default: \"Hybrid\" The launch mode for the Java extension java.settings.url Type: string Default: vim.NIL null java.showBuildStatusOnStart.enabled Type: boolean Automatically show build status on startup. java.signatureHelp.enabled Type: boolean Enable\\/disable the signature help. java.sources.organizeImports.starThreshold Type: integer Default: 99 Specifies the number of imports added before a star-import declaration is used. java.sources.organizeImports.staticStarThreshold Type: integer Default: 99 Specifies the number of static imports added before a star-import declaration is used. java.symbols.includeSourceMethodDeclarations Type: boolean null java.templates.fileHeader Type: array Default: {} null java.templates.typeComment Type: array Default: {} null java.trace.server enum { \"off\", \"messages\", \"verbose\" } Default: \"off\" Traces the communication between VS Code and the Java language server. java.typeHierarchy.lazyLoad Type: boolean Enable\\/disable lazy loading the content in type hierarchy. Lazy loading could save a lot of loading time but every type should be expanded manually to load its content.","title":"Java (jdtls)"},{"location":"lsp/jdtls/#java-jdtls","text":"https://projects.eclipse.org/projects/eclipse.jdt.ls Language server for Java. See project page for installation instructions. Due to the nature of java, the settings for eclipse jdtls cannot be automatically inferred. Please set the following environmental variables to match your installation. You can set these locally for your project with the help of direnv . Note version numbers will change depending on your project's version of java, your version of eclipse, and in the case of JDTLS_CONFIG, your OS. export JAR = /path/to/eclipse.jdt.ls/org.eclipse.jdt.ls.product/target/repository/plugins/org.eclipse.equinox.launcher_1.6.0.v20200915-1508.jar export GRADLE_HOME = $HOME /gradle export JAVA_HOME = $( readlink -f /usr/bin/java | sed \"s:/bin/java::\" ) export JDTLS_CONFIG = /path/to/eclipse.jdt.ls/org.eclipse.jdt.ls.product/target/repository/config_linux export WORKSPACE = $HOME /workspace","title":"Java (jdtls)"},{"location":"lsp/jdtls/#setup","text":"require 'lspconfig' . jdtls . setup {}","title":"Setup"},{"location":"lsp/jdtls/#default-values","text":"cmd = { \"vim.NIL/bin/java\" , \"-Declipse.application=org.eclipse.jdt.ls.core.id1\" , \"-Dosgi.bundles.defaultStartLevel=4\" , \"-Declipse.product=org.eclipse.jdt.ls.core.product\" , \"-Dlog.protocol=true\" , \"-Dlog.level=ALL\" , \"-Xms1g\" , \"-Xmx2G\" , \"-jar\" , \"vim.NIL\" , \"-configuration\" , \"vim.NIL\" , \"-data\" , \"vim.NIL\" , \"--add-modules=ALL-SYSTEM\" , \"--add-opens java.base/java.util=ALL-UNNAMED\" , \"--add-opens java.base/java.lang=ALL-UNNAMED\" } cmd_env = { GRADLE_HOME = \"/usr/share/java/gradle\" , JAR = vim . NIL } filetypes = { \"java\" } handlers = { [ \"language/status\" ] = < function 1>, [\" textDocument / codeAction \"] = <function 2>, [\" textDocument / rename \"] = <function 3>, [\" workspace / applyEdit \"] = <function 4> } init_options = { jvm_args = {}, workspace = \" / home / anders / workspace \" } root_dir = root_pattern(\" . git \") This server accepts configuration via the settings key.","title":"Default Values"},{"location":"lsp/jdtls/#available-settings","text":"","title":"Available settings"},{"location":"lsp/jdtls/#javaautobuildenabled","text":"Type: boolean Default: true Enable\\/disable the \\'auto build\\'","title":"java.autobuild.enabled"},{"location":"lsp/jdtls/#javacodegenerationgeneratecomments","text":"Type: boolean Generate method comments when generating the methods.","title":"java.codeGeneration.generateComments"},{"location":"lsp/jdtls/#javacodegenerationhashcodeequalsuseinstanceof","text":"Type: boolean Use \\'instanceof\\' to compare types when generating the hashCode and equals methods.","title":"java.codeGeneration.hashCodeEquals.useInstanceof"},{"location":"lsp/jdtls/#javacodegenerationhashcodeequalsusejava7objects","text":"Type: boolean Use Objects.hash and Objects.equals when generating the hashCode and equals methods. This setting only applies to Java 7 and higher.","title":"java.codeGeneration.hashCodeEquals.useJava7Objects"},{"location":"lsp/jdtls/#javacodegenerationinsertionlocation","text":"enum { \"afterCursor\", \"beforeCursor\", \"lastMember\" } Default: \"afterCursor\" Specifies the insertion location of the code generated by source actions.","title":"java.codeGeneration.insertionLocation"},{"location":"lsp/jdtls/#javacodegenerationtostringcodestyle","text":"enum { \"STRING_CONCATENATION\", \"STRING_BUILDER\", \"STRING_BUILDER_CHAINED\", \"STRING_FORMAT\" } Default: \"STRING_CONCATENATION\" The code style for generating the toString method.","title":"java.codeGeneration.toString.codeStyle"},{"location":"lsp/jdtls/#javacodegenerationtostringlimitelements","text":"Type: integer Default: 0 Limit number of items in arrays\\/collections\\/maps to list\\, if 0 then list all.","title":"java.codeGeneration.toString.limitElements"},{"location":"lsp/jdtls/#javacodegenerationtostringlistarraycontents","text":"Type: boolean Default: true List contents of arrays instead of using native toString().","title":"java.codeGeneration.toString.listArrayContents"},{"location":"lsp/jdtls/#javacodegenerationtostringskipnullvalues","text":"Type: boolean Skip null values when generating the toString method.","title":"java.codeGeneration.toString.skipNullValues"},{"location":"lsp/jdtls/#javacodegenerationtostringtemplate","text":"Type: string Default: \"${object.className} [${member.name()}=${member.value}, ${otherMembers}]\" The template for generating the toString method.","title":"java.codeGeneration.toString.template"},{"location":"lsp/jdtls/#javacodegenerationuseblocks","text":"Type: boolean Use blocks in \\'if\\' statements when generating the methods.","title":"java.codeGeneration.useBlocks"},{"location":"lsp/jdtls/#javacompletionenabled","text":"Type: boolean Default: true Enable\\/disable code completion support","title":"java.completion.enabled"},{"location":"lsp/jdtls/#javacompletionfavoritestaticmembers","text":"Type: array Default: { \"org.junit.Assert.*\", \"org.junit.Assume.*\", \"org.junit.jupiter.api.Assertions.*\", \"org.junit.jupiter.api.Assumptions.*\", \"org.junit.jupiter.api.DynamicContainer.*\", \"org.junit.jupiter.api.DynamicTest.*\", \"org.mockito.Mockito.*\", \"org.mockito.ArgumentMatchers.*\", \"org.mockito.Answers.*\" } Defines a list of static members or types with static members. Content assist will propose those static members even if the import is missing.","title":"java.completion.favoriteStaticMembers"},{"location":"lsp/jdtls/#javacompletionfilteredtypes","text":"Type: array Default: { \"java.awt.*\", \"com.sun.*\", \"sun.*\" } Defines the type filters. All types whose fully qualified name matches the selected filter strings will be ignored in content assist or quick fix proposals and when organizing imports. For example \\'java.awt.*\\' will hide all types from the awt packages.","title":"java.completion.filteredTypes"},{"location":"lsp/jdtls/#javacompletionguessmethodarguments","text":"Type: boolean When set to true\\, method arguments are guessed when a method is selected from as list of code assist proposals.","title":"java.completion.guessMethodArguments"},{"location":"lsp/jdtls/#javacompletionimportorder","text":"Type: array Default: { \"java\", \"javax\", \"com\", \"org\" } Defines the sorting order of import statements. A package or type name prefix (e.g. \\'org.eclipse\\') is a valid entry. An import is always added to the most specific group.","title":"java.completion.importOrder"},{"location":"lsp/jdtls/#javacompletionmaxresults","text":"Type: integer Default: 0 null","title":"java.completion.maxResults"},{"location":"lsp/jdtls/#javacompletionoverwrite","text":"Type: boolean Default: true When set to true\\, code completion overwrites the current text. When set to false\\, code is simply added instead.","title":"java.completion.overwrite"},{"location":"lsp/jdtls/#javaconfigurationcheckprojectsettingsexclusions","text":"Type: boolean Default: true Controls whether to exclude extension-generated project settings files (.project\\, .classpath\\, .factorypath\\, .settings\\/) from the file explorer.","title":"java.configuration.checkProjectSettingsExclusions"},{"location":"lsp/jdtls/#javaconfigurationmavenglobalsettings","text":"Type: string Default: vim.NIL Path to Maven\\'s global settings.xml","title":"java.configuration.maven.globalSettings"},{"location":"lsp/jdtls/#javaconfigurationmavennotcoveredpluginexecutionseverity","text":"enum { \"ignore\", \"warning\", \"error\" } Default: \"warning\" Specifies severity if the plugin execution is not covered by Maven build lifecycle.","title":"java.configuration.maven.notCoveredPluginExecutionSeverity"},{"location":"lsp/jdtls/#javaconfigurationmavenusersettings","text":"Type: string Default: vim.NIL Path to Maven\\'s user settings.xml","title":"java.configuration.maven.userSettings"},{"location":"lsp/jdtls/#javaconfigurationruntimes","text":"Type: array Default: {} Array items: {additionalProperties = false,default = vim.empty_dict(),properties = {default = {description = \"Is default runtime? Only one runtime can be default.\",type = \"boolean\"},javadoc = {description = \"JDK javadoc path.\",type = \"string\"},name = {description = \"Java Execution Environment name. Must be unique.\",enum = { \"J2SE-1.5\", \"JavaSE-1.6\", \"JavaSE-1.7\", \"JavaSE-1.8\", \"JavaSE-9\", \"JavaSE-10\", \"JavaSE-11\", \"JavaSE-12\", \"JavaSE-13\", \"JavaSE-14\", \"JavaSE-15\", \"JavaSE-16\" },type = \"string\"},path = {description = 'JDK home path. Should be the JDK installation directory, not the Java bin path.\\n On Windows, backslashes must be escaped, i.e.\\n\"path\":\"C:\\\\\\\\Program Files\\\\\\\\Java\\\\\\\\jdk1.8.0_161\".',pattern = \".*(?<!\\\\/bin|\\\\/bin\\\\/|\\\\\\\\bin|\\\\\\\\bin\\\\\\\\)$\",type = \"string\"},sources = {description = \"JDK sources path.\",type = \"string\"}},required = { \"path\", \"name\" },type = \"object\"} Map Java Execution Environments to local JDKs.","title":"java.configuration.runtimes"},{"location":"lsp/jdtls/#javaconfigurationupdatebuildconfiguration","text":"enum { \"disabled\", \"interactive\", \"automatic\" } Default: \"interactive\" Specifies how modifications on build files update the Java classpath\\/configuration","title":"java.configuration.updateBuildConfiguration"},{"location":"lsp/jdtls/#javacontentproviderpreferred","text":"Type: string Default: vim.NIL Preferred content provider (a 3rd party decompiler id\\, usually)","title":"java.contentProvider.preferred"},{"location":"lsp/jdtls/#javaeclipsedownloadsources","text":"Type: boolean Enable\\/disable download of Maven source artifacts for Eclipse projects.","title":"java.eclipse.downloadSources"},{"location":"lsp/jdtls/#javaerrorsincompleteclasspathseverity","text":"enum { \"ignore\", \"info\", \"warning\", \"error\" } Default: \"warning\" Specifies the severity of the message when the classpath is incomplete for a Java file","title":"java.errors.incompleteClasspath.severity"},{"location":"lsp/jdtls/#javafoldingrangeenabled","text":"Type: boolean Default: true Enable\\/disable smart folding range support. If disabled\\, it will use the default indentation-based folding range provided by VS Code.","title":"java.foldingRange.enabled"},{"location":"lsp/jdtls/#javaformatcommentsenabled","text":"Type: boolean Default: true Includes the comments during code formatting.","title":"java.format.comments.enabled"},{"location":"lsp/jdtls/#javaformatenabled","text":"Type: boolean Default: true Enable\\/disable default Java formatter","title":"java.format.enabled"},{"location":"lsp/jdtls/#javaformatontypeenabled","text":"Type: boolean Default: true Enable\\/disable automatic block formatting when typing `\\;`\\, `\\<enter>` or `}`","title":"java.format.onType.enabled"},{"location":"lsp/jdtls/#javaformatsettingsprofile","text":"Type: string Default: vim.NIL Optional formatter profile name from the Eclipse formatter settings.","title":"java.format.settings.profile"},{"location":"lsp/jdtls/#javaformatsettingsurl","text":"Type: string Default: vim.NIL null","title":"java.format.settings.url"},{"location":"lsp/jdtls/#javahome","text":"Type: string|null Default: vim.NIL Specifies the folder path to the JDK (11 or more recent) used to launch the Java Language Server. On Windows\\, backslashes must be escaped\\, i.e. \\\"java.home\\\"\\:\\\"C\\:\\\\Program Files\\\\Java\\\\jdk11.0_8\\\"","title":"java.home"},{"location":"lsp/jdtls/#javaimplementationscodelensenabled","text":"Type: boolean Enable\\/disable the implementations code lens.","title":"java.implementationsCodeLens.enabled"},{"location":"lsp/jdtls/#javaimportexclusions","text":"Type: array Default: { \"**/node_modules/**\", \"**/.metadata/**\", \"**/archetype-resources/**\", \"**/META-INF/maven/**\" } Configure glob patterns for excluding folders. Use `!` to negate patterns to allow subfolders imports. You have to include a parent directory. The order is important.","title":"java.import.exclusions"},{"location":"lsp/jdtls/#javaimportgradlearguments","text":"Type: string Default: vim.NIL Arguments to pass to Gradle.","title":"java.import.gradle.arguments"},{"location":"lsp/jdtls/#javaimportgradleenabled","text":"Type: boolean Default: true Enable\\/disable the Gradle importer.","title":"java.import.gradle.enabled"},{"location":"lsp/jdtls/#javaimportgradlehome","text":"Type: string Default: vim.NIL Use Gradle from the specified local installation directory or GRADLE_HOME if the Gradle wrapper is missing or disabled and no \\'java.import.gradle.version\\' is specified.","title":"java.import.gradle.home"},{"location":"lsp/jdtls/#javaimportgradlejavahome","text":"Type: string Default: vim.NIL The location to the JVM used to run the Gradle daemon.","title":"java.import.gradle.java.home"},{"location":"lsp/jdtls/#javaimportgradlejvmarguments","text":"Type: string Default: vim.NIL JVM arguments to pass to Gradle.","title":"java.import.gradle.jvmArguments"},{"location":"lsp/jdtls/#javaimportgradleofflineenabled","text":"Type: boolean Enable\\/disable the Gradle offline mode.","title":"java.import.gradle.offline.enabled"},{"location":"lsp/jdtls/#javaimportgradleuserhome","text":"Type: string Default: vim.NIL Setting for GRADLE_USER_HOME.","title":"java.import.gradle.user.home"},{"location":"lsp/jdtls/#javaimportgradleversion","text":"Type: string Default: vim.NIL Use Gradle from the specific version if the Gradle wrapper is missing or disabled.","title":"java.import.gradle.version"},{"location":"lsp/jdtls/#javaimportgradlewrapperenabled","text":"Type: boolean Default: true Use Gradle from the \\'gradle-wrapper.properties\\' file.","title":"java.import.gradle.wrapper.enabled"},{"location":"lsp/jdtls/#javaimportmavenenabled","text":"Type: boolean Default: true Enable\\/disable the Maven importer.","title":"java.import.maven.enabled"},{"location":"lsp/jdtls/#javaimportsgradlewrapperchecksums","text":"Type: array Default: {} Array items: {additionalProperties = false,default = vim.empty_dict(),properties = {allowed = {default = true,label = \"Is allowed?\",type = \"boolean\"},sha256 = {label = \"SHA-256 checksum.\",type = \"string\"}},required = { \"sha256\" },type = \"object\",uniqueItems = true} Defines allowed\\/disallowed SHA-256 checksums of Gradle Wrappers","title":"java.imports.gradle.wrapper.checksums"},{"location":"lsp/jdtls/#javajdtlsvmargs","text":"Type: string|null Default: \"-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx1G -Xms100m\" Specifies extra VM arguments used to launch the Java Language Server. Eg. use `-XX\\:+UseParallelGC -XX\\:GCTimeRatio\\=4 -XX\\:AdaptiveSizePolicyWeight\\=90 -Dsun.zip.disableMemoryMapping\\=true -Xmx1G -Xms100m ` to optimize memory usage with the parallel garbage collector","title":"java.jdt.ls.vmargs"},{"location":"lsp/jdtls/#javamavendownloadsources","text":"Type: boolean Enable\\/disable download of Maven source artifacts as part of importing Maven projects.","title":"java.maven.downloadSources"},{"location":"lsp/jdtls/#javamavenupdatesnapshots","text":"Type: boolean Force update of Snapshots\\/Releases.","title":"java.maven.updateSnapshots"},{"location":"lsp/jdtls/#javamaxconcurrentbuilds","text":"Type: integer Default: 1 Max simultaneous project builds","title":"java.maxConcurrentBuilds"},{"location":"lsp/jdtls/#javaprogressreportsenabled","text":"Type: boolean Default: true [Experimental] Enable\\/disable progress reports from background processes on the server.","title":"java.progressReports.enabled"},{"location":"lsp/jdtls/#javaprojectimporthint","text":"Type: boolean Default: true Enable\\/disable the server-mode switch information\\, when Java projects import is skipped on startup.","title":"java.project.importHint"},{"location":"lsp/jdtls/#javaprojectimportonfirsttimestartup","text":"enum { \"disabled\", \"interactive\", \"automatic\" } Default: \"interactive\" Specifies whether to import the Java projects\\, when opening the folder in Hybrid mode for the first time.","title":"java.project.importOnFirstTimeStartup"},{"location":"lsp/jdtls/#javaprojectoutputpath","text":"Type: string|null Default: \"\" null","title":"java.project.outputPath"},{"location":"lsp/jdtls/#javaprojectreferencedlibraries","text":"Type: array|object Default: { \"lib/**/*.jar\" } Configure glob patterns for referencing local libraries to a Java project.","title":"java.project.referencedLibraries"},{"location":"lsp/jdtls/#javaprojectresourcefilters","text":"Type: array Default: { \"node_modules\", \".git\" } Excludes files and folders from being refreshed by the Java Language Server\\, which can improve the overall performance. For example\\, [\\\"node_modules\\\"\\,\\\".git\\\"] will exclude all files and folders named \\'node_modules\\' or \\'.git\\'. Defaults to [\\\"node_modules\\\"\\,\\\".git\\\"].","title":"java.project.resourceFilters"},{"location":"lsp/jdtls/#javaprojectsourcepaths","text":"Type: array Default: {} Array items: {type = \"string\"} null","title":"java.project.sourcePaths"},{"location":"lsp/jdtls/#javarecommendationsdependencyanalyticsshow","text":"Type: boolean Default: true Show the recommended Dependency Analytics extension.","title":"java.recommendations.dependency.analytics.show"},{"location":"lsp/jdtls/#javareferencesincludeaccessors","text":"Type: boolean Default: true Include getter\\, setter and builder\\/constructor when finding references.","title":"java.references.includeAccessors"},{"location":"lsp/jdtls/#javareferencesincludedecompiledsources","text":"Type: boolean Default: true Include the decompiled sources when finding references.","title":"java.references.includeDecompiledSources"},{"location":"lsp/jdtls/#javareferencescodelensenabled","text":"Type: boolean Enable\\/disable the references code lens.","title":"java.referencesCodeLens.enabled"},{"location":"lsp/jdtls/#javasaveactionsorganizeimports","text":"Type: boolean Enable\\/disable auto organize imports on save action","title":"java.saveActions.organizeImports"},{"location":"lsp/jdtls/#javaselectionrangeenabled","text":"Type: boolean Default: true Enable\\/disable Smart Selection support for Java. Disabling this option will not affect the VS Code built-in word-based and bracket-based smart selection.","title":"java.selectionRange.enabled"},{"location":"lsp/jdtls/#javasemantichighlightingenabled","text":"Type: boolean Default: true Enable\\/disable the semantic highlighting.","title":"java.semanticHighlighting.enabled"},{"location":"lsp/jdtls/#javaserverlaunchmode","text":"enum { \"Standard\", \"LightWeight\", \"Hybrid\" } Default: \"Hybrid\" The launch mode for the Java extension","title":"java.server.launchMode"},{"location":"lsp/jdtls/#javasettingsurl","text":"Type: string Default: vim.NIL null","title":"java.settings.url"},{"location":"lsp/jdtls/#javashowbuildstatusonstartenabled","text":"Type: boolean Automatically show build status on startup.","title":"java.showBuildStatusOnStart.enabled"},{"location":"lsp/jdtls/#javasignaturehelpenabled","text":"Type: boolean Enable\\/disable the signature help.","title":"java.signatureHelp.enabled"},{"location":"lsp/jdtls/#javasourcesorganizeimportsstarthreshold","text":"Type: integer Default: 99 Specifies the number of imports added before a star-import declaration is used.","title":"java.sources.organizeImports.starThreshold"},{"location":"lsp/jdtls/#javasourcesorganizeimportsstaticstarthreshold","text":"Type: integer Default: 99 Specifies the number of static imports added before a star-import declaration is used.","title":"java.sources.organizeImports.staticStarThreshold"},{"location":"lsp/jdtls/#javasymbolsincludesourcemethoddeclarations","text":"Type: boolean null","title":"java.symbols.includeSourceMethodDeclarations"},{"location":"lsp/jdtls/#javatemplatesfileheader","text":"Type: array Default: {} null","title":"java.templates.fileHeader"},{"location":"lsp/jdtls/#javatemplatestypecomment","text":"Type: array Default: {} null","title":"java.templates.typeComment"},{"location":"lsp/jdtls/#javatraceserver","text":"enum { \"off\", \"messages\", \"verbose\" } Default: \"off\" Traces the communication between VS Code and the Java language server.","title":"java.trace.server"},{"location":"lsp/jdtls/#javatypehierarchylazyload","text":"Type: boolean Enable\\/disable lazy loading the content in type hierarchy. Lazy loading could save a lot of loading time but every type should be expanded manually to load its content.","title":"java.typeHierarchy.lazyLoad"},{"location":"lsp/jedi_language_server/","text":"Python (jedi_language_server) https://github.com/pappasam/jedi-language-server jedi-language-server , a language server for Python, built on top of jedi Setup require 'lspconfig' . jedi_language_server . setup {} Default Values cmd = { \"jedi-language-server\" } filetypes = { \"python\" } root_dir = vim 's starting directory","title":"Python (jedi_language_server)"},{"location":"lsp/jedi_language_server/#python-jedi_language_server","text":"https://github.com/pappasam/jedi-language-server jedi-language-server , a language server for Python, built on top of jedi","title":"Python (jedi_language_server)"},{"location":"lsp/jedi_language_server/#setup","text":"require 'lspconfig' . jedi_language_server . setup {}","title":"Setup"},{"location":"lsp/jedi_language_server/#default-values","text":"cmd = { \"jedi-language-server\" } filetypes = { \"python\" } root_dir = vim 's starting directory","title":"Default Values"},{"location":"lsp/jsonls/","text":"JSON (jsonls) https://github.com/hrsh7th/vscode-langservers-extracted vscode-json-language-server, a language server for JSON and JSON schema vscode-json-language-server can be installed via npm : npm i -g vscode-langservers-extracted vscode-json-language-server only provides range formatting. You can map a command that applies range formatting to the entire document: require 'lspconfig' . jsonls . setup { commands = { Format = { function () vim . lsp . buf . range_formatting ({},{ 0 , 0 },{ vim . fn . line ( \"$\" ), 0 }) end } } } Setup require 'lspconfig' . jsonls . setup {} Default Values cmd = { \"vscode-json-language-server\" , \"--stdio\" } filetypes = { \"json\" } init_options = { provideFormatter = true } root_dir = root_pattern ( \".git\" , vim . fn . getcwd ()) This server accepts configuration via the settings key. Available settings json.colorDecorators.enable Type: boolean Default: true \\%json.colorDecorators.enable.desc\\% json.format.enable Type: boolean Default: true \\%json.format.enable.desc\\% json.maxItemsComputed Type: number Default: 5000 \\%json.maxItemsComputed.desc\\% json.schemaDownload.enable Type: boolean Default: true \\%json.enableSchemaDownload.desc\\% json.schemas Type: array Array items: {default = {fileMatch = { \"/myfile\" },url = \"schemaURL\"},properties = {fileMatch = {description = \"%json.schemas.fileMatch.desc%\",items = {default = \"MyFile.json\",description = \"%json.schemas.fileMatch.item.desc%\",type = \"string\"},minItems = 1,type = \"array\"},schema = {[\"$ref\"] = \"http://json-schema.org/draft-07/schema#\",description = \"%json.schemas.schema.desc%\"},url = {default = \"/user.schema.json\",description = \"%json.schemas.url.desc%\",type = \"string\"}},type = \"object\"} \\%json.schemas.desc\\% json.trace.server enum { \"off\", \"messages\", \"verbose\" } Default: \"off\" \\%json.tracing.desc\\%","title":"JSON (jsonls)"},{"location":"lsp/jsonls/#json-jsonls","text":"https://github.com/hrsh7th/vscode-langservers-extracted vscode-json-language-server, a language server for JSON and JSON schema vscode-json-language-server can be installed via npm : npm i -g vscode-langservers-extracted vscode-json-language-server only provides range formatting. You can map a command that applies range formatting to the entire document: require 'lspconfig' . jsonls . setup { commands = { Format = { function () vim . lsp . buf . range_formatting ({},{ 0 , 0 },{ vim . fn . line ( \"$\" ), 0 }) end } } }","title":"JSON (jsonls)"},{"location":"lsp/jsonls/#setup","text":"require 'lspconfig' . jsonls . setup {}","title":"Setup"},{"location":"lsp/jsonls/#default-values","text":"cmd = { \"vscode-json-language-server\" , \"--stdio\" } filetypes = { \"json\" } init_options = { provideFormatter = true } root_dir = root_pattern ( \".git\" , vim . fn . getcwd ()) This server accepts configuration via the settings key.","title":"Default Values"},{"location":"lsp/jsonls/#available-settings","text":"","title":"Available settings"},{"location":"lsp/jsonls/#jsoncolordecoratorsenable","text":"Type: boolean Default: true \\%json.colorDecorators.enable.desc\\%","title":"json.colorDecorators.enable"},{"location":"lsp/jsonls/#jsonformatenable","text":"Type: boolean Default: true \\%json.format.enable.desc\\%","title":"json.format.enable"},{"location":"lsp/jsonls/#jsonmaxitemscomputed","text":"Type: number Default: 5000 \\%json.maxItemsComputed.desc\\%","title":"json.maxItemsComputed"},{"location":"lsp/jsonls/#jsonschemadownloadenable","text":"Type: boolean Default: true \\%json.enableSchemaDownload.desc\\%","title":"json.schemaDownload.enable"},{"location":"lsp/jsonls/#jsonschemas","text":"Type: array Array items: {default = {fileMatch = { \"/myfile\" },url = \"schemaURL\"},properties = {fileMatch = {description = \"%json.schemas.fileMatch.desc%\",items = {default = \"MyFile.json\",description = \"%json.schemas.fileMatch.item.desc%\",type = \"string\"},minItems = 1,type = \"array\"},schema = {[\"$ref\"] = \"http://json-schema.org/draft-07/schema#\",description = \"%json.schemas.schema.desc%\"},url = {default = \"/user.schema.json\",description = \"%json.schemas.url.desc%\",type = \"string\"}},type = \"object\"} \\%json.schemas.desc\\%","title":"json.schemas"},{"location":"lsp/jsonls/#jsontraceserver","text":"enum { \"off\", \"messages\", \"verbose\" } Default: \"off\" \\%json.tracing.desc\\%","title":"json.trace.server"},{"location":"lsp/julials/","text":"Julia (julials) https://github.com/julia-vscode/julia-vscode LanguageServer.jl can be installed with julia and Pkg : julia -e 'using Pkg; Pkg.add(\"LanguageServer\"); Pkg.add(\"SymbolServer\")' The default config lazily evaluates the location of the julia language server from the your global julia packages. This adds a small overhead on first opening of a julia file. To avoid this overhead, replace server_path in on_new_config with a hard-coded path to the server. require 'lspconfig' . julials . setup { on_new_config = function ( new_config , new_root_dir ) server_path = \"/path/to/directory/containing/LanguageServer.jl/src\" cmd = { \"julia\" , \"--project=\" .. server_path , \"--startup-file=no\" , \"--history-file=no\" , \"-e\" , [[ using Pkg ; Pkg . instantiate () using LanguageServer ; using SymbolServer ; depot_path = get ( ENV , \"JULIA_DEPOT_PATH\" , \"\" ) project_path = dirname ( something ( Base . current_project ( pwd ()), Base . load_path_expand ( LOAD_PATH [ 2 ]))) # Make sure that we only load packages from this environment specifically . @ info \"Running language server\" env = Base . load_path ()[ 1 ] pwd () project_path depot_path server = LanguageServer . LanguageServerInstance ( stdin , stdout , project_path , depot_path ); server . runlinter = true ; run ( server ); \\ ] \\ ] }; new_config . cmd = cmd end } You can find the path to the globally installed LanguageServer.jl package with the following command: julia -e 'print(Base.find_package(\"LanguageServer\"))' Note: the directory passed to --project=... should terminate with src, not LanguageServer.jl. Setup require 'lspconfig' . julials . setup {} Default Values cmd = { \"julia\" , \"--startup-file=no\" , \"--history-file=no\" , \"-e\" , ' using Pkg; \\n Pkg.instantiate() \\n using LanguageServer; using SymbolServer; \\n depot_path = get(ENV, \"JULIA_DEPOT_PATH\", \"\") \\n project_path = dirname(something(Base.current_project(pwd()), Base.load_path_expand(LOAD_PATH[2]))) \\n # Make sure that we only load packages from this environment specifically. \\n @info \"Running language server\" env=Base.load_path()[1] pwd() project_path depot_path \\n server = LanguageServer.LanguageServerInstance(stdin, stdout, project_path, depot_path); \\n server.runlinter = true; \\n run(server); \\n ' } filetypes = { \"julia\" } on_new_config = function ( new_config , _ ) local server_path = vim . fn . system \"julia --startup-file=no -q -e 'print(Base.find_package( \\\" LanguageServer \\\" ))'\" local new_cmd = vim . deepcopy ( cmd ) table.insert ( new_cmd , 2 , \"--project=\" .. server_path : sub ( 0 , - 19 )) new_config . cmd = new_cmd end , root_dir = function ( fname ) return util . find_git_ancestor ( fname ) or vim . fn . getcwd () end , This server accepts configuration via the settings key. Available settings julia.NumThreads Type: integer|null Default: vim.NIL Number of threads to use for Julia processes. julia.additionalArgs Type: array Default: {} Additional Julia arguments. julia.completionmode enum { \"exportedonly\", \"import\", \"qualify\" } Default: \"import\" Sets the mode for completions. julia.debuggerDefaultCompiled Type: array Default: { \"Base.\", \"-Base.!\", \"-Base.all\", \"-Base.all!\", \"-Base.any\", \"-Base.any!\", \"-Base.cd\", \"-Base.iterate\", \"-Base.collect\", \"-Base.collect_similar\", \"-Base._collect\", \"-Base.collect_to!\", \"-Base.collect_to_with_first!\", \"-Base.filter\", \"-Base.filter!\", \"-Base.foreach\", \"-Base.findall\", \"-Base.findfirst\", \"-Base.findlast\", \"-Base.findnext\", \"-Base.findprev\", \"-Base.Generator\", \"-Base.map\", \"-Base.map!\", \"-Base.maximum!\", \"-Base.minimum!\", \"-Base.mktemp\", \"-Base.mktempdir\", \"-Base.open\", \"-Base.prod!\", \"-Base.redirect_stderr\", \"-Base.redirect_stdin\", \"-Base.redirect_stdout\", \"-Base.reenable_sigint\", \"-Base.setindex!\", \"-Base.setprecision\", \"-Base.setrounding\", \"-Base.show\", \"-Base.sprint\", \"-Base.sum\", \"-Base.sum!\", \"-Base.task_local_storage\", \"-Base.timedwait\", \"-Base.withenv\", \"Core\", \"Core.Compiler.\", \"Core.IR\", \"Core.Intrinsics\", \"DelimitedFiles\", \"Distributed\", \"LinearAlgebra.\", \"Serialization\", \"Statistics\", \"-Statistics.mean\", \"SparseArrays\", \"Mmap\" } Functions or modules that are set to compiled mode when setting the defaults. julia.deleteJuliaCovFiles Type: boolean Default: \"true\" Delete Julia .cov files when running tests with coverage\\, leaving only a .lcov file behind. julia.editor Type: string|null Default: vim.NIL null julia.enableCrashReporter Type: boolean|null Default: vim.NIL Enable crash reports to be sent to the julia VS Code extension developers. julia.enableTelemetry Type: boolean|null Default: vim.NIL Enable usage data and errors to be sent to the julia VS Code extension developers. julia.environmentPath Type: string|null Default: vim.NIL Path to a julia environment. VS Code needs to be reloaded for changes to take effect. julia.executablePath Type: string Default: \"\" Points to the julia executable. julia.execution.codeInREPL Type: boolean Print executed code in REPL and append it to the REPL history. julia.execution.inlineResults.colors Type: object Default: vim.empty_dict() null julia.execution.resultType enum { \"REPL\", \"inline\", \"inline, errors in REPL\", \"both\" } Default: \"REPL\" Specifies how to show inline execution results julia.focusPlotNavigator Type: boolean Whether to automatically show the plot navigator when plotting. julia.format.calls Type: boolean Default: true Format function calls. julia.format.comments Type: boolean Default: true Format comments. julia.format.curly Type: boolean Default: true Format braces. julia.format.docs Type: boolean Default: true Format inline documentation. julia.format.indent Type: integer Default: 4 Indent size for formatting. julia.format.indents Type: boolean Default: true Format file indents. julia.format.iterOps Type: boolean Default: true Format loop iterators. julia.format.keywords Type: bool Default: true Ensure single spacing following keywords. julia.format.kwarg enum { \"none\", \"single\", \"off\" } Default: \"none\" Format whitespace around function keyword arguments. julia.format.ops Type: boolean Default: true Format whitespace around operators. julia.format.tuples Type: boolean Default: true Format tuples. julia.lint.call Type: boolean Default: true This compares call signatures against all known methods for the called function. Calls with too many or too few arguments\\, or unknown keyword parameters are highlighted. julia.lint.constif Type: boolean Default: true Check for constant conditionals in if statements that result in branches never being reached.. julia.lint.datadecl Type: boolean Default: true Check variables used in type declarations are datatypes. julia.lint.disabledDirs Type: array Default: { \"docs\", \"test\" } null julia.lint.iter Type: boolean Default: true Check iterator syntax of loops. Will identify\\, for example\\, attempts to iterate over single values. julia.lint.lazy Type: boolean Default: true Check for deterministic lazy boolean operators. julia.lint.missingrefs enum { \"none\", \"symbols\", \"all\" } Default: \"none\" Highlight unknown symbols. The `symbols` option will not mark unknown fields. julia.lint.modname Type: boolean Default: true Check submodule names do not shadow their parent\\'s name. julia.lint.nothingcomp Type: boolean Default: true Check for use of `\\=\\=` rather than `\\=\\=\\=` when comparing against `nothing`. julia.lint.pirates Type: boolean Default: true Check for type piracy - the overloading of external functions with methods specified for external datatypes. \\'External\\' here refers to imported code. julia.lint.run Type: boolean Default: true Run the linter on active files. julia.lint.typeparam Type: boolean Default: true Check parameters declared in `where` statements or datatype declarations are used. julia.lint.useoffuncargs Type: boolean Default: true Check that all declared arguments are used within the function body. julia.liveTestFile Type: string Default: \"test/runtests.jl\" A workspace relative path to a Julia file that contains the tests that should be run for live testing. julia.packageServer Type: string Default: \"\" null julia.persistentSession.enabled Type: boolean null julia.persistentSession.shell Type: string Default: \"/bin/sh\" Shell used to start the persistent session. julia.persistentSession.shellExecutionArgument Type: string Default: \"-c\" null julia.persistentSession.tmuxSessionName Type: string Default: \"julia_vscode\" null julia.trace.server enum { \"off\", \"messages\", \"verbose\" } Default: \"off\" Traces the communication between VS Code and the language server. julia.useCustomSysimage Type: boolean Use an existing custom sysimage when starting the REPL julia.usePlotPane Type: boolean Default: true Display plots within VS Code. Might require a restart of the Julia process. julia.useProgressFrontend Type: boolean Default: true null julia.useRevise Type: boolean Default: true Load Revise.jl on startup of the REPL.","title":"Julia (julials)"},{"location":"lsp/julials/#julia-julials","text":"https://github.com/julia-vscode/julia-vscode LanguageServer.jl can be installed with julia and Pkg : julia -e 'using Pkg; Pkg.add(\"LanguageServer\"); Pkg.add(\"SymbolServer\")' The default config lazily evaluates the location of the julia language server from the your global julia packages. This adds a small overhead on first opening of a julia file. To avoid this overhead, replace server_path in on_new_config with a hard-coded path to the server. require 'lspconfig' . julials . setup { on_new_config = function ( new_config , new_root_dir ) server_path = \"/path/to/directory/containing/LanguageServer.jl/src\" cmd = { \"julia\" , \"--project=\" .. server_path , \"--startup-file=no\" , \"--history-file=no\" , \"-e\" , [[ using Pkg ; Pkg . instantiate () using LanguageServer ; using SymbolServer ; depot_path = get ( ENV , \"JULIA_DEPOT_PATH\" , \"\" ) project_path = dirname ( something ( Base . current_project ( pwd ()), Base . load_path_expand ( LOAD_PATH [ 2 ]))) # Make sure that we only load packages from this environment specifically . @ info \"Running language server\" env = Base . load_path ()[ 1 ] pwd () project_path depot_path server = LanguageServer . LanguageServerInstance ( stdin , stdout , project_path , depot_path ); server . runlinter = true ; run ( server ); \\ ] \\ ] }; new_config . cmd = cmd end } You can find the path to the globally installed LanguageServer.jl package with the following command: julia -e 'print(Base.find_package(\"LanguageServer\"))' Note: the directory passed to --project=... should terminate with src, not LanguageServer.jl.","title":"Julia (julials)"},{"location":"lsp/julials/#setup","text":"require 'lspconfig' . julials . setup {}","title":"Setup"},{"location":"lsp/julials/#default-values","text":"cmd = { \"julia\" , \"--startup-file=no\" , \"--history-file=no\" , \"-e\" , ' using Pkg; \\n Pkg.instantiate() \\n using LanguageServer; using SymbolServer; \\n depot_path = get(ENV, \"JULIA_DEPOT_PATH\", \"\") \\n project_path = dirname(something(Base.current_project(pwd()), Base.load_path_expand(LOAD_PATH[2]))) \\n # Make sure that we only load packages from this environment specifically. \\n @info \"Running language server\" env=Base.load_path()[1] pwd() project_path depot_path \\n server = LanguageServer.LanguageServerInstance(stdin, stdout, project_path, depot_path); \\n server.runlinter = true; \\n run(server); \\n ' } filetypes = { \"julia\" } on_new_config = function ( new_config , _ ) local server_path = vim . fn . system \"julia --startup-file=no -q -e 'print(Base.find_package( \\\" LanguageServer \\\" ))'\" local new_cmd = vim . deepcopy ( cmd ) table.insert ( new_cmd , 2 , \"--project=\" .. server_path : sub ( 0 , - 19 )) new_config . cmd = new_cmd end , root_dir = function ( fname ) return util . find_git_ancestor ( fname ) or vim . fn . getcwd () end , This server accepts configuration via the settings key.","title":"Default Values"},{"location":"lsp/julials/#available-settings","text":"","title":"Available settings"},{"location":"lsp/julials/#julianumthreads","text":"Type: integer|null Default: vim.NIL Number of threads to use for Julia processes.","title":"julia.NumThreads"},{"location":"lsp/julials/#juliaadditionalargs","text":"Type: array Default: {} Additional Julia arguments.","title":"julia.additionalArgs"},{"location":"lsp/julials/#juliacompletionmode","text":"enum { \"exportedonly\", \"import\", \"qualify\" } Default: \"import\" Sets the mode for completions.","title":"julia.completionmode"},{"location":"lsp/julials/#juliadebuggerdefaultcompiled","text":"Type: array Default: { \"Base.\", \"-Base.!\", \"-Base.all\", \"-Base.all!\", \"-Base.any\", \"-Base.any!\", \"-Base.cd\", \"-Base.iterate\", \"-Base.collect\", \"-Base.collect_similar\", \"-Base._collect\", \"-Base.collect_to!\", \"-Base.collect_to_with_first!\", \"-Base.filter\", \"-Base.filter!\", \"-Base.foreach\", \"-Base.findall\", \"-Base.findfirst\", \"-Base.findlast\", \"-Base.findnext\", \"-Base.findprev\", \"-Base.Generator\", \"-Base.map\", \"-Base.map!\", \"-Base.maximum!\", \"-Base.minimum!\", \"-Base.mktemp\", \"-Base.mktempdir\", \"-Base.open\", \"-Base.prod!\", \"-Base.redirect_stderr\", \"-Base.redirect_stdin\", \"-Base.redirect_stdout\", \"-Base.reenable_sigint\", \"-Base.setindex!\", \"-Base.setprecision\", \"-Base.setrounding\", \"-Base.show\", \"-Base.sprint\", \"-Base.sum\", \"-Base.sum!\", \"-Base.task_local_storage\", \"-Base.timedwait\", \"-Base.withenv\", \"Core\", \"Core.Compiler.\", \"Core.IR\", \"Core.Intrinsics\", \"DelimitedFiles\", \"Distributed\", \"LinearAlgebra.\", \"Serialization\", \"Statistics\", \"-Statistics.mean\", \"SparseArrays\", \"Mmap\" } Functions or modules that are set to compiled mode when setting the defaults.","title":"julia.debuggerDefaultCompiled"},{"location":"lsp/julials/#juliadeletejuliacovfiles","text":"Type: boolean Default: \"true\" Delete Julia .cov files when running tests with coverage\\, leaving only a .lcov file behind.","title":"julia.deleteJuliaCovFiles"},{"location":"lsp/julials/#juliaeditor","text":"Type: string|null Default: vim.NIL null","title":"julia.editor"},{"location":"lsp/julials/#juliaenablecrashreporter","text":"Type: boolean|null Default: vim.NIL Enable crash reports to be sent to the julia VS Code extension developers.","title":"julia.enableCrashReporter"},{"location":"lsp/julials/#juliaenabletelemetry","text":"Type: boolean|null Default: vim.NIL Enable usage data and errors to be sent to the julia VS Code extension developers.","title":"julia.enableTelemetry"},{"location":"lsp/julials/#juliaenvironmentpath","text":"Type: string|null Default: vim.NIL Path to a julia environment. VS Code needs to be reloaded for changes to take effect.","title":"julia.environmentPath"},{"location":"lsp/julials/#juliaexecutablepath","text":"Type: string Default: \"\" Points to the julia executable.","title":"julia.executablePath"},{"location":"lsp/julials/#juliaexecutioncodeinrepl","text":"Type: boolean Print executed code in REPL and append it to the REPL history.","title":"julia.execution.codeInREPL"},{"location":"lsp/julials/#juliaexecutioninlineresultscolors","text":"Type: object Default: vim.empty_dict() null","title":"julia.execution.inlineResults.colors"},{"location":"lsp/julials/#juliaexecutionresulttype","text":"enum { \"REPL\", \"inline\", \"inline, errors in REPL\", \"both\" } Default: \"REPL\" Specifies how to show inline execution results","title":"julia.execution.resultType"},{"location":"lsp/julials/#juliafocusplotnavigator","text":"Type: boolean Whether to automatically show the plot navigator when plotting.","title":"julia.focusPlotNavigator"},{"location":"lsp/julials/#juliaformatcalls","text":"Type: boolean Default: true Format function calls.","title":"julia.format.calls"},{"location":"lsp/julials/#juliaformatcomments","text":"Type: boolean Default: true Format comments.","title":"julia.format.comments"},{"location":"lsp/julials/#juliaformatcurly","text":"Type: boolean Default: true Format braces.","title":"julia.format.curly"},{"location":"lsp/julials/#juliaformatdocs","text":"Type: boolean Default: true Format inline documentation.","title":"julia.format.docs"},{"location":"lsp/julials/#juliaformatindent","text":"Type: integer Default: 4 Indent size for formatting.","title":"julia.format.indent"},{"location":"lsp/julials/#juliaformatindents","text":"Type: boolean Default: true Format file indents.","title":"julia.format.indents"},{"location":"lsp/julials/#juliaformatiterops","text":"Type: boolean Default: true Format loop iterators.","title":"julia.format.iterOps"},{"location":"lsp/julials/#juliaformatkeywords","text":"Type: bool Default: true Ensure single spacing following keywords.","title":"julia.format.keywords"},{"location":"lsp/julials/#juliaformatkwarg","text":"enum { \"none\", \"single\", \"off\" } Default: \"none\" Format whitespace around function keyword arguments.","title":"julia.format.kwarg"},{"location":"lsp/julials/#juliaformatops","text":"Type: boolean Default: true Format whitespace around operators.","title":"julia.format.ops"},{"location":"lsp/julials/#juliaformattuples","text":"Type: boolean Default: true Format tuples.","title":"julia.format.tuples"},{"location":"lsp/julials/#julialintcall","text":"Type: boolean Default: true This compares call signatures against all known methods for the called function. Calls with too many or too few arguments\\, or unknown keyword parameters are highlighted.","title":"julia.lint.call"},{"location":"lsp/julials/#julialintconstif","text":"Type: boolean Default: true Check for constant conditionals in if statements that result in branches never being reached..","title":"julia.lint.constif"},{"location":"lsp/julials/#julialintdatadecl","text":"Type: boolean Default: true Check variables used in type declarations are datatypes.","title":"julia.lint.datadecl"},{"location":"lsp/julials/#julialintdisableddirs","text":"Type: array Default: { \"docs\", \"test\" } null","title":"julia.lint.disabledDirs"},{"location":"lsp/julials/#julialintiter","text":"Type: boolean Default: true Check iterator syntax of loops. Will identify\\, for example\\, attempts to iterate over single values.","title":"julia.lint.iter"},{"location":"lsp/julials/#julialintlazy","text":"Type: boolean Default: true Check for deterministic lazy boolean operators.","title":"julia.lint.lazy"},{"location":"lsp/julials/#julialintmissingrefs","text":"enum { \"none\", \"symbols\", \"all\" } Default: \"none\" Highlight unknown symbols. The `symbols` option will not mark unknown fields.","title":"julia.lint.missingrefs"},{"location":"lsp/julials/#julialintmodname","text":"Type: boolean Default: true Check submodule names do not shadow their parent\\'s name.","title":"julia.lint.modname"},{"location":"lsp/julials/#julialintnothingcomp","text":"Type: boolean Default: true Check for use of `\\=\\=` rather than `\\=\\=\\=` when comparing against `nothing`.","title":"julia.lint.nothingcomp"},{"location":"lsp/julials/#julialintpirates","text":"Type: boolean Default: true Check for type piracy - the overloading of external functions with methods specified for external datatypes. \\'External\\' here refers to imported code.","title":"julia.lint.pirates"},{"location":"lsp/julials/#julialintrun","text":"Type: boolean Default: true Run the linter on active files.","title":"julia.lint.run"},{"location":"lsp/julials/#julialinttypeparam","text":"Type: boolean Default: true Check parameters declared in `where` statements or datatype declarations are used.","title":"julia.lint.typeparam"},{"location":"lsp/julials/#julialintuseoffuncargs","text":"Type: boolean Default: true Check that all declared arguments are used within the function body.","title":"julia.lint.useoffuncargs"},{"location":"lsp/julials/#julialivetestfile","text":"Type: string Default: \"test/runtests.jl\" A workspace relative path to a Julia file that contains the tests that should be run for live testing.","title":"julia.liveTestFile"},{"location":"lsp/julials/#juliapackageserver","text":"Type: string Default: \"\" null","title":"julia.packageServer"},{"location":"lsp/julials/#juliapersistentsessionenabled","text":"Type: boolean null","title":"julia.persistentSession.enabled"},{"location":"lsp/julials/#juliapersistentsessionshell","text":"Type: string Default: \"/bin/sh\" Shell used to start the persistent session.","title":"julia.persistentSession.shell"},{"location":"lsp/julials/#juliapersistentsessionshellexecutionargument","text":"Type: string Default: \"-c\" null","title":"julia.persistentSession.shellExecutionArgument"},{"location":"lsp/julials/#juliapersistentsessiontmuxsessionname","text":"Type: string Default: \"julia_vscode\" null","title":"julia.persistentSession.tmuxSessionName"},{"location":"lsp/julials/#juliatraceserver","text":"enum { \"off\", \"messages\", \"verbose\" } Default: \"off\" Traces the communication between VS Code and the language server.","title":"julia.trace.server"},{"location":"lsp/julials/#juliausecustomsysimage","text":"Type: boolean Use an existing custom sysimage when starting the REPL","title":"julia.useCustomSysimage"},{"location":"lsp/julials/#juliauseplotpane","text":"Type: boolean Default: true Display plots within VS Code. Might require a restart of the Julia process.","title":"julia.usePlotPane"},{"location":"lsp/julials/#juliauseprogressfrontend","text":"Type: boolean Default: true null","title":"julia.useProgressFrontend"},{"location":"lsp/julials/#juliauserevise","text":"Type: boolean Default: true Load Revise.jl on startup of the REPL.","title":"julia.useRevise"},{"location":"lsp/kotlin_language_server/","text":"Kotlin (kotlin_language_server) A kotlin language server which was developed for internal usage and released afterwards. Maintaining is not done by the original author, but by fwcd. It is builded via gradle and developed on github. Source and additional description: https://github.com/fwcd/kotlin-language-server Setup require 'lspconfig' . kotlin_language_server . setup {} Default Values cmd = { \"kotlin-language-server\" } filetypes = { \"kotlin\" } root_dir = root_pattern ( \"settings.gradle\" ) This server accepts configuration via the settings key. Available settings kotlin.compiler.jvm.target Type: string Default: \"default\" Specifies the JVM target\\, e.g. \\\"1.6\\\" or \\\"1.8\\\" kotlin.completion.snippets.enabled Type: boolean Default: true Specifies whether code completion should provide snippets (true) or plain-text items (false). kotlin.debounceTime Type: integer Default: 250 [DEPRECATED] Specifies the debounce time limit. Lower to increase responsiveness at the cost of possibile stability issues. kotlin.debugAdapter.enabled Type: boolean Default: true [Recommended] Specifies whether the debug adapter should be used. When enabled a debugger for Kotlin will be available. kotlin.debugAdapter.path Type: string Default: \"\" Optionally a custom path to the debug adapter executable. kotlin.externalSources.autoConvertToKotlin Type: boolean Default: true Specifies whether decompiled\\/external classes should be auto-converted to Kotlin. kotlin.externalSources.useKlsScheme Type: boolean Default: true [Recommended] Specifies whether URIs inside JARs should be represented using the \\'kls\\'-scheme. kotlin.indexing.enabled Type: boolean Default: true Whether global symbols in the project should be indexed automatically in the background. This enables e.g. code completion for unimported classes and functions. kotlin.languageServer.debugAttach.autoSuspend Type: boolean [DEBUG] If enabled (together with debugAttach.enabled)\\, the language server will not immediately launch but instead listen on the specified attach port and wait for a debugger. This is ONLY useful if you need to debug the language server ITSELF. kotlin.languageServer.debugAttach.enabled Type: boolean [DEBUG] Whether the language server should listen for debuggers\\, i.e. be debuggable while running in VSCode. This is ONLY useful if you need to debug the language server ITSELF. kotlin.languageServer.debugAttach.port Type: integer Default: 5005 [DEBUG] If transport is stdio this enables you to attach to the running langugage server with a debugger. This is ONLY useful if you need to debug the language server ITSELF. kotlin.languageServer.enabled Type: boolean Default: true [Recommended] Specifies whether the language server should be used. When enabled the extension will provide code completions and linting\\, otherwise just syntax highlighting. Might require a reload to apply. kotlin.languageServer.path Type: string Default: \"\" Optionally a custom path to the language server executable. kotlin.languageServer.port Type: integer Default: 0 The port to which the client will attempt to connect to. A random port is used if zero. Only used if the transport layer is TCP. kotlin.languageServer.transport enum { \"stdio\", \"tcp\" } Default: \"stdio\" The transport layer beneath the language server protocol. Note that the extension will launch the server even if a TCP socket is used. kotlin.linting.debounceTime Type: integer Default: 250 [DEBUG] Specifies the debounce time limit. Lower to increase responsiveness at the cost of possibile stability issues. kotlin.snippetsEnabled Type: boolean Default: true [DEPRECATED] Specifies whether code completion should provide snippets (true) or plain-text items (false). kotlin.trace.server enum { \"off\", \"messages\", \"verbose\" } Default: \"off\" Traces the communication between VSCode and the Kotlin language server.","title":"Kotlin (kotlin_language_server)"},{"location":"lsp/kotlin_language_server/#kotlin-kotlin_language_server","text":"A kotlin language server which was developed for internal usage and released afterwards. Maintaining is not done by the original author, but by fwcd. It is builded via gradle and developed on github. Source and additional description: https://github.com/fwcd/kotlin-language-server","title":"Kotlin (kotlin_language_server)"},{"location":"lsp/kotlin_language_server/#setup","text":"require 'lspconfig' . kotlin_language_server . setup {}","title":"Setup"},{"location":"lsp/kotlin_language_server/#default-values","text":"cmd = { \"kotlin-language-server\" } filetypes = { \"kotlin\" } root_dir = root_pattern ( \"settings.gradle\" ) This server accepts configuration via the settings key.","title":"Default Values"},{"location":"lsp/kotlin_language_server/#available-settings","text":"","title":"Available settings"},{"location":"lsp/kotlin_language_server/#kotlincompilerjvmtarget","text":"Type: string Default: \"default\" Specifies the JVM target\\, e.g. \\\"1.6\\\" or \\\"1.8\\\"","title":"kotlin.compiler.jvm.target"},{"location":"lsp/kotlin_language_server/#kotlincompletionsnippetsenabled","text":"Type: boolean Default: true Specifies whether code completion should provide snippets (true) or plain-text items (false).","title":"kotlin.completion.snippets.enabled"},{"location":"lsp/kotlin_language_server/#kotlindebouncetime","text":"Type: integer Default: 250 [DEPRECATED] Specifies the debounce time limit. Lower to increase responsiveness at the cost of possibile stability issues.","title":"kotlin.debounceTime"},{"location":"lsp/kotlin_language_server/#kotlindebugadapterenabled","text":"Type: boolean Default: true [Recommended] Specifies whether the debug adapter should be used. When enabled a debugger for Kotlin will be available.","title":"kotlin.debugAdapter.enabled"},{"location":"lsp/kotlin_language_server/#kotlindebugadapterpath","text":"Type: string Default: \"\" Optionally a custom path to the debug adapter executable.","title":"kotlin.debugAdapter.path"},{"location":"lsp/kotlin_language_server/#kotlinexternalsourcesautoconverttokotlin","text":"Type: boolean Default: true Specifies whether decompiled\\/external classes should be auto-converted to Kotlin.","title":"kotlin.externalSources.autoConvertToKotlin"},{"location":"lsp/kotlin_language_server/#kotlinexternalsourcesuseklsscheme","text":"Type: boolean Default: true [Recommended] Specifies whether URIs inside JARs should be represented using the \\'kls\\'-scheme.","title":"kotlin.externalSources.useKlsScheme"},{"location":"lsp/kotlin_language_server/#kotlinindexingenabled","text":"Type: boolean Default: true Whether global symbols in the project should be indexed automatically in the background. This enables e.g. code completion for unimported classes and functions.","title":"kotlin.indexing.enabled"},{"location":"lsp/kotlin_language_server/#kotlinlanguageserverdebugattachautosuspend","text":"Type: boolean [DEBUG] If enabled (together with debugAttach.enabled)\\, the language server will not immediately launch but instead listen on the specified attach port and wait for a debugger. This is ONLY useful if you need to debug the language server ITSELF.","title":"kotlin.languageServer.debugAttach.autoSuspend"},{"location":"lsp/kotlin_language_server/#kotlinlanguageserverdebugattachenabled","text":"Type: boolean [DEBUG] Whether the language server should listen for debuggers\\, i.e. be debuggable while running in VSCode. This is ONLY useful if you need to debug the language server ITSELF.","title":"kotlin.languageServer.debugAttach.enabled"},{"location":"lsp/kotlin_language_server/#kotlinlanguageserverdebugattachport","text":"Type: integer Default: 5005 [DEBUG] If transport is stdio this enables you to attach to the running langugage server with a debugger. This is ONLY useful if you need to debug the language server ITSELF.","title":"kotlin.languageServer.debugAttach.port"},{"location":"lsp/kotlin_language_server/#kotlinlanguageserverenabled","text":"Type: boolean Default: true [Recommended] Specifies whether the language server should be used. When enabled the extension will provide code completions and linting\\, otherwise just syntax highlighting. Might require a reload to apply.","title":"kotlin.languageServer.enabled"},{"location":"lsp/kotlin_language_server/#kotlinlanguageserverpath","text":"Type: string Default: \"\" Optionally a custom path to the language server executable.","title":"kotlin.languageServer.path"},{"location":"lsp/kotlin_language_server/#kotlinlanguageserverport","text":"Type: integer Default: 0 The port to which the client will attempt to connect to. A random port is used if zero. Only used if the transport layer is TCP.","title":"kotlin.languageServer.port"},{"location":"lsp/kotlin_language_server/#kotlinlanguageservertransport","text":"enum { \"stdio\", \"tcp\" } Default: \"stdio\" The transport layer beneath the language server protocol. Note that the extension will launch the server even if a TCP socket is used.","title":"kotlin.languageServer.transport"},{"location":"lsp/kotlin_language_server/#kotlinlintingdebouncetime","text":"Type: integer Default: 250 [DEBUG] Specifies the debounce time limit. Lower to increase responsiveness at the cost of possibile stability issues.","title":"kotlin.linting.debounceTime"},{"location":"lsp/kotlin_language_server/#kotlinsnippetsenabled","text":"Type: boolean Default: true [DEPRECATED] Specifies whether code completion should provide snippets (true) or plain-text items (false).","title":"kotlin.snippetsEnabled"},{"location":"lsp/kotlin_language_server/#kotlintraceserver","text":"enum { \"off\", \"messages\", \"verbose\" } Default: \"off\" Traces the communication between VSCode and the Kotlin language server.","title":"kotlin.trace.server"},{"location":"lsp/lean3ls/","text":"Lean (lean3ls) https://github.com/leanprover/lean-client-js/tree/master/lean-language-server Lean installation instructions can be found here . Once Lean is installed, you can install the Lean 3 language server by running npm install -g lean-language-server Setup require 'lspconfig' . lean3ls . setup {} Default Values cmd = { \"lean-language-server\" , \"--stdio\" , \"--\" , \"-M\" , \"4096\" , \"-T\" , \"100000\" } filetypes = { \"lean3\" } on_new_config = function ( config , root ) if not util . path . is_file ( root .. \"/leanpkg.toml\" ) then return end if not config . cmd_cwd then config . cmd_cwd = root end end , root_dir = root_pattern ( \"leanpkg.toml\" ) or root_pattern ( \".git\" ) or path . dirname","title":"Lean (lean3ls)"},{"location":"lsp/lean3ls/#lean-lean3ls","text":"https://github.com/leanprover/lean-client-js/tree/master/lean-language-server Lean installation instructions can be found here . Once Lean is installed, you can install the Lean 3 language server by running npm install -g lean-language-server","title":"Lean (lean3ls)"},{"location":"lsp/lean3ls/#setup","text":"require 'lspconfig' . lean3ls . setup {}","title":"Setup"},{"location":"lsp/lean3ls/#default-values","text":"cmd = { \"lean-language-server\" , \"--stdio\" , \"--\" , \"-M\" , \"4096\" , \"-T\" , \"100000\" } filetypes = { \"lean3\" } on_new_config = function ( config , root ) if not util . path . is_file ( root .. \"/leanpkg.toml\" ) then return end if not config . cmd_cwd then config . cmd_cwd = root end end , root_dir = root_pattern ( \"leanpkg.toml\" ) or root_pattern ( \".git\" ) or path . dirname","title":"Default Values"},{"location":"lsp/leanls/","text":"Lean (leanls) https://github.com/leanprover/lean4 Lean installation instructions can be found here . The Lean 4 language server is built-in with a Lean 4 install (and can be manually run with, e.g., lean --server ). Setup require 'lspconfig' . leanls . setup {} Default Values cmd = { \"lean\" , \"--server\" } filetypes = { \"lean\" } on_new_config = function ( config , root ) if not util . path . is_file ( root .. \"/leanpkg.toml\" ) then return end if not config . cmd_cwd then config . cmd_cwd = root end end , root_dir = root_pattern ( \"leanpkg.toml\" ) or root_pattern ( \".git\" ) or path . dirname","title":"Lean (leanls)"},{"location":"lsp/leanls/#lean-leanls","text":"https://github.com/leanprover/lean4 Lean installation instructions can be found here . The Lean 4 language server is built-in with a Lean 4 install (and can be manually run with, e.g., lean --server ).","title":"Lean (leanls)"},{"location":"lsp/leanls/#setup","text":"require 'lspconfig' . leanls . setup {}","title":"Setup"},{"location":"lsp/leanls/#default-values","text":"cmd = { \"lean\" , \"--server\" } filetypes = { \"lean\" } on_new_config = function ( config , root ) if not util . path . is_file ( root .. \"/leanpkg.toml\" ) then return end if not config . cmd_cwd then config . cmd_cwd = root end end , root_dir = root_pattern ( \"leanpkg.toml\" ) or root_pattern ( \".git\" ) or path . dirname","title":"Default Values"},{"location":"lsp/metals/","text":"Scala (metals) https://scalameta.org/metals/ Scala language server with rich IDE features. See full instructions in the Metals documentation: https://scalameta.org/metals/docs/editors/vim.html#using-an-alternative-lsp-client Note: that if you're using nvim-metals , that plugin fully handles the setup and installation of Metals, and you shouldn't set up Metals both with it and this plugin. To install Metals, make sure to have coursier installed, and once you do you can install the latest Metals with cs install metals . You can also manually bootstrap Metals with the following command. cs bootstrap \\ --java-opt -Xss4m \\ --java-opt -Xms100m \\ org.scalameta:metals_2.12:<enter-version-here> \\ -r bintray:scalacenter/releases \\ -r sonatype:snapshots \\ -o /usr/local/bin/metals -f Setup require 'lspconfig' . metals . setup {} Default Values cmd = { \"metals\" } filetypes = { \"scala\" } init_options = { compilerOptions = { snippetAutoIndent = false }, isHttpEnabled = true , statusBarProvider = \"show-message\" } message_level = 4 root_dir = util . root_pattern ( \"build.sbt\" , \"build.sc\" , \"build.gradle\" , \"pom.xml\" )","title":"Scala (metals)"},{"location":"lsp/metals/#scala-metals","text":"https://scalameta.org/metals/ Scala language server with rich IDE features. See full instructions in the Metals documentation: https://scalameta.org/metals/docs/editors/vim.html#using-an-alternative-lsp-client Note: that if you're using nvim-metals , that plugin fully handles the setup and installation of Metals, and you shouldn't set up Metals both with it and this plugin. To install Metals, make sure to have coursier installed, and once you do you can install the latest Metals with cs install metals . You can also manually bootstrap Metals with the following command. cs bootstrap \\ --java-opt -Xss4m \\ --java-opt -Xms100m \\ org.scalameta:metals_2.12:<enter-version-here> \\ -r bintray:scalacenter/releases \\ -r sonatype:snapshots \\ -o /usr/local/bin/metals -f","title":"Scala (metals)"},{"location":"lsp/metals/#setup","text":"require 'lspconfig' . metals . setup {}","title":"Setup"},{"location":"lsp/metals/#default-values","text":"cmd = { \"metals\" } filetypes = { \"scala\" } init_options = { compilerOptions = { snippetAutoIndent = false }, isHttpEnabled = true , statusBarProvider = \"show-message\" } message_level = 4 root_dir = util . root_pattern ( \"build.sbt\" , \"build.sc\" , \"build.gradle\" , \"pom.xml\" )","title":"Default Values"},{"location":"lsp/nimls/","text":"Nim (nimls) https://github.com/PMunch/nimlsp nimlsp can be installed via the nimble package manager: nimble install nimlsp Setup require 'lspconfig' . nimls . setup {} Default Values cmd = { \"nimlsp\" } filetypes = { \"nim\" } root_dir = root_pattern ( \".git\" ) or os_homedir This server accepts configuration via the settings key. Available settings nim.buildCommand Type: string Default: \"c\" Nim build command (c\\, cpp\\, doc\\, etc) nim.buildOnSave Type: boolean Execute build task from tasks.json file on save. nim.enableNimsuggest Type: boolean Default: true Enable calling nimsuggest process to provide completion suggestions\\, hover suggestions\\, etc. This option requires restart to take effect. nim.licenseString Type: string Default: \"\" Optional license text that will be inserted on nim file creation. nim.lintOnSave Type: boolean Default: true Check code by using \\'nim check\\' on save. nim.logNimsuggest Type: boolean Enable verbose logging of nimsuggest to use profile directory. nim.nimprettyIndent Type: integer Default: 0 Nimpretty\\: set the number of spaces that is used for indentation --indent\\:0 means autodetection (default behaviour). nim.nimprettyMaxLineLen Type: integer Default: 80 Nimpretty\\: set the desired maximum line length (default\\: 80). nim.nimsuggestRestartTimeout Type: integer Default: 60 Nimsuggest will be restarted after this timeout in minutes\\, if 0 then restart disabled. This option requires restart to take effect. nim.project Type: array Default: {} Nim project file\\, if empty use current selected. nim.projectMapping Type: object Default: vim.empty_dict() For non project mode list of per file project mapping using regex\\, for example ```{\\\"(.*).inim\\\"\\: \\\"\\$1.nim\\\"}``` nim.runOutputDirectory Type: string Default: \"\" Output directory for run selected file command. The directory is relative to the workspace root. nim.test-project Type: string Default: \"\" Optional test project.","title":"Nim (nimls)"},{"location":"lsp/nimls/#nim-nimls","text":"https://github.com/PMunch/nimlsp nimlsp can be installed via the nimble package manager: nimble install nimlsp","title":"Nim (nimls)"},{"location":"lsp/nimls/#setup","text":"require 'lspconfig' . nimls . setup {}","title":"Setup"},{"location":"lsp/nimls/#default-values","text":"cmd = { \"nimlsp\" } filetypes = { \"nim\" } root_dir = root_pattern ( \".git\" ) or os_homedir This server accepts configuration via the settings key.","title":"Default Values"},{"location":"lsp/nimls/#available-settings","text":"","title":"Available settings"},{"location":"lsp/nimls/#nimbuildcommand","text":"Type: string Default: \"c\" Nim build command (c\\, cpp\\, doc\\, etc)","title":"nim.buildCommand"},{"location":"lsp/nimls/#nimbuildonsave","text":"Type: boolean Execute build task from tasks.json file on save.","title":"nim.buildOnSave"},{"location":"lsp/nimls/#nimenablenimsuggest","text":"Type: boolean Default: true Enable calling nimsuggest process to provide completion suggestions\\, hover suggestions\\, etc. This option requires restart to take effect.","title":"nim.enableNimsuggest"},{"location":"lsp/nimls/#nimlicensestring","text":"Type: string Default: \"\" Optional license text that will be inserted on nim file creation.","title":"nim.licenseString"},{"location":"lsp/nimls/#nimlintonsave","text":"Type: boolean Default: true Check code by using \\'nim check\\' on save.","title":"nim.lintOnSave"},{"location":"lsp/nimls/#nimlognimsuggest","text":"Type: boolean Enable verbose logging of nimsuggest to use profile directory.","title":"nim.logNimsuggest"},{"location":"lsp/nimls/#nimnimprettyindent","text":"Type: integer Default: 0 Nimpretty\\: set the number of spaces that is used for indentation --indent\\:0 means autodetection (default behaviour).","title":"nim.nimprettyIndent"},{"location":"lsp/nimls/#nimnimprettymaxlinelen","text":"Type: integer Default: 80 Nimpretty\\: set the desired maximum line length (default\\: 80).","title":"nim.nimprettyMaxLineLen"},{"location":"lsp/nimls/#nimnimsuggestrestarttimeout","text":"Type: integer Default: 60 Nimsuggest will be restarted after this timeout in minutes\\, if 0 then restart disabled. This option requires restart to take effect.","title":"nim.nimsuggestRestartTimeout"},{"location":"lsp/nimls/#nimproject","text":"Type: array Default: {} Nim project file\\, if empty use current selected.","title":"nim.project"},{"location":"lsp/nimls/#nimprojectmapping","text":"Type: object Default: vim.empty_dict() For non project mode list of per file project mapping using regex\\, for example ```{\\\"(.*).inim\\\"\\: \\\"\\$1.nim\\\"}```","title":"nim.projectMapping"},{"location":"lsp/nimls/#nimrunoutputdirectory","text":"Type: string Default: \"\" Output directory for run selected file command. The directory is relative to the workspace root.","title":"nim.runOutputDirectory"},{"location":"lsp/nimls/#nimtest-project","text":"Type: string Default: \"\" Optional test project.","title":"nim.test-project"},{"location":"lsp/ocamlls/","text":"OCaml (ocamlls) https://github.com/ocaml-lsp/ocaml-language-server ocaml-language-server can be installed via npm npm install -g ocaml-langauge-server Setup require 'lspconfig' . ocamlls . setup {} Default Values cmd = { \"ocaml-language-server\" , \"--stdio\" } filetypes = { \"ocaml\" , \"reason\" } root_dir = root_pattern ( \"*.opam\" , \"esy.json\" , \"package.json\" )","title":"OCaml (ocamlls)"},{"location":"lsp/ocamlls/#ocaml-ocamlls","text":"https://github.com/ocaml-lsp/ocaml-language-server ocaml-language-server can be installed via npm npm install -g ocaml-langauge-server","title":"OCaml (ocamlls)"},{"location":"lsp/ocamlls/#setup","text":"require 'lspconfig' . ocamlls . setup {}","title":"Setup"},{"location":"lsp/ocamlls/#default-values","text":"cmd = { \"ocaml-language-server\" , \"--stdio\" } filetypes = { \"ocaml\" , \"reason\" } root_dir = root_pattern ( \"*.opam\" , \"esy.json\" , \"package.json\" )","title":"Default Values"},{"location":"lsp/ocamllsp/","text":"OCaml (ocamllsp) https://github.com/ocaml/ocaml-lsp ocaml-lsp can be installed as described in installation guide . To install the lsp server in a particular opam switch: opam pin add ocaml-lsp-server https://github.com/ocaml/ocaml-lsp.git opam install ocaml-lsp-server Setup require 'lspconfig' . ocamllsp . setup {} Default Values cmd = { \"ocamllsp\" } filetypes = { \"menhir\" , \"ocaml\" , \"reason\" , \"ocamllex\" , \"ocamlinterface\" } get_language_id = function ( _ , ftype ) return language_id_of [ ftype ] end root_dir = root_pattern ( \"*.opam\" , \"esy.json\" , \"package.json\" , \".git\" )","title":"OCaml (ocamllsp)"},{"location":"lsp/ocamllsp/#ocaml-ocamllsp","text":"https://github.com/ocaml/ocaml-lsp ocaml-lsp can be installed as described in installation guide . To install the lsp server in a particular opam switch: opam pin add ocaml-lsp-server https://github.com/ocaml/ocaml-lsp.git opam install ocaml-lsp-server","title":"OCaml (ocamllsp)"},{"location":"lsp/ocamllsp/#setup","text":"require 'lspconfig' . ocamllsp . setup {}","title":"Setup"},{"location":"lsp/ocamllsp/#default-values","text":"cmd = { \"ocamllsp\" } filetypes = { \"menhir\" , \"ocaml\" , \"reason\" , \"ocamllex\" , \"ocamlinterface\" } get_language_id = function ( _ , ftype ) return language_id_of [ ftype ] end root_dir = root_pattern ( \"*.opam\" , \"esy.json\" , \"package.json\" , \".git\" )","title":"Default Values"},{"location":"lsp/omnisharp/","text":"C# (omnisharp) https://github.com/omnisharp/omnisharp-roslyn OmniSharp server based on Roslyn workspaces omnisharp-roslyn can be installed by downloading and extracting a release from here . Omnisharp can also be built from source by following the instructions here . Omnisharp requires the dotnet-sdk to be installed. By default, omnisharp-roslyn doesn't have a cmd set. This is because nvim-lspconfig does not make assumptions about your path. You must add the following to your init.vim or init.lua to set cmd to the absolute path ($HOME and ~ are not expanded) of the unzipped run script or binary. local pid = vim . fn . getpid () -- On linux/darwin if using a release build, otherwise under scripts/OmniSharp(.Core)(.cmd) local omnisharp_bin = \"/path/to/omnisharp-repo/run\" -- on Windows -- local omnisharp_bin = \"/path/to/omnisharp/OmniSharp.exe\" require 'lspconfig' . omnisharp . setup { cmd = { omnisharp_bin , \"--languageserver\" , \"--hostPID\" , tostring ( pid ) }; ... } Note, if you download the executable for darwin you will need to strip the quarantine label to run: find /path/to/omnisharp-osx | xargs xattr -r -d com.apple.quarantine Setup require 'lspconfig' . omnisharp . setup {} Default Values filetypes = { \"cs\" , \"vb\" } init_options = {} root_dir = root_pattern ( \".csproj\" , \".sln\" )","title":"C# (omnisharp)"},{"location":"lsp/omnisharp/#c-omnisharp","text":"https://github.com/omnisharp/omnisharp-roslyn OmniSharp server based on Roslyn workspaces omnisharp-roslyn can be installed by downloading and extracting a release from here . Omnisharp can also be built from source by following the instructions here . Omnisharp requires the dotnet-sdk to be installed. By default, omnisharp-roslyn doesn't have a cmd set. This is because nvim-lspconfig does not make assumptions about your path. You must add the following to your init.vim or init.lua to set cmd to the absolute path ($HOME and ~ are not expanded) of the unzipped run script or binary. local pid = vim . fn . getpid () -- On linux/darwin if using a release build, otherwise under scripts/OmniSharp(.Core)(.cmd) local omnisharp_bin = \"/path/to/omnisharp-repo/run\" -- on Windows -- local omnisharp_bin = \"/path/to/omnisharp/OmniSharp.exe\" require 'lspconfig' . omnisharp . setup { cmd = { omnisharp_bin , \"--languageserver\" , \"--hostPID\" , tostring ( pid ) }; ... } Note, if you download the executable for darwin you will need to strip the quarantine label to run: find /path/to/omnisharp-osx | xargs xattr -r -d com.apple.quarantine","title":"C# (omnisharp)"},{"location":"lsp/omnisharp/#setup","text":"require 'lspconfig' . omnisharp . setup {}","title":"Setup"},{"location":"lsp/omnisharp/#default-values","text":"filetypes = { \"cs\" , \"vb\" } init_options = {} root_dir = root_pattern ( \".csproj\" , \".sln\" )","title":"Default Values"},{"location":"lsp/perlls/","text":"Perl (perlls) https://github.com/richterger/Perl-LanguageServer/tree/master/clients/vscode/perl Perl-LanguageServer , a language server for Perl. To use the language server, ensure that you have Perl::LanguageServer installed and perl command is on your path. Setup require 'lspconfig' . perlls . setup {} Default Values cmd = { \"perl\" , \"-MPerl::LanguageServer\" , \"-e\" , \"Perl::LanguageServer::run\" , \"--\" , \"--port 13603\" , \"--nostdio 0\" , \"--version 2.1.0\" } filetypes = { \"perl\" } root_dir = vim 's starting directory settings = { perl = { fileFilter = { \".pm\", \".pl\" }, ignoreDirs = \".git\", perlCmd = \"perl\", perlInc = \" \" } } This server accepts configuration via the settings key. Available settings perl.debugAdapterPort Type: string Default: \"13603\" port to use for connection between vscode and debug adapter inside Perl\\:\\:LanguageServer. On a multi user system every user must use a different port. perl.disableCache Type: boolean if true\\, the LanguageServer will not cache the result of parsing source files on disk\\, so it can be used within readonly directories perl.enable Type: boolean Default: true enable\\/disable this extension perl.fileFilter Type: array Default: vim.NIL array for filtering perl file\\, defaults to *.pm|*.pl perl.ignoreDirs Type: array Default: vim.NIL directories to ignore\\, defaults to .vscode\\, .git\\, .svn perl.logFile Type: string Default: vim.NIL If set\\, log output is written to the given logfile\\, instead of displaying it in the vscode output pane. Log output is always appended so you are responsible for rotating the file. perl.logLevel Type: integer Default: 0 Log level 0-2 perl.pathMap Type: array Default: vim.NIL mapping of local to remote paths perl.perlCmd Type: string Default: vim.NIL defaults to perl perl.perlInc Type: array Default: vim.NIL array with paths to add to perl library path. This setting is used by the syntax checker and for the debugee and also for the LanguageServer itself. perl.showLocalVars Type: boolean if true\\, show also local variables in symbol view perl.sshAddr Type: string Default: vim.NIL ip address of remote system perl.sshArgs Type: string Default: vim.NIL optional arguments for ssh perl.sshCmd Type: string Default: vim.NIL defaults to ssh on unix and plink on windows perl.sshPort Type: string Default: vim.NIL optional\\, port for ssh to remote system perl.sshUser Type: string Default: vim.NIL user for ssh login perl.sshWorkspaceRoot Type: string Default: vim.NIL path of the workspace root on remote system","title":"Perl (perlls)"},{"location":"lsp/perlls/#perl-perlls","text":"https://github.com/richterger/Perl-LanguageServer/tree/master/clients/vscode/perl Perl-LanguageServer , a language server for Perl. To use the language server, ensure that you have Perl::LanguageServer installed and perl command is on your path.","title":"Perl (perlls)"},{"location":"lsp/perlls/#setup","text":"require 'lspconfig' . perlls . setup {}","title":"Setup"},{"location":"lsp/perlls/#default-values","text":"cmd = { \"perl\" , \"-MPerl::LanguageServer\" , \"-e\" , \"Perl::LanguageServer::run\" , \"--\" , \"--port 13603\" , \"--nostdio 0\" , \"--version 2.1.0\" } filetypes = { \"perl\" } root_dir = vim 's starting directory settings = { perl = { fileFilter = { \".pm\", \".pl\" }, ignoreDirs = \".git\", perlCmd = \"perl\", perlInc = \" \" } } This server accepts configuration via the settings key.","title":"Default Values"},{"location":"lsp/perlls/#available-settings","text":"","title":"Available settings"},{"location":"lsp/perlls/#perldebugadapterport","text":"Type: string Default: \"13603\" port to use for connection between vscode and debug adapter inside Perl\\:\\:LanguageServer. On a multi user system every user must use a different port.","title":"perl.debugAdapterPort"},{"location":"lsp/perlls/#perldisablecache","text":"Type: boolean if true\\, the LanguageServer will not cache the result of parsing source files on disk\\, so it can be used within readonly directories","title":"perl.disableCache"},{"location":"lsp/perlls/#perlenable","text":"Type: boolean Default: true enable\\/disable this extension","title":"perl.enable"},{"location":"lsp/perlls/#perlfilefilter","text":"Type: array Default: vim.NIL array for filtering perl file\\, defaults to *.pm|*.pl","title":"perl.fileFilter"},{"location":"lsp/perlls/#perlignoredirs","text":"Type: array Default: vim.NIL directories to ignore\\, defaults to .vscode\\, .git\\, .svn","title":"perl.ignoreDirs"},{"location":"lsp/perlls/#perllogfile","text":"Type: string Default: vim.NIL If set\\, log output is written to the given logfile\\, instead of displaying it in the vscode output pane. Log output is always appended so you are responsible for rotating the file.","title":"perl.logFile"},{"location":"lsp/perlls/#perlloglevel","text":"Type: integer Default: 0 Log level 0-2","title":"perl.logLevel"},{"location":"lsp/perlls/#perlpathmap","text":"Type: array Default: vim.NIL mapping of local to remote paths","title":"perl.pathMap"},{"location":"lsp/perlls/#perlperlcmd","text":"Type: string Default: vim.NIL defaults to perl","title":"perl.perlCmd"},{"location":"lsp/perlls/#perlperlinc","text":"Type: array Default: vim.NIL array with paths to add to perl library path. This setting is used by the syntax checker and for the debugee and also for the LanguageServer itself.","title":"perl.perlInc"},{"location":"lsp/perlls/#perlshowlocalvars","text":"Type: boolean if true\\, show also local variables in symbol view","title":"perl.showLocalVars"},{"location":"lsp/perlls/#perlsshaddr","text":"Type: string Default: vim.NIL ip address of remote system","title":"perl.sshAddr"},{"location":"lsp/perlls/#perlsshargs","text":"Type: string Default: vim.NIL optional arguments for ssh","title":"perl.sshArgs"},{"location":"lsp/perlls/#perlsshcmd","text":"Type: string Default: vim.NIL defaults to ssh on unix and plink on windows","title":"perl.sshCmd"},{"location":"lsp/perlls/#perlsshport","text":"Type: string Default: vim.NIL optional\\, port for ssh to remote system","title":"perl.sshPort"},{"location":"lsp/perlls/#perlsshuser","text":"Type: string Default: vim.NIL user for ssh login","title":"perl.sshUser"},{"location":"lsp/perlls/#perlsshworkspaceroot","text":"Type: string Default: vim.NIL path of the workspace root on remote system","title":"perl.sshWorkspaceRoot"},{"location":"lsp/phpactor/","text":"PHP (phpactor) https://github.com/phpactor/phpactor Installation: https://phpactor.readthedocs.io/en/master/usage/standalone.html#global-installation Setup require 'lspconfig' . phpactor . setup {} Default Values cmd = { \"phpactor\" , \"language-server\" } filetypes = { \"php\" } root_dir = root_pattern ( \"composer.json\" , \".git\" )","title":"PHP (phpactor)"},{"location":"lsp/phpactor/#php-phpactor","text":"https://github.com/phpactor/phpactor Installation: https://phpactor.readthedocs.io/en/master/usage/standalone.html#global-installation","title":"PHP (phpactor)"},{"location":"lsp/phpactor/#setup","text":"require 'lspconfig' . phpactor . setup {}","title":"Setup"},{"location":"lsp/phpactor/#default-values","text":"cmd = { \"phpactor\" , \"language-server\" } filetypes = { \"php\" } root_dir = root_pattern ( \"composer.json\" , \".git\" )","title":"Default Values"},{"location":"lsp/powershell_es/","text":"Powershell (powershell_es) https://github.com/PowerShell/PowerShellEditorServices Language server for PowerShell. To install, download and extract PowerShellEditorServices.zip from the releases . To configure the language server, set the property bundle_path to the root of the extracted PowerShellEditorServices.zip. The default configuration doesn't set cmd unless bundle_path is specified. require 'lspconfig' . powershell_es . setup { bundle_path = 'c:/w/PowerShellEditorServices' , } If necessary, specific cmd can be defined instead of bundle_path . See PowerShellEditorServices to learn more. require 'lspconfig' . powershell_es . setup { cmd = { 'pwsh' , '-NoLogo' , '-NoProfile' , '-Command' , \"c:/PSES/Start-EditorServices.ps1 ...\" } } Setup require 'lspconfig' . powershell_es . setup {} Default Values filetypes = { \"ps1\" } on_new_config = function ( new_config , _ ) local bundle_path = new_config . bundle_path new_config . cmd = make_cmd ( bundle_path ) end , root_dir = git root or current directory","title":"Powershell (powershell_es)"},{"location":"lsp/powershell_es/#powershell-powershell_es","text":"https://github.com/PowerShell/PowerShellEditorServices Language server for PowerShell. To install, download and extract PowerShellEditorServices.zip from the releases . To configure the language server, set the property bundle_path to the root of the extracted PowerShellEditorServices.zip. The default configuration doesn't set cmd unless bundle_path is specified. require 'lspconfig' . powershell_es . setup { bundle_path = 'c:/w/PowerShellEditorServices' , } If necessary, specific cmd can be defined instead of bundle_path . See PowerShellEditorServices to learn more. require 'lspconfig' . powershell_es . setup { cmd = { 'pwsh' , '-NoLogo' , '-NoProfile' , '-Command' , \"c:/PSES/Start-EditorServices.ps1 ...\" } }","title":"Powershell (powershell_es)"},{"location":"lsp/powershell_es/#setup","text":"require 'lspconfig' . powershell_es . setup {}","title":"Setup"},{"location":"lsp/powershell_es/#default-values","text":"filetypes = { \"ps1\" } on_new_config = function ( new_config , _ ) local bundle_path = new_config . bundle_path new_config . cmd = make_cmd ( bundle_path ) end , root_dir = git root or current directory","title":"Default Values"},{"location":"lsp/prismals/","text":"Prisma (prismals) npm install -g @prisma/language-server 'prismals, a language server for the prisma javascript and typescript orm' Setup require 'lspconfig' . prismals . setup {} Default Values cmd = { \"prisma-language-server\" , \"--stdio\" } filetypes = { \"prisma\" } root_dir = root_pattern ( \".git\" , \"package.json\" ) settings = { prisma = { prismaFmtBinPath = \"\" } }","title":"Prisma (prismals)"},{"location":"lsp/prismals/#prisma-prismals","text":"npm install -g @prisma/language-server 'prismals, a language server for the prisma javascript and typescript orm'","title":"Prisma (prismals)"},{"location":"lsp/prismals/#setup","text":"require 'lspconfig' . prismals . setup {}","title":"Setup"},{"location":"lsp/prismals/#default-values","text":"cmd = { \"prisma-language-server\" , \"--stdio\" } filetypes = { \"prisma\" } root_dir = root_pattern ( \".git\" , \"package.json\" ) settings = { prisma = { prismaFmtBinPath = \"\" } }","title":"Default Values"},{"location":"lsp/puppet/","text":"Puppet (puppet) LSP server for Puppet. Installation: Clone the editor-services repository: https://github.com/puppetlabs/puppet-editor-services Navigate into that directory and run: bundle install Install the 'puppet-lint' gem: gem install puppet-lint Add that repository to $PATH. Ensure you can run puppet-languageserver from outside the editor-services directory. Setup require 'lspconfig' . puppet . setup {} Default Values cmd = { \"puppet-languageserver\" , \"--stdio\" } filetypes = { \"puppet\" } root_dir = root_pattern ( \"manifests\" , \".puppet-lint.rc\" , \"hiera.yaml\" , \".git\" )","title":"Puppet (puppet)"},{"location":"lsp/puppet/#puppet-puppet","text":"LSP server for Puppet. Installation: Clone the editor-services repository: https://github.com/puppetlabs/puppet-editor-services Navigate into that directory and run: bundle install Install the 'puppet-lint' gem: gem install puppet-lint Add that repository to $PATH. Ensure you can run puppet-languageserver from outside the editor-services directory.","title":"Puppet (puppet)"},{"location":"lsp/puppet/#setup","text":"require 'lspconfig' . puppet . setup {}","title":"Setup"},{"location":"lsp/puppet/#default-values","text":"cmd = { \"puppet-languageserver\" , \"--stdio\" } filetypes = { \"puppet\" } root_dir = root_pattern ( \"manifests\" , \".puppet-lint.rc\" , \"hiera.yaml\" , \".git\" )","title":"Default Values"},{"location":"lsp/purescriptls/","text":"PureScript (purescriptls) https://github.com/nwolverson/purescript-language-server purescript-language-server can be installed via npm npm install -g purescript-language-server Setup require 'lspconfig' . purescriptls . setup {} Default Values cmd = { \"purescript-language-server\" , \"--stdio\" } filetypes = { \"purescript\" } root_dir = root_pattern ( \"spago.dhall, bower.json\" ) This server accepts configuration via the settings key. Available settings purescript.addNpmPath Type: boolean Whether to add the local npm bin directory to the PATH for purs IDE server and build command. purescript.addPscPackageSources Type: boolean Whether to add psc-package sources to the globs passed to the IDE server for source locations (specifically the output of `psc-package sources`\\, if this is a psc-package project). Update due to adding packages\\/changing package set requires psc-ide server restart. purescript.addSpagoSources Type: boolean Default: true Whether to add spago sources to the globs passed to the IDE server for source locations (specifically the output of `spago sources`\\, if this is a spago project). Update due to adding packages\\/changing package set requires psc-ide server restart. purescript.autoStartPscIde Type: boolean Default: true Whether to automatically start\\/connect to purs IDE server when editing a PureScript file (includes connecting to an existing running instance). If this is disabled\\, various features like autocomplete\\, tooltips\\, and other type info will not work until start command is run manually. purescript.autocompleteAddImport Type: boolean Default: true Whether to automatically add imported identifiers when accepting autocomplete result. purescript.autocompleteAllModules Type: boolean Default: true Whether to always autocomplete from all built modules\\, or just those imported in the file. Suggestions from all modules always available by explicitly triggering autocomplete. purescript.autocompleteGrouped Type: boolean Default: true Whether to group completions in autocomplete results. Requires compiler 0.11.6 purescript.autocompleteLimit Type: null|integer Default: vim.NIL Maximum number of results to fetch for an autocompletion request. May improve performance on large projects. purescript.buildCommand Type: string Default: \"spago build --purs-args --json-errors\" Build command to use with arguments. Not passed to shell. eg `spago build --purs-args --json-errors` purescript.censorWarnings Type: array Default: {} Array items: {type = \"string\"} The warning codes to censor\\, both for fast rebuild and a full build. Unrelated to any psa setup. e.g.\\: [\\\"ShadowedName\\\"\\,\\\"MissingTypeDeclaration\\\"] purescript.codegenTargets Type: array Default: vim.NIL Array items: {type = \"string\"} List of codegen targets to pass to the compiler for rebuild. e.g. js\\, corefn. If not specified (rather than empty array) this will not be passed and the compiler will default to js. Requires 0.12.1+ purescript.fastRebuild Type: boolean Default: true Enable purs IDE server fast rebuild purescript.importsPreferredModules Type: array Default: { \"Prelude\" } Array items: {type = \"string\"} Module to prefer to insert when adding imports which have been re-exported. In order of preference\\, most preferred first. purescript.outputDirectory Type: string Default: \"output/\" Override purs ide output directory (output\\/ if not specified). This should match up to your build command purescript.packagePath Type: string Default: \"\" Path to installed packages. Will be used to control globs passed to IDE server for source locations. Change requires IDE server restart. purescript.preludeModule Type: string Default: \"Prelude\" Module to consider as your default prelude\\, if an auto-complete suggestion comes from this module it will be imported unqualified. purescript.pscIdePort Type: integer|null Default: vim.NIL Port to use for purs IDE server (whether an existing server or to start a new one). By default a random port is chosen (or an existing port in .psc-ide-port if present)\\, if this is specified no attempt will be made to select an alternative port on failure. purescript.pscIdelogLevel Type: string Default: \"\" Log level for purs IDE server purescript.pursExe Type: string Default: \"purs\" Location of purs executable (resolved wrt PATH) purescript.sourcePath Type: string Default: \"src\" Path to application source root. Will be used to control globs passed to IDE server for source locations. Change requires IDE server restart. purescript.trace.server enum { \"off\", \"messages\", \"verbose\" } Default: \"off\" Traces the communication between VSCode and the PureScript language service.","title":"PureScript (purescriptls)"},{"location":"lsp/purescriptls/#purescript-purescriptls","text":"https://github.com/nwolverson/purescript-language-server purescript-language-server can be installed via npm npm install -g purescript-language-server","title":"PureScript (purescriptls)"},{"location":"lsp/purescriptls/#setup","text":"require 'lspconfig' . purescriptls . setup {}","title":"Setup"},{"location":"lsp/purescriptls/#default-values","text":"cmd = { \"purescript-language-server\" , \"--stdio\" } filetypes = { \"purescript\" } root_dir = root_pattern ( \"spago.dhall, bower.json\" ) This server accepts configuration via the settings key.","title":"Default Values"},{"location":"lsp/purescriptls/#available-settings","text":"","title":"Available settings"},{"location":"lsp/purescriptls/#purescriptaddnpmpath","text":"Type: boolean Whether to add the local npm bin directory to the PATH for purs IDE server and build command.","title":"purescript.addNpmPath"},{"location":"lsp/purescriptls/#purescriptaddpscpackagesources","text":"Type: boolean Whether to add psc-package sources to the globs passed to the IDE server for source locations (specifically the output of `psc-package sources`\\, if this is a psc-package project). Update due to adding packages\\/changing package set requires psc-ide server restart.","title":"purescript.addPscPackageSources"},{"location":"lsp/purescriptls/#purescriptaddspagosources","text":"Type: boolean Default: true Whether to add spago sources to the globs passed to the IDE server for source locations (specifically the output of `spago sources`\\, if this is a spago project). Update due to adding packages\\/changing package set requires psc-ide server restart.","title":"purescript.addSpagoSources"},{"location":"lsp/purescriptls/#purescriptautostartpscide","text":"Type: boolean Default: true Whether to automatically start\\/connect to purs IDE server when editing a PureScript file (includes connecting to an existing running instance). If this is disabled\\, various features like autocomplete\\, tooltips\\, and other type info will not work until start command is run manually.","title":"purescript.autoStartPscIde"},{"location":"lsp/purescriptls/#purescriptautocompleteaddimport","text":"Type: boolean Default: true Whether to automatically add imported identifiers when accepting autocomplete result.","title":"purescript.autocompleteAddImport"},{"location":"lsp/purescriptls/#purescriptautocompleteallmodules","text":"Type: boolean Default: true Whether to always autocomplete from all built modules\\, or just those imported in the file. Suggestions from all modules always available by explicitly triggering autocomplete.","title":"purescript.autocompleteAllModules"},{"location":"lsp/purescriptls/#purescriptautocompletegrouped","text":"Type: boolean Default: true Whether to group completions in autocomplete results. Requires compiler 0.11.6","title":"purescript.autocompleteGrouped"},{"location":"lsp/purescriptls/#purescriptautocompletelimit","text":"Type: null|integer Default: vim.NIL Maximum number of results to fetch for an autocompletion request. May improve performance on large projects.","title":"purescript.autocompleteLimit"},{"location":"lsp/purescriptls/#purescriptbuildcommand","text":"Type: string Default: \"spago build --purs-args --json-errors\" Build command to use with arguments. Not passed to shell. eg `spago build --purs-args --json-errors`","title":"purescript.buildCommand"},{"location":"lsp/purescriptls/#purescriptcensorwarnings","text":"Type: array Default: {} Array items: {type = \"string\"} The warning codes to censor\\, both for fast rebuild and a full build. Unrelated to any psa setup. e.g.\\: [\\\"ShadowedName\\\"\\,\\\"MissingTypeDeclaration\\\"]","title":"purescript.censorWarnings"},{"location":"lsp/purescriptls/#purescriptcodegentargets","text":"Type: array Default: vim.NIL Array items: {type = \"string\"} List of codegen targets to pass to the compiler for rebuild. e.g. js\\, corefn. If not specified (rather than empty array) this will not be passed and the compiler will default to js. Requires 0.12.1+","title":"purescript.codegenTargets"},{"location":"lsp/purescriptls/#purescriptfastrebuild","text":"Type: boolean Default: true Enable purs IDE server fast rebuild","title":"purescript.fastRebuild"},{"location":"lsp/purescriptls/#purescriptimportspreferredmodules","text":"Type: array Default: { \"Prelude\" } Array items: {type = \"string\"} Module to prefer to insert when adding imports which have been re-exported. In order of preference\\, most preferred first.","title":"purescript.importsPreferredModules"},{"location":"lsp/purescriptls/#purescriptoutputdirectory","text":"Type: string Default: \"output/\" Override purs ide output directory (output\\/ if not specified). This should match up to your build command","title":"purescript.outputDirectory"},{"location":"lsp/purescriptls/#purescriptpackagepath","text":"Type: string Default: \"\" Path to installed packages. Will be used to control globs passed to IDE server for source locations. Change requires IDE server restart.","title":"purescript.packagePath"},{"location":"lsp/purescriptls/#purescriptpreludemodule","text":"Type: string Default: \"Prelude\" Module to consider as your default prelude\\, if an auto-complete suggestion comes from this module it will be imported unqualified.","title":"purescript.preludeModule"},{"location":"lsp/purescriptls/#purescriptpscideport","text":"Type: integer|null Default: vim.NIL Port to use for purs IDE server (whether an existing server or to start a new one). By default a random port is chosen (or an existing port in .psc-ide-port if present)\\, if this is specified no attempt will be made to select an alternative port on failure.","title":"purescript.pscIdePort"},{"location":"lsp/purescriptls/#purescriptpscideloglevel","text":"Type: string Default: \"\" Log level for purs IDE server","title":"purescript.pscIdelogLevel"},{"location":"lsp/purescriptls/#purescriptpursexe","text":"Type: string Default: \"purs\" Location of purs executable (resolved wrt PATH)","title":"purescript.pursExe"},{"location":"lsp/purescriptls/#purescriptsourcepath","text":"Type: string Default: \"src\" Path to application source root. Will be used to control globs passed to IDE server for source locations. Change requires IDE server restart.","title":"purescript.sourcePath"},{"location":"lsp/purescriptls/#purescripttraceserver","text":"enum { \"off\", \"messages\", \"verbose\" } Default: \"off\" Traces the communication between VSCode and the PureScript language service.","title":"purescript.trace.server"},{"location":"lsp/pyls/","text":"Python (pyls) https://github.com/palantir/python-language-server python-language-server , a language server for Python. The language server can be installed via pipx install 'python-language-server[all]' . Setup require 'lspconfig' . pyls . setup {} Default Values cmd = { \"pyls\" } filetypes = { \"python\" } root_dir = vim 's starting directory This server accepts configuration via the settings key. Available settings pyls.configurationSources Type: array Default: { \"pycodestyle\" } Array items: {enum = { \"pycodestyle\", \"pyflakes\" },type = \"string\"} List of configuration sources to use. pyls.executable Type: string Default: \"pyls\" Language server executable pyls.plugins.jedi.env_vars Type: dictionary Default: vim.NIL Define environment variables for jedi.Script and Jedi.names. pyls.plugins.jedi.environment Type: string Default: vim.NIL Define environment for jedi.Script and Jedi.names. pyls.plugins.jedi.extra_paths Type: array Default: {} Define extra paths for jedi.Script. pyls.plugins.jedi_completion.enabled Type: boolean Default: true Enable or disable the plugin. pyls.plugins.jedi_completion.fuzzy Type: boolean Enable fuzzy when requesting autocomplete. pyls.plugins.jedi_completion.include_class_objects Type: boolean Default: true Adds class objects as a separate completion item. pyls.plugins.jedi_completion.include_params Type: boolean Default: true Auto-completes methods and classes with tabstops for each parameter. pyls.plugins.jedi_definition.enabled Type: boolean Default: true Enable or disable the plugin. pyls.plugins.jedi_definition.follow_builtin_imports Type: boolean Default: true If follow_imports is True will decide if it follow builtin imports. pyls.plugins.jedi_definition.follow_imports Type: boolean Default: true The goto call will follow imports. pyls.plugins.jedi_hover.enabled Type: boolean Default: true Enable or disable the plugin. pyls.plugins.jedi_references.enabled Type: boolean Default: true Enable or disable the plugin. pyls.plugins.jedi_signature_help.enabled Type: boolean Default: true Enable or disable the plugin. pyls.plugins.jedi_symbols.all_scopes Type: boolean Default: true If True lists the names of all scopes instead of only the module namespace. pyls.plugins.jedi_symbols.enabled Type: boolean Default: true Enable or disable the plugin. pyls.plugins.mccabe.enabled Type: boolean Default: true Enable or disable the plugin. pyls.plugins.mccabe.threshold Type: number Default: 15 The minimum threshold that triggers warnings about cyclomatic complexity. pyls.plugins.preload.enabled Type: boolean Default: true Enable or disable the plugin. pyls.plugins.preload.modules Type: array Default: vim.NIL Array items: {type = \"string\"} List of modules to import on startup pyls.plugins.pycodestyle.enabled Type: boolean Default: true Enable or disable the plugin. pyls.plugins.pycodestyle.exclude Type: array Default: vim.NIL Array items: {type = \"string\"} Exclude files or directories which match these patterns. pyls.plugins.pycodestyle.filename Type: array Default: vim.NIL Array items: {type = \"string\"} When parsing directories\\, only check filenames matching these patterns. pyls.plugins.pycodestyle.hangClosing Type: boolean Default: vim.NIL Hang closing bracket instead of matching indentation of opening bracket\\'s line. pyls.plugins.pycodestyle.ignore Type: array Default: vim.NIL Array items: {type = \"string\"} Ignore errors and warnings pyls.plugins.pycodestyle.maxLineLength Type: number Default: vim.NIL Set maximum allowed line length. pyls.plugins.pycodestyle.select Type: array Default: vim.NIL Array items: {type = \"string\"} Select errors and warnings pyls.plugins.pydocstyle.addIgnore Type: array Default: vim.NIL Array items: {type = \"string\"} Ignore errors and warnings in addition to the specified convention. pyls.plugins.pydocstyle.addSelect Type: array Default: vim.NIL Array items: {type = \"string\"} Select errors and warnings in addition to the specified convention. pyls.plugins.pydocstyle.convention enum { \"pep257\", \"numpy\" } Default: vim.NIL Choose the basic list of checked errors by specifying an existing convention. pyls.plugins.pydocstyle.enabled Type: boolean Enable or disable the plugin. pyls.plugins.pydocstyle.ignore Type: array Default: vim.NIL Array items: {type = \"string\"} Ignore errors and warnings pyls.plugins.pydocstyle.match Type: string Default: \"(?!test_).*\\\\.py\" Check only files that exactly match the given regular expression\\; default is to match files that don\\'t start with \\'test_\\' but end with \\'.py\\'. pyls.plugins.pydocstyle.matchDir Type: string Default: \"[^\\\\.].*\" Search only dirs that exactly match the given regular expression\\; default is to match dirs which do not begin with a dot. pyls.plugins.pydocstyle.select Type: array Default: vim.NIL Array items: {type = \"string\"} Select errors and warnings pyls.plugins.pyflakes.enabled Type: boolean Default: true Enable or disable the plugin. pyls.plugins.pylint.args Type: array Default: vim.NIL Array items: {type = \"string\"} Arguments to pass to pylint. pyls.plugins.pylint.enabled Type: boolean Enable or disable the plugin. pyls.plugins.pylint.executable Type: string Default: vim.NIL Executable to run pylint with. Enabling this will run pylint on unsaved files via stdin. Can slow down workflow. Only works with python3. pyls.plugins.rope_completion.enabled Type: boolean Default: true Enable or disable the plugin. pyls.plugins.yapf.enabled Type: boolean Default: true Enable or disable the plugin. pyls.rope.extensionModules Type: string Default: vim.NIL Builtin and c-extension modules that are allowed to be imported and inspected by rope. pyls.rope.ropeFolder Type: array Default: vim.NIL Array items: {type = \"string\"} The name of the folder in which rope stores project configurations and data. Pass `null` for not using such a folder at all.","title":"Python (pyls)"},{"location":"lsp/pyls/#python-pyls","text":"https://github.com/palantir/python-language-server python-language-server , a language server for Python. The language server can be installed via pipx install 'python-language-server[all]' .","title":"Python (pyls)"},{"location":"lsp/pyls/#setup","text":"require 'lspconfig' . pyls . setup {}","title":"Setup"},{"location":"lsp/pyls/#default-values","text":"cmd = { \"pyls\" } filetypes = { \"python\" } root_dir = vim 's starting directory This server accepts configuration via the settings key.","title":"Default Values"},{"location":"lsp/pyls/#available-settings","text":"","title":"Available settings"},{"location":"lsp/pyls/#pylsconfigurationsources","text":"Type: array Default: { \"pycodestyle\" } Array items: {enum = { \"pycodestyle\", \"pyflakes\" },type = \"string\"} List of configuration sources to use.","title":"pyls.configurationSources"},{"location":"lsp/pyls/#pylsexecutable","text":"Type: string Default: \"pyls\" Language server executable","title":"pyls.executable"},{"location":"lsp/pyls/#pylspluginsjedienv_vars","text":"Type: dictionary Default: vim.NIL Define environment variables for jedi.Script and Jedi.names.","title":"pyls.plugins.jedi.env_vars"},{"location":"lsp/pyls/#pylspluginsjedienvironment","text":"Type: string Default: vim.NIL Define environment for jedi.Script and Jedi.names.","title":"pyls.plugins.jedi.environment"},{"location":"lsp/pyls/#pylspluginsjediextra_paths","text":"Type: array Default: {} Define extra paths for jedi.Script.","title":"pyls.plugins.jedi.extra_paths"},{"location":"lsp/pyls/#pylspluginsjedi_completionenabled","text":"Type: boolean Default: true Enable or disable the plugin.","title":"pyls.plugins.jedi_completion.enabled"},{"location":"lsp/pyls/#pylspluginsjedi_completionfuzzy","text":"Type: boolean Enable fuzzy when requesting autocomplete.","title":"pyls.plugins.jedi_completion.fuzzy"},{"location":"lsp/pyls/#pylspluginsjedi_completioninclude_class_objects","text":"Type: boolean Default: true Adds class objects as a separate completion item.","title":"pyls.plugins.jedi_completion.include_class_objects"},{"location":"lsp/pyls/#pylspluginsjedi_completioninclude_params","text":"Type: boolean Default: true Auto-completes methods and classes with tabstops for each parameter.","title":"pyls.plugins.jedi_completion.include_params"},{"location":"lsp/pyls/#pylspluginsjedi_definitionenabled","text":"Type: boolean Default: true Enable or disable the plugin.","title":"pyls.plugins.jedi_definition.enabled"},{"location":"lsp/pyls/#pylspluginsjedi_definitionfollow_builtin_imports","text":"Type: boolean Default: true If follow_imports is True will decide if it follow builtin imports.","title":"pyls.plugins.jedi_definition.follow_builtin_imports"},{"location":"lsp/pyls/#pylspluginsjedi_definitionfollow_imports","text":"Type: boolean Default: true The goto call will follow imports.","title":"pyls.plugins.jedi_definition.follow_imports"},{"location":"lsp/pyls/#pylspluginsjedi_hoverenabled","text":"Type: boolean Default: true Enable or disable the plugin.","title":"pyls.plugins.jedi_hover.enabled"},{"location":"lsp/pyls/#pylspluginsjedi_referencesenabled","text":"Type: boolean Default: true Enable or disable the plugin.","title":"pyls.plugins.jedi_references.enabled"},{"location":"lsp/pyls/#pylspluginsjedi_signature_helpenabled","text":"Type: boolean Default: true Enable or disable the plugin.","title":"pyls.plugins.jedi_signature_help.enabled"},{"location":"lsp/pyls/#pylspluginsjedi_symbolsall_scopes","text":"Type: boolean Default: true If True lists the names of all scopes instead of only the module namespace.","title":"pyls.plugins.jedi_symbols.all_scopes"},{"location":"lsp/pyls/#pylspluginsjedi_symbolsenabled","text":"Type: boolean Default: true Enable or disable the plugin.","title":"pyls.plugins.jedi_symbols.enabled"},{"location":"lsp/pyls/#pylspluginsmccabeenabled","text":"Type: boolean Default: true Enable or disable the plugin.","title":"pyls.plugins.mccabe.enabled"},{"location":"lsp/pyls/#pylspluginsmccabethreshold","text":"Type: number Default: 15 The minimum threshold that triggers warnings about cyclomatic complexity.","title":"pyls.plugins.mccabe.threshold"},{"location":"lsp/pyls/#pylspluginspreloadenabled","text":"Type: boolean Default: true Enable or disable the plugin.","title":"pyls.plugins.preload.enabled"},{"location":"lsp/pyls/#pylspluginspreloadmodules","text":"Type: array Default: vim.NIL Array items: {type = \"string\"} List of modules to import on startup","title":"pyls.plugins.preload.modules"},{"location":"lsp/pyls/#pylspluginspycodestyleenabled","text":"Type: boolean Default: true Enable or disable the plugin.","title":"pyls.plugins.pycodestyle.enabled"},{"location":"lsp/pyls/#pylspluginspycodestyleexclude","text":"Type: array Default: vim.NIL Array items: {type = \"string\"} Exclude files or directories which match these patterns.","title":"pyls.plugins.pycodestyle.exclude"},{"location":"lsp/pyls/#pylspluginspycodestylefilename","text":"Type: array Default: vim.NIL Array items: {type = \"string\"} When parsing directories\\, only check filenames matching these patterns.","title":"pyls.plugins.pycodestyle.filename"},{"location":"lsp/pyls/#pylspluginspycodestylehangclosing","text":"Type: boolean Default: vim.NIL Hang closing bracket instead of matching indentation of opening bracket\\'s line.","title":"pyls.plugins.pycodestyle.hangClosing"},{"location":"lsp/pyls/#pylspluginspycodestyleignore","text":"Type: array Default: vim.NIL Array items: {type = \"string\"} Ignore errors and warnings","title":"pyls.plugins.pycodestyle.ignore"},{"location":"lsp/pyls/#pylspluginspycodestylemaxlinelength","text":"Type: number Default: vim.NIL Set maximum allowed line length.","title":"pyls.plugins.pycodestyle.maxLineLength"},{"location":"lsp/pyls/#pylspluginspycodestyleselect","text":"Type: array Default: vim.NIL Array items: {type = \"string\"} Select errors and warnings","title":"pyls.plugins.pycodestyle.select"},{"location":"lsp/pyls/#pylspluginspydocstyleaddignore","text":"Type: array Default: vim.NIL Array items: {type = \"string\"} Ignore errors and warnings in addition to the specified convention.","title":"pyls.plugins.pydocstyle.addIgnore"},{"location":"lsp/pyls/#pylspluginspydocstyleaddselect","text":"Type: array Default: vim.NIL Array items: {type = \"string\"} Select errors and warnings in addition to the specified convention.","title":"pyls.plugins.pydocstyle.addSelect"},{"location":"lsp/pyls/#pylspluginspydocstyleconvention","text":"enum { \"pep257\", \"numpy\" } Default: vim.NIL Choose the basic list of checked errors by specifying an existing convention.","title":"pyls.plugins.pydocstyle.convention"},{"location":"lsp/pyls/#pylspluginspydocstyleenabled","text":"Type: boolean Enable or disable the plugin.","title":"pyls.plugins.pydocstyle.enabled"},{"location":"lsp/pyls/#pylspluginspydocstyleignore","text":"Type: array Default: vim.NIL Array items: {type = \"string\"} Ignore errors and warnings","title":"pyls.plugins.pydocstyle.ignore"},{"location":"lsp/pyls/#pylspluginspydocstylematch","text":"Type: string Default: \"(?!test_).*\\\\.py\" Check only files that exactly match the given regular expression\\; default is to match files that don\\'t start with \\'test_\\' but end with \\'.py\\'.","title":"pyls.plugins.pydocstyle.match"},{"location":"lsp/pyls/#pylspluginspydocstylematchdir","text":"Type: string Default: \"[^\\\\.].*\" Search only dirs that exactly match the given regular expression\\; default is to match dirs which do not begin with a dot.","title":"pyls.plugins.pydocstyle.matchDir"},{"location":"lsp/pyls/#pylspluginspydocstyleselect","text":"Type: array Default: vim.NIL Array items: {type = \"string\"} Select errors and warnings","title":"pyls.plugins.pydocstyle.select"},{"location":"lsp/pyls/#pylspluginspyflakesenabled","text":"Type: boolean Default: true Enable or disable the plugin.","title":"pyls.plugins.pyflakes.enabled"},{"location":"lsp/pyls/#pylspluginspylintargs","text":"Type: array Default: vim.NIL Array items: {type = \"string\"} Arguments to pass to pylint.","title":"pyls.plugins.pylint.args"},{"location":"lsp/pyls/#pylspluginspylintenabled","text":"Type: boolean Enable or disable the plugin.","title":"pyls.plugins.pylint.enabled"},{"location":"lsp/pyls/#pylspluginspylintexecutable","text":"Type: string Default: vim.NIL Executable to run pylint with. Enabling this will run pylint on unsaved files via stdin. Can slow down workflow. Only works with python3.","title":"pyls.plugins.pylint.executable"},{"location":"lsp/pyls/#pylspluginsrope_completionenabled","text":"Type: boolean Default: true Enable or disable the plugin.","title":"pyls.plugins.rope_completion.enabled"},{"location":"lsp/pyls/#pylspluginsyapfenabled","text":"Type: boolean Default: true Enable or disable the plugin.","title":"pyls.plugins.yapf.enabled"},{"location":"lsp/pyls/#pylsropeextensionmodules","text":"Type: string Default: vim.NIL Builtin and c-extension modules that are allowed to be imported and inspected by rope.","title":"pyls.rope.extensionModules"},{"location":"lsp/pyls/#pylsroperopefolder","text":"Type: array Default: vim.NIL Array items: {type = \"string\"} The name of the folder in which rope stores project configurations and data. Pass `null` for not using such a folder at all.","title":"pyls.rope.ropeFolder"},{"location":"lsp/pyls_ms/","text":"Python (pyls_ms) https://github.com/Microsoft/python-language-server python-language-server , a language server for Python. Requires .NET Core to run. On Linux or macOS: curl -L https://dot.net/v1/dotnet-install.sh | sh python-language-server can be installed via build . Set cmd to point to Microsoft.Python.languageServer.dll . cmd = { \"dotnet\" , \"exec\" , \"path/to/Microsoft.Python.languageServer.dll\" }; If the python interpreter is not in your PATH environment variable, set the InterpreterPath and Version properties accordingly. InterpreterPath = \"path/to/python\" , Version = \"3.8\" This server accepts configuration via the settings key. Setup require 'lspconfig' . pyls_ms . setup {} Default Values filetypes = { \"python\" } init_options = { analysisUpdates = true , asyncStartup = true , displayOptions = {}, interpreter = { properties = { InterpreterPath = \"\" , Version = \"\" } } } root_dir = vim 's starting directory settings = { python = { analysis = { disabled = {}, errors = {}, info = {} } } }","title":"Python (pyls_ms)"},{"location":"lsp/pyls_ms/#python-pyls_ms","text":"https://github.com/Microsoft/python-language-server python-language-server , a language server for Python. Requires .NET Core to run. On Linux or macOS: curl -L https://dot.net/v1/dotnet-install.sh | sh python-language-server can be installed via build . Set cmd to point to Microsoft.Python.languageServer.dll . cmd = { \"dotnet\" , \"exec\" , \"path/to/Microsoft.Python.languageServer.dll\" }; If the python interpreter is not in your PATH environment variable, set the InterpreterPath and Version properties accordingly. InterpreterPath = \"path/to/python\" , Version = \"3.8\" This server accepts configuration via the settings key.","title":"Python (pyls_ms)"},{"location":"lsp/pyls_ms/#setup","text":"require 'lspconfig' . pyls_ms . setup {}","title":"Setup"},{"location":"lsp/pyls_ms/#default-values","text":"filetypes = { \"python\" } init_options = { analysisUpdates = true , asyncStartup = true , displayOptions = {}, interpreter = { properties = { InterpreterPath = \"\" , Version = \"\" } } } root_dir = vim 's starting directory settings = { python = { analysis = { disabled = {}, errors = {}, info = {} } } }","title":"Default Values"},{"location":"lsp/pylsp/","text":"Python (pylsp) https://github.com/python-lsp/python-lsp-server A Python 3.6+ implementation of the Language Server Protocol. The language server can be installed via pipx install 'python-lsp-server[all]' . Further instructions can be found in the project's README . Note: This is a community fork of pyls . Setup require 'lspconfig' . pylsp . setup {} Default Values cmd = { \"pylsp\" } filetypes = { \"python\" } root_dir = function ( fname ) local root_files = { \"pyproject.toml\" , \"setup.py\" , \"setup.cfg\" , \"requirements.txt\" , \"Pipfile\" , } return util . root_pattern ( unpack ( root_files ))( fname ) or util . find_git_ancestor ( fname ) or util . path . dirname ( fname ) end ,","title":"Python (pylsp)"},{"location":"lsp/pylsp/#python-pylsp","text":"https://github.com/python-lsp/python-lsp-server A Python 3.6+ implementation of the Language Server Protocol. The language server can be installed via pipx install 'python-lsp-server[all]' . Further instructions can be found in the project's README . Note: This is a community fork of pyls .","title":"Python (pylsp)"},{"location":"lsp/pylsp/#setup","text":"require 'lspconfig' . pylsp . setup {}","title":"Setup"},{"location":"lsp/pylsp/#default-values","text":"cmd = { \"pylsp\" } filetypes = { \"python\" } root_dir = function ( fname ) local root_files = { \"pyproject.toml\" , \"setup.py\" , \"setup.cfg\" , \"requirements.txt\" , \"Pipfile\" , } return util . root_pattern ( unpack ( root_files ))( fname ) or util . find_git_ancestor ( fname ) or util . path . dirname ( fname ) end ,","title":"Default Values"},{"location":"lsp/pyright/","text":"Python (pyright) https://github.com/microsoft/pyright pyright , a static type checker and language server for python Setup require 'lspconfig' . pyright . setup {} Commands PyrightOrganizeImports: Organize Imports Default Values cmd = { \"pyright-langserver\" , \"--stdio\" } filetypes = { \"python\" } root_dir = function ( filename ) return util . root_pattern ( unpack ( root_files ))( filename ) or util . path . dirname ( filename ) end , settings = { python = { analysis = { autoSearchPaths = true , diagnosticMode = \"workspace\" , useLibraryCodeForTypes = true } } } This server accepts configuration via the settings key. Available settings pyright.disableLanguageServices Type: boolean Disables type completion\\, definitions\\, and references. pyright.disableOrganizeImports Type: boolean Disables the \u201cOrganize Imports\u201d command. python.analysis.autoImportCompletions Type: boolean Default: true Offer auto-import completions. python.analysis.autoSearchPaths Type: boolean Default: true Automatically add common search paths like \\'src\\'\\? python.analysis.diagnosticMode enum { \"openFilesOnly\", \"workspace\" } Default: \"openFilesOnly\" null python.analysis.diagnosticSeverityOverrides Type: object Default: vim.empty_dict() Allows a user to override the severity levels for individual diagnostics. python.analysis.extraPaths Type: array Default: {} Array items: {type = \"string\"} Additional import search resolution paths python.analysis.logLevel enum { \"Error\", \"Warning\", \"Information\", \"Trace\" } Default: \"Information\" Specifies the level of logging for the Output panel python.analysis.stubPath Type: string Default: \"typings\" Path to directory containing custom type stub files. python.analysis.typeCheckingMode enum { \"off\", \"basic\", \"strict\" } Default: \"basic\" Defines the default rule set for type checking. python.analysis.typeshedPaths Type: array Default: {} Array items: {type = \"string\"} Paths to look for typeshed modules. python.analysis.useLibraryCodeForTypes Type: boolean Use library implementations to extract type information when type stub is not present. python.pythonPath Type: string Default: \"python\" Path to Python\\, you can use a custom version of Python. python.venvPath Type: string Default: \"\" Path to folder with a list of Virtual Environments.","title":"Python (pyright)"},{"location":"lsp/pyright/#python-pyright","text":"https://github.com/microsoft/pyright pyright , a static type checker and language server for python","title":"Python (pyright)"},{"location":"lsp/pyright/#setup","text":"require 'lspconfig' . pyright . setup {}","title":"Setup"},{"location":"lsp/pyright/#commands","text":"PyrightOrganizeImports: Organize Imports","title":"Commands"},{"location":"lsp/pyright/#default-values","text":"cmd = { \"pyright-langserver\" , \"--stdio\" } filetypes = { \"python\" } root_dir = function ( filename ) return util . root_pattern ( unpack ( root_files ))( filename ) or util . path . dirname ( filename ) end , settings = { python = { analysis = { autoSearchPaths = true , diagnosticMode = \"workspace\" , useLibraryCodeForTypes = true } } } This server accepts configuration via the settings key.","title":"Default Values"},{"location":"lsp/pyright/#available-settings","text":"","title":"Available settings"},{"location":"lsp/pyright/#pyrightdisablelanguageservices","text":"Type: boolean Disables type completion\\, definitions\\, and references.","title":"pyright.disableLanguageServices"},{"location":"lsp/pyright/#pyrightdisableorganizeimports","text":"Type: boolean Disables the \u201cOrganize Imports\u201d command.","title":"pyright.disableOrganizeImports"},{"location":"lsp/pyright/#pythonanalysisautoimportcompletions","text":"Type: boolean Default: true Offer auto-import completions.","title":"python.analysis.autoImportCompletions"},{"location":"lsp/pyright/#pythonanalysisautosearchpaths","text":"Type: boolean Default: true Automatically add common search paths like \\'src\\'\\?","title":"python.analysis.autoSearchPaths"},{"location":"lsp/pyright/#pythonanalysisdiagnosticmode","text":"enum { \"openFilesOnly\", \"workspace\" } Default: \"openFilesOnly\" null","title":"python.analysis.diagnosticMode"},{"location":"lsp/pyright/#pythonanalysisdiagnosticseverityoverrides","text":"Type: object Default: vim.empty_dict() Allows a user to override the severity levels for individual diagnostics.","title":"python.analysis.diagnosticSeverityOverrides"},{"location":"lsp/pyright/#pythonanalysisextrapaths","text":"Type: array Default: {} Array items: {type = \"string\"} Additional import search resolution paths","title":"python.analysis.extraPaths"},{"location":"lsp/pyright/#pythonanalysisloglevel","text":"enum { \"Error\", \"Warning\", \"Information\", \"Trace\" } Default: \"Information\" Specifies the level of logging for the Output panel","title":"python.analysis.logLevel"},{"location":"lsp/pyright/#pythonanalysisstubpath","text":"Type: string Default: \"typings\" Path to directory containing custom type stub files.","title":"python.analysis.stubPath"},{"location":"lsp/pyright/#pythonanalysistypecheckingmode","text":"enum { \"off\", \"basic\", \"strict\" } Default: \"basic\" Defines the default rule set for type checking.","title":"python.analysis.typeCheckingMode"},{"location":"lsp/pyright/#pythonanalysistypeshedpaths","text":"Type: array Default: {} Array items: {type = \"string\"} Paths to look for typeshed modules.","title":"python.analysis.typeshedPaths"},{"location":"lsp/pyright/#pythonanalysisuselibrarycodefortypes","text":"Type: boolean Use library implementations to extract type information when type stub is not present.","title":"python.analysis.useLibraryCodeForTypes"},{"location":"lsp/pyright/#pythonpythonpath","text":"Type: string Default: \"python\" Path to Python\\, you can use a custom version of Python.","title":"python.pythonPath"},{"location":"lsp/pyright/#pythonvenvpath","text":"Type: string Default: \"\" Path to folder with a list of Virtual Environments.","title":"python.venvPath"},{"location":"lsp/r_language_server/","text":"R (r_language_server) [languageserver](https://github.com/REditorSupport/languageserver) is an implementation of the Microsoft's Language Server Protocol for the R language. It is released on CRAN and can be easily installed by ```R install.packages(\"languageserver\") ``` Setup require 'lspconfig' . r_language_server . setup {} Default Values cmd = { \"R\" , \"--slave\" , \"-e\" , \"languageserver::run()\" } filetypes = { \"r\" , \"rmd\" } log_level = 2 root_dir = root_pattern ( \".git\" ) or os_homedir This server accepts configuration via the settings key. Available settings r.lsp.args Type: array Default: {} The command line arguments to use when launching R Language Server r.lsp.debug Type: boolean Debug R Language Server r.lsp.diagnostics Type: boolean Default: true Enable Diagnostics r.lsp.lang Type: string Default: \"\" Override default LANG environment variable r.lsp.path Type: string Default: \"\" Path to R binary for launching Language Server r.lsp.use_stdio Type: boolean Use STDIO connection instead of TCP. (Unix\\/macOS users only) r.rpath.linux Type: string Default: \"\" Path to an R executable for Linux. Must be \\\"vanilla\\\" R\\, not radian etc.! r.rpath.mac Type: string Default: \"\" Path to an R executable for macOS. Must be \\\"vanilla\\\" R\\, not radian etc.! r.rpath.windows Type: string Default: \"\" Path to an R executable for Windows. Must be \\\"vanilla\\\" R\\, not radian etc.!","title":"R (r_language_server)"},{"location":"lsp/r_language_server/#r-r_language_server","text":"[languageserver](https://github.com/REditorSupport/languageserver) is an implementation of the Microsoft's Language Server Protocol for the R language. It is released on CRAN and can be easily installed by ```R install.packages(\"languageserver\") ```","title":"R (r_language_server)"},{"location":"lsp/r_language_server/#setup","text":"require 'lspconfig' . r_language_server . setup {}","title":"Setup"},{"location":"lsp/r_language_server/#default-values","text":"cmd = { \"R\" , \"--slave\" , \"-e\" , \"languageserver::run()\" } filetypes = { \"r\" , \"rmd\" } log_level = 2 root_dir = root_pattern ( \".git\" ) or os_homedir This server accepts configuration via the settings key.","title":"Default Values"},{"location":"lsp/r_language_server/#available-settings","text":"","title":"Available settings"},{"location":"lsp/r_language_server/#rlspargs","text":"Type: array Default: {} The command line arguments to use when launching R Language Server","title":"r.lsp.args"},{"location":"lsp/r_language_server/#rlspdebug","text":"Type: boolean Debug R Language Server","title":"r.lsp.debug"},{"location":"lsp/r_language_server/#rlspdiagnostics","text":"Type: boolean Default: true Enable Diagnostics","title":"r.lsp.diagnostics"},{"location":"lsp/r_language_server/#rlsplang","text":"Type: string Default: \"\" Override default LANG environment variable","title":"r.lsp.lang"},{"location":"lsp/r_language_server/#rlsppath","text":"Type: string Default: \"\" Path to R binary for launching Language Server","title":"r.lsp.path"},{"location":"lsp/r_language_server/#rlspuse_stdio","text":"Type: boolean Use STDIO connection instead of TCP. (Unix\\/macOS users only)","title":"r.lsp.use_stdio"},{"location":"lsp/r_language_server/#rrpathlinux","text":"Type: string Default: \"\" Path to an R executable for Linux. Must be \\\"vanilla\\\" R\\, not radian etc.!","title":"r.rpath.linux"},{"location":"lsp/r_language_server/#rrpathmac","text":"Type: string Default: \"\" Path to an R executable for macOS. Must be \\\"vanilla\\\" R\\, not radian etc.!","title":"r.rpath.mac"},{"location":"lsp/r_language_server/#rrpathwindows","text":"Type: string Default: \"\" Path to an R executable for Windows. Must be \\\"vanilla\\\" R\\, not radian etc.!","title":"r.rpath.windows"},{"location":"lsp/racket_langserver/","text":"Racket (racket_langserver) https://github.com/jeapostrophe/racket-langserver The Racket language server. This project seeks to use DrRacket 's public API to provide functionality that mimics DrRacket's code tools as closely as possible. Install via raco : raco pkg install racket-langserver Setup require 'lspconfig' . racket_langserver . setup {} Default Values cmd = { \"racket\" , \"--lib\" , \"racket-langserver\" } filetypes = { \"racket\" , \"scheme\" } root_dir = function ( filename ) return util . root_pattern ( unpack ( root_files ))( filename ) or util . path . dirname ( filename ) end ,","title":"Racket (racket_langserver)"},{"location":"lsp/racket_langserver/#racket-racket_langserver","text":"https://github.com/jeapostrophe/racket-langserver The Racket language server. This project seeks to use DrRacket 's public API to provide functionality that mimics DrRacket's code tools as closely as possible. Install via raco : raco pkg install racket-langserver","title":"Racket (racket_langserver)"},{"location":"lsp/racket_langserver/#setup","text":"require 'lspconfig' . racket_langserver . setup {}","title":"Setup"},{"location":"lsp/racket_langserver/#default-values","text":"cmd = { \"racket\" , \"--lib\" , \"racket-langserver\" } filetypes = { \"racket\" , \"scheme\" } root_dir = function ( filename ) return util . root_pattern ( unpack ( root_files ))( filename ) or util . path . dirname ( filename ) end ,","title":"Default Values"},{"location":"lsp/rescriptls/","text":"ReScript (rescriptls) https://github.com/rescript-lang/rescript-vscode ReScript language server By default, rescriptls doesn't have a cmd set. This is because nvim-lspconfig does not make assumptions about your path. You have to install the language server manually. You can use the bundled language server inside the vim-rescript repo. Clone the vim-rescript repo and point cmd to server.js inside server/out directory: cmd = { 'node' , '<path_to_repo>/server/out/server.js' , '--stdio' } If you have vim-rescript installed you can also use that installation. for example if you're using packer.nvim you can set cmd to something like this: cmd = { 'node' , '/home/username/.local/share/nvim/site/pack/packer/start/vim-rescript/server/out/server.js' , '--stdio' } Another option is to use vscode extension release . Take a look at here for instructions. Setup require 'lspconfig' . rescriptls . setup {} Default Values cmd = {} filetypes = { \"rescript\" } root_dir = function ( startpath ) return M . search_ancestors ( startpath , matcher ) end settings = {}","title":"ReScript (rescriptls)"},{"location":"lsp/rescriptls/#rescript-rescriptls","text":"https://github.com/rescript-lang/rescript-vscode ReScript language server By default, rescriptls doesn't have a cmd set. This is because nvim-lspconfig does not make assumptions about your path. You have to install the language server manually. You can use the bundled language server inside the vim-rescript repo. Clone the vim-rescript repo and point cmd to server.js inside server/out directory: cmd = { 'node' , '<path_to_repo>/server/out/server.js' , '--stdio' } If you have vim-rescript installed you can also use that installation. for example if you're using packer.nvim you can set cmd to something like this: cmd = { 'node' , '/home/username/.local/share/nvim/site/pack/packer/start/vim-rescript/server/out/server.js' , '--stdio' } Another option is to use vscode extension release . Take a look at here for instructions.","title":"ReScript (rescriptls)"},{"location":"lsp/rescriptls/#setup","text":"require 'lspconfig' . rescriptls . setup {}","title":"Setup"},{"location":"lsp/rescriptls/#default-values","text":"cmd = {} filetypes = { \"rescript\" } root_dir = function ( startpath ) return M . search_ancestors ( startpath , matcher ) end settings = {}","title":"Default Values"},{"location":"lsp/rls/","text":"Rust (rls) https://github.com/rust-lang/rls rls, a language server for Rust See https://github.com/rust-lang/rls#setup to setup rls itself. See https://github.com/rust-lang/rls#configuration for rls-specific settings. All settings listed on the rls configuration section of the readme must be set under settings.rust as follows: nvim_lsp . rls . setup { settings = { rust = { unstable_features = true , build_on_save = false , all_features = true , }, }, } If you want to use rls for a particular build, eg nightly, set cmd as follows: cmd = { \"rustup\" , \"run\" , \"nightly\" , \"rls\" } Setup require 'lspconfig' . rls . setup {} Default Values cmd = { \"rls\" } filetypes = { \"rust\" } root_dir = root_pattern ( \"Cargo.toml\" )","title":"Rust (rls)"},{"location":"lsp/rls/#rust-rls","text":"https://github.com/rust-lang/rls rls, a language server for Rust See https://github.com/rust-lang/rls#setup to setup rls itself. See https://github.com/rust-lang/rls#configuration for rls-specific settings. All settings listed on the rls configuration section of the readme must be set under settings.rust as follows: nvim_lsp . rls . setup { settings = { rust = { unstable_features = true , build_on_save = false , all_features = true , }, }, } If you want to use rls for a particular build, eg nightly, set cmd as follows: cmd = { \"rustup\" , \"run\" , \"nightly\" , \"rls\" }","title":"Rust (rls)"},{"location":"lsp/rls/#setup","text":"require 'lspconfig' . rls . setup {}","title":"Setup"},{"location":"lsp/rls/#default-values","text":"cmd = { \"rls\" } filetypes = { \"rust\" } root_dir = root_pattern ( \"Cargo.toml\" )","title":"Default Values"},{"location":"lsp/rnix/","text":"Nix (rnix) https://github.com/nix-community/rnix-lsp A language server for Nix providing basic completion and formatting via nixpkgs-fmt. To install manually, run cargo install rnix-lsp . If you are using nix, rnix-lsp is in nixpkgs. This server accepts configuration via the settings key. Setup require 'lspconfig' . rnix . setup {} Default Values cmd = { \"rnix-lsp\" } filetypes = { \"nix\" } init_options = {} root_dir = vim 's starting directory settings = {}","title":"Nix (rnix)"},{"location":"lsp/rnix/#nix-rnix","text":"https://github.com/nix-community/rnix-lsp A language server for Nix providing basic completion and formatting via nixpkgs-fmt. To install manually, run cargo install rnix-lsp . If you are using nix, rnix-lsp is in nixpkgs. This server accepts configuration via the settings key.","title":"Nix (rnix)"},{"location":"lsp/rnix/#setup","text":"require 'lspconfig' . rnix . setup {}","title":"Setup"},{"location":"lsp/rnix/#default-values","text":"cmd = { \"rnix-lsp\" } filetypes = { \"nix\" } init_options = {} root_dir = vim 's starting directory settings = {}","title":"Default Values"},{"location":"lsp/rome/","text":"TypeScript (rome) https://rome.tools Language server for the Rome Frontend Toolchain. npm install [ -g ] rome Setup require 'lspconfig' . rome . setup {} Default Values cmd = { \"rome\" , \"lsp\" } filetypes = { \"javascript\" , \"javascriptreact\" , \"json\" , \"typescript\" , \"typescript.tsx\" , \"typescriptreact\" } root_dir = root_pattern ( 'package.json' , 'node_modules' , '.git' ) or dirname","title":"TypeScript (rome)"},{"location":"lsp/rome/#typescript-rome","text":"https://rome.tools Language server for the Rome Frontend Toolchain. npm install [ -g ] rome","title":"TypeScript (rome)"},{"location":"lsp/rome/#setup","text":"require 'lspconfig' . rome . setup {}","title":"Setup"},{"location":"lsp/rome/#default-values","text":"cmd = { \"rome\" , \"lsp\" } filetypes = { \"javascript\" , \"javascriptreact\" , \"json\" , \"typescript\" , \"typescript.tsx\" , \"typescriptreact\" } root_dir = root_pattern ( 'package.json' , 'node_modules' , '.git' ) or dirname","title":"Default Values"},{"location":"lsp/rust_analyzer/","text":"Rust (rust_analyzer) https://github.com/rust-analyzer/rust-analyzer rust-analyzer (aka rls 2.0), a language server for Rust See docs for extra settings. Setup require 'lspconfig' . rust_analyzer . setup {} Commands CargoReload: Reload current cargo workspace Default Values cmd = { \"rust-analyzer\" } filetypes = { \"rust\" } root_dir = root_pattern ( \"Cargo.toml\" , \"rust-project.json\" ) settings = { [ \"rust-analyzer\" ] = {} } This server accepts configuration via the settings key. Available settings $generated-end null $generated-start null rust-analyzer.assist.allowMergingIntoGlobImports Type: boolean Default: true null rust-analyzer.assist.importEnforceGranularity Type: boolean null rust-analyzer.assist.importGranularity enum { \"preserve\", \"crate\", \"module\", \"item\" } Default: \"crate\" null rust-analyzer.assist.importGroup Type: boolean Default: true null rust-analyzer.assist.importPrefix enum { \"plain\", \"self\", \"crate\" } Default: \"plain\" null rust-analyzer.callInfo.full Type: boolean Default: true null rust-analyzer.cargo.allFeatures Type: boolean null rust-analyzer.cargo.autoreload Type: boolean Default: true null rust-analyzer.cargo.features Type: array Default: {} Array items: {type = \"string\"} null rust-analyzer.cargo.noDefaultFeatures Type: boolean null rust-analyzer.cargo.noSysroot Type: boolean null rust-analyzer.cargo.runBuildScripts Type: boolean Default: true null rust-analyzer.cargo.target Type: null|string Default: vim.NIL null rust-analyzer.cargo.unsetTest Type: array Default: { \"core\" } Array items: {type = \"string\"} null rust-analyzer.cargo.useRustcWrapperForBuildScripts Type: boolean Default: true null rust-analyzer.cargoRunner Type: null|string Default: vim.NIL Custom cargo runner extension ID. rust-analyzer.checkOnSave.allFeatures Type: null|boolean Default: vim.NIL null rust-analyzer.checkOnSave.allTargets Type: boolean Default: true null rust-analyzer.checkOnSave.command Type: string Default: \"check\" null rust-analyzer.checkOnSave.enable Type: boolean Default: true null rust-analyzer.checkOnSave.extraArgs Type: array Default: {} Array items: {type = \"string\"} null rust-analyzer.checkOnSave.features Type: null|array Default: vim.NIL Array items: {type = \"string\"} null rust-analyzer.checkOnSave.noDefaultFeatures Type: null|boolean Default: vim.NIL null rust-analyzer.checkOnSave.overrideCommand Type: null|array Default: vim.NIL Array items: {type = \"string\"} null rust-analyzer.checkOnSave.target Type: null|string Default: vim.NIL null rust-analyzer.completion.addCallArgumentSnippets Type: boolean Default: true null rust-analyzer.completion.addCallParenthesis Type: boolean Default: true null rust-analyzer.completion.autoimport.enable Type: boolean Default: true null rust-analyzer.completion.autoself.enable Type: boolean Default: true null rust-analyzer.completion.postfix.enable Type: boolean Default: true null rust-analyzer.debug.engine enum { \"auto\", \"vadimcn.vscode-lldb\", \"ms-vscode.cpptools\" } Default: \"auto\" Preferred debug engine. rust-analyzer.debug.engineSettings Type: object Default: vim.empty_dict() null rust-analyzer.debug.openDebugPane Type: boolean null rust-analyzer.debug.sourceFileMap Type: object|string Default: {[\"/rustc/<id>\"] = \"${env:USERPROFILE}/.rustup/toolchains/<toolchain-id>/lib/rustlib/src/rust\"} Optional source file mappings passed to the debug engine. rust-analyzer.diagnostics.disabled Type: array Default: {} Array items: {type = \"string\"} null rust-analyzer.diagnostics.enable Type: boolean Default: true null rust-analyzer.diagnostics.enableExperimental Type: boolean Default: true null rust-analyzer.diagnostics.remapPrefix Type: object Default: vim.empty_dict() null rust-analyzer.diagnostics.warningsAsHint Type: array Default: {} Array items: {type = \"string\"} null rust-analyzer.diagnostics.warningsAsInfo Type: array Default: {} Array items: {type = \"string\"} null rust-analyzer.experimental.procAttrMacros Type: boolean null rust-analyzer.files.excludeDirs Type: array Default: {} Array items: {type = \"string\"} null rust-analyzer.files.watcher Type: string Default: \"client\" null rust-analyzer.highlighting.strings Type: boolean Default: true null rust-analyzer.hover.documentation Type: boolean Default: true null rust-analyzer.hover.linksInHover Type: boolean Default: true null rust-analyzer.hoverActions.debug Type: boolean Default: true null rust-analyzer.hoverActions.enable Type: boolean Default: true null rust-analyzer.hoverActions.gotoTypeDef Type: boolean Default: true null rust-analyzer.hoverActions.implementations Type: boolean Default: true null rust-analyzer.hoverActions.references Type: boolean null rust-analyzer.hoverActions.run Type: boolean Default: true null rust-analyzer.inlayHints.chainingHints Type: boolean Default: true null rust-analyzer.inlayHints.enable Type: boolean Default: true Whether to show inlay hints. rust-analyzer.inlayHints.maxLength Type: null|integer Default: 25 null rust-analyzer.inlayHints.parameterHints Type: boolean Default: true null rust-analyzer.inlayHints.smallerHints Type: boolean Default: true Whether inlay hints font size should be smaller than editor\\'s font size. rust-analyzer.inlayHints.typeHints Type: boolean Default: true null rust-analyzer.lens.debug Type: boolean Default: true null rust-analyzer.lens.enable Type: boolean Default: true null rust-analyzer.lens.implementations Type: boolean Default: true null rust-analyzer.lens.methodReferences Type: boolean null rust-analyzer.lens.references Type: boolean null rust-analyzer.lens.run Type: boolean Default: true null rust-analyzer.linkedProjects Type: array Default: {} Array items: {type = { \"string\", \"object\" }} null rust-analyzer.lruCapacity Type: null|integer Default: vim.NIL null rust-analyzer.notifications.cargoTomlNotFound Type: boolean Default: true null rust-analyzer.procMacro.enable Type: boolean Default: true null rust-analyzer.procMacro.server Type: null|string Default: vim.NIL null rust-analyzer.runnableEnv Default: vim.NIL null rust-analyzer.runnables.cargoExtraArgs Type: array Default: {} Array items: {type = \"string\"} null rust-analyzer.runnables.overrideCargo Type: null|string Default: vim.NIL null rust-analyzer.rustcSource Type: null|string Default: vim.NIL null rust-analyzer.rustfmt.enableRangeFormatting Type: boolean null rust-analyzer.rustfmt.extraArgs Type: array Default: {} Array items: {type = \"string\"} null rust-analyzer.rustfmt.overrideCommand Type: null|array Default: vim.NIL Array items: {type = \"string\"} null rust-analyzer.server.extraEnv Type: null|object Default: vim.NIL null rust-analyzer.server.path Type: null|string Default: vim.NIL null rust-analyzer.trace.extension Type: boolean Enable logging of VS Code extensions itself. rust-analyzer.trace.server enum { \"off\", \"messages\", \"verbose\" } Default: \"off\" Trace requests to the rust-analyzer (this is usually overly verbose and not recommended for regular users). rust-analyzer.updates.askBeforeDownload Type: boolean Whether to ask for permission before downloading any files from the Internet. rust-analyzer.updates.channel enum { \"stable\", \"nightly\" } Default: \"stable\" null rust-analyzer.workspace.symbol.search.kind enum { \"only_types\", \"all_symbols\" } Default: \"only_types\" null rust-analyzer.workspace.symbol.search.scope enum { \"workspace\", \"workspace_and_dependencies\" } Default: \"workspace\" null","title":"Rust (rust_analyzer)"},{"location":"lsp/rust_analyzer/#rust-rust_analyzer","text":"https://github.com/rust-analyzer/rust-analyzer rust-analyzer (aka rls 2.0), a language server for Rust See docs for extra settings.","title":"Rust (rust_analyzer)"},{"location":"lsp/rust_analyzer/#setup","text":"require 'lspconfig' . rust_analyzer . setup {}","title":"Setup"},{"location":"lsp/rust_analyzer/#commands","text":"CargoReload: Reload current cargo workspace","title":"Commands"},{"location":"lsp/rust_analyzer/#default-values","text":"cmd = { \"rust-analyzer\" } filetypes = { \"rust\" } root_dir = root_pattern ( \"Cargo.toml\" , \"rust-project.json\" ) settings = { [ \"rust-analyzer\" ] = {} } This server accepts configuration via the settings key.","title":"Default Values"},{"location":"lsp/rust_analyzer/#available-settings","text":"","title":"Available settings"},{"location":"lsp/rust_analyzer/#generated-end","text":"null","title":"$generated-end"},{"location":"lsp/rust_analyzer/#generated-start","text":"null","title":"$generated-start"},{"location":"lsp/rust_analyzer/#rust-analyzerassistallowmergingintoglobimports","text":"Type: boolean Default: true null","title":"rust-analyzer.assist.allowMergingIntoGlobImports"},{"location":"lsp/rust_analyzer/#rust-analyzerassistimportenforcegranularity","text":"Type: boolean null","title":"rust-analyzer.assist.importEnforceGranularity"},{"location":"lsp/rust_analyzer/#rust-analyzerassistimportgranularity","text":"enum { \"preserve\", \"crate\", \"module\", \"item\" } Default: \"crate\" null","title":"rust-analyzer.assist.importGranularity"},{"location":"lsp/rust_analyzer/#rust-analyzerassistimportgroup","text":"Type: boolean Default: true null","title":"rust-analyzer.assist.importGroup"},{"location":"lsp/rust_analyzer/#rust-analyzerassistimportprefix","text":"enum { \"plain\", \"self\", \"crate\" } Default: \"plain\" null","title":"rust-analyzer.assist.importPrefix"},{"location":"lsp/rust_analyzer/#rust-analyzercallinfofull","text":"Type: boolean Default: true null","title":"rust-analyzer.callInfo.full"},{"location":"lsp/rust_analyzer/#rust-analyzercargoallfeatures","text":"Type: boolean null","title":"rust-analyzer.cargo.allFeatures"},{"location":"lsp/rust_analyzer/#rust-analyzercargoautoreload","text":"Type: boolean Default: true null","title":"rust-analyzer.cargo.autoreload"},{"location":"lsp/rust_analyzer/#rust-analyzercargofeatures","text":"Type: array Default: {} Array items: {type = \"string\"} null","title":"rust-analyzer.cargo.features"},{"location":"lsp/rust_analyzer/#rust-analyzercargonodefaultfeatures","text":"Type: boolean null","title":"rust-analyzer.cargo.noDefaultFeatures"},{"location":"lsp/rust_analyzer/#rust-analyzercargonosysroot","text":"Type: boolean null","title":"rust-analyzer.cargo.noSysroot"},{"location":"lsp/rust_analyzer/#rust-analyzercargorunbuildscripts","text":"Type: boolean Default: true null","title":"rust-analyzer.cargo.runBuildScripts"},{"location":"lsp/rust_analyzer/#rust-analyzercargotarget","text":"Type: null|string Default: vim.NIL null","title":"rust-analyzer.cargo.target"},{"location":"lsp/rust_analyzer/#rust-analyzercargounsettest","text":"Type: array Default: { \"core\" } Array items: {type = \"string\"} null","title":"rust-analyzer.cargo.unsetTest"},{"location":"lsp/rust_analyzer/#rust-analyzercargouserustcwrapperforbuildscripts","text":"Type: boolean Default: true null","title":"rust-analyzer.cargo.useRustcWrapperForBuildScripts"},{"location":"lsp/rust_analyzer/#rust-analyzercargorunner","text":"Type: null|string Default: vim.NIL Custom cargo runner extension ID.","title":"rust-analyzer.cargoRunner"},{"location":"lsp/rust_analyzer/#rust-analyzercheckonsaveallfeatures","text":"Type: null|boolean Default: vim.NIL null","title":"rust-analyzer.checkOnSave.allFeatures"},{"location":"lsp/rust_analyzer/#rust-analyzercheckonsavealltargets","text":"Type: boolean Default: true null","title":"rust-analyzer.checkOnSave.allTargets"},{"location":"lsp/rust_analyzer/#rust-analyzercheckonsavecommand","text":"Type: string Default: \"check\" null","title":"rust-analyzer.checkOnSave.command"},{"location":"lsp/rust_analyzer/#rust-analyzercheckonsaveenable","text":"Type: boolean Default: true null","title":"rust-analyzer.checkOnSave.enable"},{"location":"lsp/rust_analyzer/#rust-analyzercheckonsaveextraargs","text":"Type: array Default: {} Array items: {type = \"string\"} null","title":"rust-analyzer.checkOnSave.extraArgs"},{"location":"lsp/rust_analyzer/#rust-analyzercheckonsavefeatures","text":"Type: null|array Default: vim.NIL Array items: {type = \"string\"} null","title":"rust-analyzer.checkOnSave.features"},{"location":"lsp/rust_analyzer/#rust-analyzercheckonsavenodefaultfeatures","text":"Type: null|boolean Default: vim.NIL null","title":"rust-analyzer.checkOnSave.noDefaultFeatures"},{"location":"lsp/rust_analyzer/#rust-analyzercheckonsaveoverridecommand","text":"Type: null|array Default: vim.NIL Array items: {type = \"string\"} null","title":"rust-analyzer.checkOnSave.overrideCommand"},{"location":"lsp/rust_analyzer/#rust-analyzercheckonsavetarget","text":"Type: null|string Default: vim.NIL null","title":"rust-analyzer.checkOnSave.target"},{"location":"lsp/rust_analyzer/#rust-analyzercompletionaddcallargumentsnippets","text":"Type: boolean Default: true null","title":"rust-analyzer.completion.addCallArgumentSnippets"},{"location":"lsp/rust_analyzer/#rust-analyzercompletionaddcallparenthesis","text":"Type: boolean Default: true null","title":"rust-analyzer.completion.addCallParenthesis"},{"location":"lsp/rust_analyzer/#rust-analyzercompletionautoimportenable","text":"Type: boolean Default: true null","title":"rust-analyzer.completion.autoimport.enable"},{"location":"lsp/rust_analyzer/#rust-analyzercompletionautoselfenable","text":"Type: boolean Default: true null","title":"rust-analyzer.completion.autoself.enable"},{"location":"lsp/rust_analyzer/#rust-analyzercompletionpostfixenable","text":"Type: boolean Default: true null","title":"rust-analyzer.completion.postfix.enable"},{"location":"lsp/rust_analyzer/#rust-analyzerdebugengine","text":"enum { \"auto\", \"vadimcn.vscode-lldb\", \"ms-vscode.cpptools\" } Default: \"auto\" Preferred debug engine.","title":"rust-analyzer.debug.engine"},{"location":"lsp/rust_analyzer/#rust-analyzerdebugenginesettings","text":"Type: object Default: vim.empty_dict() null","title":"rust-analyzer.debug.engineSettings"},{"location":"lsp/rust_analyzer/#rust-analyzerdebugopendebugpane","text":"Type: boolean null","title":"rust-analyzer.debug.openDebugPane"},{"location":"lsp/rust_analyzer/#rust-analyzerdebugsourcefilemap","text":"Type: object|string Default: {[\"/rustc/<id>\"] = \"${env:USERPROFILE}/.rustup/toolchains/<toolchain-id>/lib/rustlib/src/rust\"} Optional source file mappings passed to the debug engine.","title":"rust-analyzer.debug.sourceFileMap"},{"location":"lsp/rust_analyzer/#rust-analyzerdiagnosticsdisabled","text":"Type: array Default: {} Array items: {type = \"string\"} null","title":"rust-analyzer.diagnostics.disabled"},{"location":"lsp/rust_analyzer/#rust-analyzerdiagnosticsenable","text":"Type: boolean Default: true null","title":"rust-analyzer.diagnostics.enable"},{"location":"lsp/rust_analyzer/#rust-analyzerdiagnosticsenableexperimental","text":"Type: boolean Default: true null","title":"rust-analyzer.diagnostics.enableExperimental"},{"location":"lsp/rust_analyzer/#rust-analyzerdiagnosticsremapprefix","text":"Type: object Default: vim.empty_dict() null","title":"rust-analyzer.diagnostics.remapPrefix"},{"location":"lsp/rust_analyzer/#rust-analyzerdiagnosticswarningsashint","text":"Type: array Default: {} Array items: {type = \"string\"} null","title":"rust-analyzer.diagnostics.warningsAsHint"},{"location":"lsp/rust_analyzer/#rust-analyzerdiagnosticswarningsasinfo","text":"Type: array Default: {} Array items: {type = \"string\"} null","title":"rust-analyzer.diagnostics.warningsAsInfo"},{"location":"lsp/rust_analyzer/#rust-analyzerexperimentalprocattrmacros","text":"Type: boolean null","title":"rust-analyzer.experimental.procAttrMacros"},{"location":"lsp/rust_analyzer/#rust-analyzerfilesexcludedirs","text":"Type: array Default: {} Array items: {type = \"string\"} null","title":"rust-analyzer.files.excludeDirs"},{"location":"lsp/rust_analyzer/#rust-analyzerfileswatcher","text":"Type: string Default: \"client\" null","title":"rust-analyzer.files.watcher"},{"location":"lsp/rust_analyzer/#rust-analyzerhighlightingstrings","text":"Type: boolean Default: true null","title":"rust-analyzer.highlighting.strings"},{"location":"lsp/rust_analyzer/#rust-analyzerhoverdocumentation","text":"Type: boolean Default: true null","title":"rust-analyzer.hover.documentation"},{"location":"lsp/rust_analyzer/#rust-analyzerhoverlinksinhover","text":"Type: boolean Default: true null","title":"rust-analyzer.hover.linksInHover"},{"location":"lsp/rust_analyzer/#rust-analyzerhoveractionsdebug","text":"Type: boolean Default: true null","title":"rust-analyzer.hoverActions.debug"},{"location":"lsp/rust_analyzer/#rust-analyzerhoveractionsenable","text":"Type: boolean Default: true null","title":"rust-analyzer.hoverActions.enable"},{"location":"lsp/rust_analyzer/#rust-analyzerhoveractionsgototypedef","text":"Type: boolean Default: true null","title":"rust-analyzer.hoverActions.gotoTypeDef"},{"location":"lsp/rust_analyzer/#rust-analyzerhoveractionsimplementations","text":"Type: boolean Default: true null","title":"rust-analyzer.hoverActions.implementations"},{"location":"lsp/rust_analyzer/#rust-analyzerhoveractionsreferences","text":"Type: boolean null","title":"rust-analyzer.hoverActions.references"},{"location":"lsp/rust_analyzer/#rust-analyzerhoveractionsrun","text":"Type: boolean Default: true null","title":"rust-analyzer.hoverActions.run"},{"location":"lsp/rust_analyzer/#rust-analyzerinlayhintschaininghints","text":"Type: boolean Default: true null","title":"rust-analyzer.inlayHints.chainingHints"},{"location":"lsp/rust_analyzer/#rust-analyzerinlayhintsenable","text":"Type: boolean Default: true Whether to show inlay hints.","title":"rust-analyzer.inlayHints.enable"},{"location":"lsp/rust_analyzer/#rust-analyzerinlayhintsmaxlength","text":"Type: null|integer Default: 25 null","title":"rust-analyzer.inlayHints.maxLength"},{"location":"lsp/rust_analyzer/#rust-analyzerinlayhintsparameterhints","text":"Type: boolean Default: true null","title":"rust-analyzer.inlayHints.parameterHints"},{"location":"lsp/rust_analyzer/#rust-analyzerinlayhintssmallerhints","text":"Type: boolean Default: true Whether inlay hints font size should be smaller than editor\\'s font size.","title":"rust-analyzer.inlayHints.smallerHints"},{"location":"lsp/rust_analyzer/#rust-analyzerinlayhintstypehints","text":"Type: boolean Default: true null","title":"rust-analyzer.inlayHints.typeHints"},{"location":"lsp/rust_analyzer/#rust-analyzerlensdebug","text":"Type: boolean Default: true null","title":"rust-analyzer.lens.debug"},{"location":"lsp/rust_analyzer/#rust-analyzerlensenable","text":"Type: boolean Default: true null","title":"rust-analyzer.lens.enable"},{"location":"lsp/rust_analyzer/#rust-analyzerlensimplementations","text":"Type: boolean Default: true null","title":"rust-analyzer.lens.implementations"},{"location":"lsp/rust_analyzer/#rust-analyzerlensmethodreferences","text":"Type: boolean null","title":"rust-analyzer.lens.methodReferences"},{"location":"lsp/rust_analyzer/#rust-analyzerlensreferences","text":"Type: boolean null","title":"rust-analyzer.lens.references"},{"location":"lsp/rust_analyzer/#rust-analyzerlensrun","text":"Type: boolean Default: true null","title":"rust-analyzer.lens.run"},{"location":"lsp/rust_analyzer/#rust-analyzerlinkedprojects","text":"Type: array Default: {} Array items: {type = { \"string\", \"object\" }} null","title":"rust-analyzer.linkedProjects"},{"location":"lsp/rust_analyzer/#rust-analyzerlrucapacity","text":"Type: null|integer Default: vim.NIL null","title":"rust-analyzer.lruCapacity"},{"location":"lsp/rust_analyzer/#rust-analyzernotificationscargotomlnotfound","text":"Type: boolean Default: true null","title":"rust-analyzer.notifications.cargoTomlNotFound"},{"location":"lsp/rust_analyzer/#rust-analyzerprocmacroenable","text":"Type: boolean Default: true null","title":"rust-analyzer.procMacro.enable"},{"location":"lsp/rust_analyzer/#rust-analyzerprocmacroserver","text":"Type: null|string Default: vim.NIL null","title":"rust-analyzer.procMacro.server"},{"location":"lsp/rust_analyzer/#rust-analyzerrunnableenv","text":"Default: vim.NIL null","title":"rust-analyzer.runnableEnv"},{"location":"lsp/rust_analyzer/#rust-analyzerrunnablescargoextraargs","text":"Type: array Default: {} Array items: {type = \"string\"} null","title":"rust-analyzer.runnables.cargoExtraArgs"},{"location":"lsp/rust_analyzer/#rust-analyzerrunnablesoverridecargo","text":"Type: null|string Default: vim.NIL null","title":"rust-analyzer.runnables.overrideCargo"},{"location":"lsp/rust_analyzer/#rust-analyzerrustcsource","text":"Type: null|string Default: vim.NIL null","title":"rust-analyzer.rustcSource"},{"location":"lsp/rust_analyzer/#rust-analyzerrustfmtenablerangeformatting","text":"Type: boolean null","title":"rust-analyzer.rustfmt.enableRangeFormatting"},{"location":"lsp/rust_analyzer/#rust-analyzerrustfmtextraargs","text":"Type: array Default: {} Array items: {type = \"string\"} null","title":"rust-analyzer.rustfmt.extraArgs"},{"location":"lsp/rust_analyzer/#rust-analyzerrustfmtoverridecommand","text":"Type: null|array Default: vim.NIL Array items: {type = \"string\"} null","title":"rust-analyzer.rustfmt.overrideCommand"},{"location":"lsp/rust_analyzer/#rust-analyzerserverextraenv","text":"Type: null|object Default: vim.NIL null","title":"rust-analyzer.server.extraEnv"},{"location":"lsp/rust_analyzer/#rust-analyzerserverpath","text":"Type: null|string Default: vim.NIL null","title":"rust-analyzer.server.path"},{"location":"lsp/rust_analyzer/#rust-analyzertraceextension","text":"Type: boolean Enable logging of VS Code extensions itself.","title":"rust-analyzer.trace.extension"},{"location":"lsp/rust_analyzer/#rust-analyzertraceserver","text":"enum { \"off\", \"messages\", \"verbose\" } Default: \"off\" Trace requests to the rust-analyzer (this is usually overly verbose and not recommended for regular users).","title":"rust-analyzer.trace.server"},{"location":"lsp/rust_analyzer/#rust-analyzerupdatesaskbeforedownload","text":"Type: boolean Whether to ask for permission before downloading any files from the Internet.","title":"rust-analyzer.updates.askBeforeDownload"},{"location":"lsp/rust_analyzer/#rust-analyzerupdateschannel","text":"enum { \"stable\", \"nightly\" } Default: \"stable\" null","title":"rust-analyzer.updates.channel"},{"location":"lsp/rust_analyzer/#rust-analyzerworkspacesymbolsearchkind","text":"enum { \"only_types\", \"all_symbols\" } Default: \"only_types\" null","title":"rust-analyzer.workspace.symbol.search.kind"},{"location":"lsp/rust_analyzer/#rust-analyzerworkspacesymbolsearchscope","text":"enum { \"workspace\", \"workspace_and_dependencies\" } Default: \"workspace\" null","title":"rust-analyzer.workspace.symbol.search.scope"},{"location":"lsp/scry/","text":"Crystal (scry) https://github.com/crystal-lang-tools/scry Crystal language server. Setup require 'lspconfig' . scry . setup {} Default Values cmd = { \"scry\" } filetypes = { \"crystal\" } root_dir = root_pattern ( 'shard.yml' , '.git' ) or dirname","title":"Crystal (scry)"},{"location":"lsp/scry/#crystal-scry","text":"https://github.com/crystal-lang-tools/scry Crystal language server.","title":"Crystal (scry)"},{"location":"lsp/scry/#setup","text":"require 'lspconfig' . scry . setup {}","title":"Setup"},{"location":"lsp/scry/#default-values","text":"cmd = { \"scry\" } filetypes = { \"crystal\" } root_dir = root_pattern ( 'shard.yml' , '.git' ) or dirname","title":"Default Values"},{"location":"lsp/solargraph/","text":"Ruby (solargraph) https://solargraph.org/ solargraph, a language server for Ruby You can install solargraph via gem install. gem install --user-install solargraph Setup require 'lspconfig' . solargraph . setup {} Default Values cmd = { \"solargraph\" , \"stdio\" } filetypes = { \"ruby\" } root_dir = root_pattern ( \"Gemfile\" , \".git\" ) settings = { solargraph = { diagnostics = true } } This server accepts configuration via the settings key. Available settings solargraph.autoformat enum { true, false } Enable automatic formatting while typing (WARNING\\: experimental) solargraph.bundlerPath Type: string Default: \"bundle\" Path to the bundle executable\\, defaults to \\'bundle\\'. Needs to be an absolute path for the \\'bundle\\' exec\\/shim solargraph.checkGemVersion enum { true, false } Default: true Automatically check if a new version of the Solargraph gem is available. solargraph.commandPath Type: string Default: \"solargraph\" Path to the solargraph command. Set this to an absolute path to select from multiple installed Ruby versions. solargraph.completion enum { true, false } Default: true Enable completion solargraph.definitions enum { true, false } Default: true Enable definitions (go to\\, etc.) solargraph.diagnostics enum { true, false } Enable diagnostics solargraph.externalServer Type: object Default: {host = \"localhost\",port = 7658} The host and port to use for external transports. (Ignored for stdio and socket transports.) solargraph.folding Type: boolean Default: true Enable folding ranges solargraph.formatting enum { true, false } Enable document formatting solargraph.hover enum { true, false } Default: true Enable hover solargraph.logLevel enum { \"warn\", \"info\", \"debug\" } Default: \"warn\" Level of debug info to log. `warn` is least and `debug` is most. solargraph.references enum { true, false } Default: true Enable finding references solargraph.rename enum { true, false } Default: true Enable symbol renaming solargraph.symbols enum { true, false } Default: true Enable symbols solargraph.transport enum { \"socket\", \"stdio\", \"external\" } Default: \"socket\" The type of transport to use. solargraph.useBundler Type: boolean Use `bundle exec` to run solargraph. (If this is true\\, the solargraph.commandPath setting is ignored.)","title":"Ruby (solargraph)"},{"location":"lsp/solargraph/#ruby-solargraph","text":"https://solargraph.org/ solargraph, a language server for Ruby You can install solargraph via gem install. gem install --user-install solargraph","title":"Ruby (solargraph)"},{"location":"lsp/solargraph/#setup","text":"require 'lspconfig' . solargraph . setup {}","title":"Setup"},{"location":"lsp/solargraph/#default-values","text":"cmd = { \"solargraph\" , \"stdio\" } filetypes = { \"ruby\" } root_dir = root_pattern ( \"Gemfile\" , \".git\" ) settings = { solargraph = { diagnostics = true } } This server accepts configuration via the settings key.","title":"Default Values"},{"location":"lsp/solargraph/#available-settings","text":"","title":"Available settings"},{"location":"lsp/solargraph/#solargraphautoformat","text":"enum { true, false } Enable automatic formatting while typing (WARNING\\: experimental)","title":"solargraph.autoformat"},{"location":"lsp/solargraph/#solargraphbundlerpath","text":"Type: string Default: \"bundle\" Path to the bundle executable\\, defaults to \\'bundle\\'. Needs to be an absolute path for the \\'bundle\\' exec\\/shim","title":"solargraph.bundlerPath"},{"location":"lsp/solargraph/#solargraphcheckgemversion","text":"enum { true, false } Default: true Automatically check if a new version of the Solargraph gem is available.","title":"solargraph.checkGemVersion"},{"location":"lsp/solargraph/#solargraphcommandpath","text":"Type: string Default: \"solargraph\" Path to the solargraph command. Set this to an absolute path to select from multiple installed Ruby versions.","title":"solargraph.commandPath"},{"location":"lsp/solargraph/#solargraphcompletion","text":"enum { true, false } Default: true Enable completion","title":"solargraph.completion"},{"location":"lsp/solargraph/#solargraphdefinitions","text":"enum { true, false } Default: true Enable definitions (go to\\, etc.)","title":"solargraph.definitions"},{"location":"lsp/solargraph/#solargraphdiagnostics","text":"enum { true, false } Enable diagnostics","title":"solargraph.diagnostics"},{"location":"lsp/solargraph/#solargraphexternalserver","text":"Type: object Default: {host = \"localhost\",port = 7658} The host and port to use for external transports. (Ignored for stdio and socket transports.)","title":"solargraph.externalServer"},{"location":"lsp/solargraph/#solargraphfolding","text":"Type: boolean Default: true Enable folding ranges","title":"solargraph.folding"},{"location":"lsp/solargraph/#solargraphformatting","text":"enum { true, false } Enable document formatting","title":"solargraph.formatting"},{"location":"lsp/solargraph/#solargraphhover","text":"enum { true, false } Default: true Enable hover","title":"solargraph.hover"},{"location":"lsp/solargraph/#solargraphloglevel","text":"enum { \"warn\", \"info\", \"debug\" } Default: \"warn\" Level of debug info to log. `warn` is least and `debug` is most.","title":"solargraph.logLevel"},{"location":"lsp/solargraph/#solargraphreferences","text":"enum { true, false } Default: true Enable finding references","title":"solargraph.references"},{"location":"lsp/solargraph/#solargraphrename","text":"enum { true, false } Default: true Enable symbol renaming","title":"solargraph.rename"},{"location":"lsp/solargraph/#solargraphsymbols","text":"enum { true, false } Default: true Enable symbols","title":"solargraph.symbols"},{"location":"lsp/solargraph/#solargraphtransport","text":"enum { \"socket\", \"stdio\", \"external\" } Default: \"socket\" The type of transport to use.","title":"solargraph.transport"},{"location":"lsp/solargraph/#solargraphusebundler","text":"Type: boolean Use `bundle exec` to run solargraph. (If this is true\\, the solargraph.commandPath setting is ignored.)","title":"solargraph.useBundler"},{"location":"lsp/sorbet/","text":"Ruby (sorbet) https://sorbet.org Sorbet is a fast, powerful type checker designed for Ruby. You can install Sorbet via gem install. You might also be interested in how to set Sorbet up for new projects: https://sorbet.org/docs/adopting . gem install sorbet Setup require 'lspconfig' . sorbet . setup {} Default Values cmd = { \"srb\" , \"tc\" , \"--lsp\" } filetypes = { \"ruby\" } root_dir = root_pattern ( \"Gemfile\" , \".git\" )","title":"Ruby (sorbet)"},{"location":"lsp/sorbet/#ruby-sorbet","text":"https://sorbet.org Sorbet is a fast, powerful type checker designed for Ruby. You can install Sorbet via gem install. You might also be interested in how to set Sorbet up for new projects: https://sorbet.org/docs/adopting . gem install sorbet","title":"Ruby (sorbet)"},{"location":"lsp/sorbet/#setup","text":"require 'lspconfig' . sorbet . setup {}","title":"Setup"},{"location":"lsp/sorbet/#default-values","text":"cmd = { \"srb\" , \"tc\" , \"--lsp\" } filetypes = { \"ruby\" } root_dir = root_pattern ( \"Gemfile\" , \".git\" )","title":"Default Values"},{"location":"lsp/sourcekit/","text":"C like (sourcekit) https://github.com/apple/sourcekit-lsp Language server for Swift and C/C++/Objective-C. Setup require 'lspconfig' . sourcekit . setup {} Default Values cmd = { \"xcrun\" , \"sourcekit-lsp\" } filetypes = { \"swift\" , \"c\" , \"cpp\" , \"objective-c\" , \"objective-cpp\" } root_dir = root_pattern ( \"Package.swift\" , \".git\" ) This server accepts configuration via the settings key. Available settings sourcekit-lsp.inlayHints.enabled Type: boolean (experimental) Render inlay type annotations in the editor. sourcekit-lsp.serverArguments Type: array Default: {} Array items: {type = \"string\"} Arguments to pass to sourcekit-lsp. Argument keys and values should be provided as separate entries in the array e.g. [\\'--log-level\\'\\, \\'debug\\'] sourcekit-lsp.serverPath Type: string Default: \"sourcekit-lsp\" The path of the sourcekit-lsp executable sourcekit-lsp.toolchainPath Type: string Default: \"\" (optional) The path of the swift toolchain. By default\\, sourcekit-lsp uses the toolchain it is installed in. sourcekit-lsp.trace.server enum { \"off\", \"messages\", \"verbose\" } Default: \"off\" Traces the communication between VS Code and the SourceKit-LSP language server.","title":"C like (sourcekit)"},{"location":"lsp/sourcekit/#c-like-sourcekit","text":"https://github.com/apple/sourcekit-lsp Language server for Swift and C/C++/Objective-C.","title":"C like (sourcekit)"},{"location":"lsp/sourcekit/#setup","text":"require 'lspconfig' . sourcekit . setup {}","title":"Setup"},{"location":"lsp/sourcekit/#default-values","text":"cmd = { \"xcrun\" , \"sourcekit-lsp\" } filetypes = { \"swift\" , \"c\" , \"cpp\" , \"objective-c\" , \"objective-cpp\" } root_dir = root_pattern ( \"Package.swift\" , \".git\" ) This server accepts configuration via the settings key.","title":"Default Values"},{"location":"lsp/sourcekit/#available-settings","text":"","title":"Available settings"},{"location":"lsp/sourcekit/#sourcekit-lspinlayhintsenabled","text":"Type: boolean (experimental) Render inlay type annotations in the editor.","title":"sourcekit-lsp.inlayHints.enabled"},{"location":"lsp/sourcekit/#sourcekit-lspserverarguments","text":"Type: array Default: {} Array items: {type = \"string\"} Arguments to pass to sourcekit-lsp. Argument keys and values should be provided as separate entries in the array e.g. [\\'--log-level\\'\\, \\'debug\\']","title":"sourcekit-lsp.serverArguments"},{"location":"lsp/sourcekit/#sourcekit-lspserverpath","text":"Type: string Default: \"sourcekit-lsp\" The path of the sourcekit-lsp executable","title":"sourcekit-lsp.serverPath"},{"location":"lsp/sourcekit/#sourcekit-lsptoolchainpath","text":"Type: string Default: \"\" (optional) The path of the swift toolchain. By default\\, sourcekit-lsp uses the toolchain it is installed in.","title":"sourcekit-lsp.toolchainPath"},{"location":"lsp/sourcekit/#sourcekit-lsptraceserver","text":"enum { \"off\", \"messages\", \"verbose\" } Default: \"off\" Traces the communication between VS Code and the SourceKit-LSP language server.","title":"sourcekit-lsp.trace.server"},{"location":"lsp/sqlls/","text":"SQL (sqlls) https://github.com/joe-re/sql-language-server cmd value is not set by default. The cmd value can be overriden in the setup table; require 'lspconfig' . sqlls . setup { cmd = { \"path/to/command\" , \"up\" , \"--method\" , \"stdio\" }; ... } This LSP can be installed via npm . Find further instructions on manual installation of the sql-language-server at joe-re/sql-language-server . Setup require 'lspconfig' . sqlls . setup {} Default Values filetypes = { \"sql\" , \"mysql\" } root_dir = function ( fname ) return root_pattern ( fname ) or vim . loop . os_homedir () end , settings = {}","title":"SQL (sqlls)"},{"location":"lsp/sqlls/#sql-sqlls","text":"https://github.com/joe-re/sql-language-server cmd value is not set by default. The cmd value can be overriden in the setup table; require 'lspconfig' . sqlls . setup { cmd = { \"path/to/command\" , \"up\" , \"--method\" , \"stdio\" }; ... } This LSP can be installed via npm . Find further instructions on manual installation of the sql-language-server at joe-re/sql-language-server .","title":"SQL (sqlls)"},{"location":"lsp/sqlls/#setup","text":"require 'lspconfig' . sqlls . setup {}","title":"Setup"},{"location":"lsp/sqlls/#default-values","text":"filetypes = { \"sql\" , \"mysql\" } root_dir = function ( fname ) return root_pattern ( fname ) or vim . loop . os_homedir () end , settings = {}","title":"Default Values"},{"location":"lsp/sqls/","text":"SQL (sqls) https://github.com/lighttiger2505/sqls require 'lspconfig' . sqls . setup { cmd = { \"path/to/command\" , \"-config\" \"path/to/config.yml\" }; ... } Sqls can be installed via go get github.com/lighttiger2505/sqls . Instructions for compiling Sqls from the source can be found at lighttiger2505/sqls . Setup require 'lspconfig' . sqls . setup {} Default Values cmd = { \"sqls\" } filetypes = { \"sql\" , \"mysql\" } root_dir = function ( fname ) return util . root_pattern \"config.yml\" ( fname ) or util . path . dirname ( fname ) end , settings = {}","title":"SQL (sqls)"},{"location":"lsp/sqls/#sql-sqls","text":"https://github.com/lighttiger2505/sqls require 'lspconfig' . sqls . setup { cmd = { \"path/to/command\" , \"-config\" \"path/to/config.yml\" }; ... } Sqls can be installed via go get github.com/lighttiger2505/sqls . Instructions for compiling Sqls from the source can be found at lighttiger2505/sqls .","title":"SQL (sqls)"},{"location":"lsp/sqls/#setup","text":"require 'lspconfig' . sqls . setup {}","title":"Setup"},{"location":"lsp/sqls/#default-values","text":"cmd = { \"sqls\" } filetypes = { \"sql\" , \"mysql\" } root_dir = function ( fname ) return util . root_pattern \"config.yml\" ( fname ) or util . path . dirname ( fname ) end , settings = {}","title":"Default Values"},{"location":"lsp/stylelint_lsp/","text":"Stylelint (stylelint_lsp) https://github.com/bmatcuk/stylelint-lsp stylelint-lsp can be installed via npm : npm i -g stylelint-lsp Can be configured by passing a settings.stylelintplus object to stylelint_lsp.setup : require 'lspconfig' . stylelint_lsp . setup { settings = { stylelintplus = { -- see available options in stylelint-lsp documentation } } } Setup require 'lspconfig' . stylelint_lsp . setup {} Default Values cmd = { \"stylelint-lsp\" , \"--stdio\" } filetypes = { \"css\" , \"less\" , \"scss\" , \"sugarss\" , \"vue\" , \"wxss\" , \"javascript\" , \"javascriptreact\" , \"typescript\" , \"typescriptreact\" } root_dir = root_pattern ( '.stylelintrc' , 'package.json' ) settings = {} This server accepts configuration via the settings key. Available settings stylelintplus.autoFixOnFormat Type: boolean Auto-fix on format request. stylelintplus.autoFixOnSave Type: boolean Auto-fix and format on save. stylelintplus.config Type: object Default: vim.NIL Stylelint config. If config and configFile are unset\\, stylelint will automatically look for a config file. stylelintplus.configFile Type: string Default: vim.NIL Stylelint config file. If config and configFile are unset\\, stylelint will automatically look for a config file. stylelintplus.configOverrides Type: object Default: vim.NIL Stylelint config overrides. These will be applied on top of the config\\, configFile\\, or auto-discovered config file loaded by stylelint. stylelintplus.cssInJs Type: boolean Run stylelint on javascript\\/typescript files. stylelintplus.enable Type: boolean Default: true If false\\, stylelint will not validate the file. stylelintplus.filetypes Type: array Default: { \"css\", \"less\", \"postcss\", \"scss\", \"sugarss\", \"vue\", \"wxss\" } Array items: {type = \"string\"} Filetypes that coc-stylelintplus will lint. stylelintplus.trace.server enum { \"off\", \"messages\", \"verbose\" } Default: \"off\" Capture trace messages from the server. stylelintplus.validateOnSave Type: boolean Validate after saving. Automatically enabled if autoFixOnSave is enabled. stylelintplus.validateOnType Type: boolean Default: true Validate after making changes.","title":"Stylelint (stylelint_lsp)"},{"location":"lsp/stylelint_lsp/#stylelint-stylelint_lsp","text":"https://github.com/bmatcuk/stylelint-lsp stylelint-lsp can be installed via npm : npm i -g stylelint-lsp Can be configured by passing a settings.stylelintplus object to stylelint_lsp.setup : require 'lspconfig' . stylelint_lsp . setup { settings = { stylelintplus = { -- see available options in stylelint-lsp documentation } } }","title":"Stylelint (stylelint_lsp)"},{"location":"lsp/stylelint_lsp/#setup","text":"require 'lspconfig' . stylelint_lsp . setup {}","title":"Setup"},{"location":"lsp/stylelint_lsp/#default-values","text":"cmd = { \"stylelint-lsp\" , \"--stdio\" } filetypes = { \"css\" , \"less\" , \"scss\" , \"sugarss\" , \"vue\" , \"wxss\" , \"javascript\" , \"javascriptreact\" , \"typescript\" , \"typescriptreact\" } root_dir = root_pattern ( '.stylelintrc' , 'package.json' ) settings = {} This server accepts configuration via the settings key.","title":"Default Values"},{"location":"lsp/stylelint_lsp/#available-settings","text":"","title":"Available settings"},{"location":"lsp/stylelint_lsp/#stylelintplusautofixonformat","text":"Type: boolean Auto-fix on format request.","title":"stylelintplus.autoFixOnFormat"},{"location":"lsp/stylelint_lsp/#stylelintplusautofixonsave","text":"Type: boolean Auto-fix and format on save.","title":"stylelintplus.autoFixOnSave"},{"location":"lsp/stylelint_lsp/#stylelintplusconfig","text":"Type: object Default: vim.NIL Stylelint config. If config and configFile are unset\\, stylelint will automatically look for a config file.","title":"stylelintplus.config"},{"location":"lsp/stylelint_lsp/#stylelintplusconfigfile","text":"Type: string Default: vim.NIL Stylelint config file. If config and configFile are unset\\, stylelint will automatically look for a config file.","title":"stylelintplus.configFile"},{"location":"lsp/stylelint_lsp/#stylelintplusconfigoverrides","text":"Type: object Default: vim.NIL Stylelint config overrides. These will be applied on top of the config\\, configFile\\, or auto-discovered config file loaded by stylelint.","title":"stylelintplus.configOverrides"},{"location":"lsp/stylelint_lsp/#stylelintpluscssinjs","text":"Type: boolean Run stylelint on javascript\\/typescript files.","title":"stylelintplus.cssInJs"},{"location":"lsp/stylelint_lsp/#stylelintplusenable","text":"Type: boolean Default: true If false\\, stylelint will not validate the file.","title":"stylelintplus.enable"},{"location":"lsp/stylelint_lsp/#stylelintplusfiletypes","text":"Type: array Default: { \"css\", \"less\", \"postcss\", \"scss\", \"sugarss\", \"vue\", \"wxss\" } Array items: {type = \"string\"} Filetypes that coc-stylelintplus will lint.","title":"stylelintplus.filetypes"},{"location":"lsp/stylelint_lsp/#stylelintplustraceserver","text":"enum { \"off\", \"messages\", \"verbose\" } Default: \"off\" Capture trace messages from the server.","title":"stylelintplus.trace.server"},{"location":"lsp/stylelint_lsp/#stylelintplusvalidateonsave","text":"Type: boolean Validate after saving. Automatically enabled if autoFixOnSave is enabled.","title":"stylelintplus.validateOnSave"},{"location":"lsp/stylelint_lsp/#stylelintplusvalidateontype","text":"Type: boolean Default: true Validate after making changes.","title":"stylelintplus.validateOnType"},{"location":"lsp/sumneko_lua/","text":"Lua (sumneko_lua) https://github.com/sumneko/lua-language-server Lua language server. lua-language-server can be installed by following the instructions here . By default, lua-language-server doesn't have a cmd set. This is because nvim-lspconfig does not make assumptions about your path. You must add the following to your init.vim or init.lua to set cmd to the absolute path ($HOME and ~ are not expanded) of your unzipped and compiled lua-language-server. local system_name if vim . fn . has ( \"mac\" ) == 1 then system_name = \"macOS\" elseif vim . fn . has ( \"unix\" ) == 1 then system_name = \"Linux\" elseif vim . fn . has ( 'win32' ) == 1 then system_name = \"Windows\" else print ( \"Unsupported system for sumneko\" ) end -- set the path to the sumneko installation; if you previously installed via the now deprecated :LspInstall, use local sumneko_root_path = vim . fn . stdpath ( 'cache' ) .. '/lspconfig/sumneko_lua/lua-language-server' local sumneko_binary = sumneko_root_path .. \"/bin/\" .. system_name .. \"/lua-language-server\" local runtime_path = vim . split ( package.path , ';' ) table.insert ( runtime_path , \"lua/?.lua\" ) table.insert ( runtime_path , \"lua/?/init.lua\" ) require 'lspconfig' . sumneko_lua . setup { cmd = { sumneko_binary , \"-E\" , sumneko_root_path .. \"/main.lua\" }; settings = { Lua = { runtime = { -- Tell the language server which version of Lua you're using (most likely LuaJIT in the case of Neovim) version = 'LuaJIT' , -- Setup your lua path path = runtime_path , }, diagnostics = { -- Get the language server to recognize the `vim` global globals = { 'vim' }, }, workspace = { -- Make the server aware of Neovim runtime files library = vim . api . nvim_get_runtime_file ( \"\" , true ), }, -- Do not send telemetry data containing a randomized but unique identifier telemetry = { enable = false , }, }, }, } Setup require 'lspconfig' . sumneko_lua . setup {} Default Values filetypes = { \"lua\" } log_level = 2 root_dir = root_pattern ( \".git\" ) or bufdir settings = { Lua = { telemetry = { enable = false } } } This server accepts configuration via the settings key. Available settings Lua.color.mode enum { \"Grammar\", \"Semantic\" } Default: \"Semantic\" null Lua.completion.autoRequire Type: boolean Default: true null Lua.completion.callSnippet enum { \"Disable\", \"Both\", \"Replace\" } Default: \"Disable\" null Lua.completion.displayContext Type: integer Default: 6 null Lua.completion.enable Type: boolean Default: true null Lua.completion.keywordSnippet enum { \"Disable\", \"Both\", \"Replace\" } Default: \"Replace\" null Lua.completion.showParams Type: boolean Default: true null Lua.completion.workspaceWord Type: boolean Default: true null Lua.diagnostics.disable Type: array Array items: {type = \"string\"} null Lua.diagnostics.enable Type: boolean Default: true null Lua.diagnostics.globals Type: array Array items: {type = \"string\"} null Lua.diagnostics.neededFileStatus Type: object null Lua.diagnostics.severity Type: object null Lua.diagnostics.workspaceDelay Type: integer Default: 0 null Lua.diagnostics.workspaceRate Type: integer Default: 100 null Lua.hint.enable Type: boolean null Lua.hint.paramName Type: boolean Default: true null Lua.hint.paramType Type: boolean Default: true null Lua.hint.setType Type: boolean null Lua.hover.enable Type: boolean Default: true null Lua.hover.enumsLimit Type: integer Default: 5 null Lua.hover.previewFields Type: integer Default: 20 null Lua.hover.viewNumber Type: boolean Default: true null Lua.hover.viewString Type: boolean Default: true null Lua.hover.viewStringMax Type: integer Default: 1000 null Lua.misc.parameters Type: array Array items: {type = \"string\"} null Lua.runtime.builtin Type: object null Lua.runtime.fileEncoding enum { \"utf8\", \"ansi\" } Default: \"utf8\" null Lua.runtime.nonstandardSymbol Type: array Array items: {enum = { \"//\", \"/**/\", \" \", \"+=\", \"-=\", \"*=\", \"/=\", \"||\", \"&&\", \"!\", \"!=\", \"continue\" },type = \"string\"}` null Lua.runtime.path Type: array Default: { \"?.lua\", \"?/init.lua\", \"?/?.lua\" } Array items: {type = \"string\"} null Lua.runtime.plugin Type: string Default: \"\" null Lua.runtime.special Type: object null Lua.runtime.unicodeName Type: boolean null Lua.runtime.version enum { \"Lua 5.1\", \"Lua 5.2\", \"Lua 5.3\", \"Lua 5.4\", \"LuaJIT\" } Default: \"Lua 5.4\" null Lua.signatureHelp.enable Type: boolean Default: true null Lua.telemetry.enable Type: boolean|null Default: vim.NIL null Lua.window.progressBar Type: boolean Default: true null Lua.window.statusBar Type: boolean Default: true null Lua.workspace.ignoreDir Type: array Default: { \".vscode\" } Array items: {type = \"string\"} null Lua.workspace.ignoreSubmodules Type: boolean Default: true null Lua.workspace.library Type: array Array items: {type = \"string\"} null Lua.workspace.maxPreload Type: integer Default: 1000 null Lua.workspace.preloadFileSize Type: integer Default: 100 null Lua.workspace.useGitIgnore Type: boolean Default: true null","title":"Lua (sumneko_lua)"},{"location":"lsp/sumneko_lua/#lua-sumneko_lua","text":"https://github.com/sumneko/lua-language-server Lua language server. lua-language-server can be installed by following the instructions here . By default, lua-language-server doesn't have a cmd set. This is because nvim-lspconfig does not make assumptions about your path. You must add the following to your init.vim or init.lua to set cmd to the absolute path ($HOME and ~ are not expanded) of your unzipped and compiled lua-language-server. local system_name if vim . fn . has ( \"mac\" ) == 1 then system_name = \"macOS\" elseif vim . fn . has ( \"unix\" ) == 1 then system_name = \"Linux\" elseif vim . fn . has ( 'win32' ) == 1 then system_name = \"Windows\" else print ( \"Unsupported system for sumneko\" ) end -- set the path to the sumneko installation; if you previously installed via the now deprecated :LspInstall, use local sumneko_root_path = vim . fn . stdpath ( 'cache' ) .. '/lspconfig/sumneko_lua/lua-language-server' local sumneko_binary = sumneko_root_path .. \"/bin/\" .. system_name .. \"/lua-language-server\" local runtime_path = vim . split ( package.path , ';' ) table.insert ( runtime_path , \"lua/?.lua\" ) table.insert ( runtime_path , \"lua/?/init.lua\" ) require 'lspconfig' . sumneko_lua . setup { cmd = { sumneko_binary , \"-E\" , sumneko_root_path .. \"/main.lua\" }; settings = { Lua = { runtime = { -- Tell the language server which version of Lua you're using (most likely LuaJIT in the case of Neovim) version = 'LuaJIT' , -- Setup your lua path path = runtime_path , }, diagnostics = { -- Get the language server to recognize the `vim` global globals = { 'vim' }, }, workspace = { -- Make the server aware of Neovim runtime files library = vim . api . nvim_get_runtime_file ( \"\" , true ), }, -- Do not send telemetry data containing a randomized but unique identifier telemetry = { enable = false , }, }, }, }","title":"Lua (sumneko_lua)"},{"location":"lsp/sumneko_lua/#setup","text":"require 'lspconfig' . sumneko_lua . setup {}","title":"Setup"},{"location":"lsp/sumneko_lua/#default-values","text":"filetypes = { \"lua\" } log_level = 2 root_dir = root_pattern ( \".git\" ) or bufdir settings = { Lua = { telemetry = { enable = false } } } This server accepts configuration via the settings key.","title":"Default Values"},{"location":"lsp/sumneko_lua/#available-settings","text":"","title":"Available settings"},{"location":"lsp/sumneko_lua/#luacolormode","text":"enum { \"Grammar\", \"Semantic\" } Default: \"Semantic\" null","title":"Lua.color.mode"},{"location":"lsp/sumneko_lua/#luacompletionautorequire","text":"Type: boolean Default: true null","title":"Lua.completion.autoRequire"},{"location":"lsp/sumneko_lua/#luacompletioncallsnippet","text":"enum { \"Disable\", \"Both\", \"Replace\" } Default: \"Disable\" null","title":"Lua.completion.callSnippet"},{"location":"lsp/sumneko_lua/#luacompletiondisplaycontext","text":"Type: integer Default: 6 null","title":"Lua.completion.displayContext"},{"location":"lsp/sumneko_lua/#luacompletionenable","text":"Type: boolean Default: true null","title":"Lua.completion.enable"},{"location":"lsp/sumneko_lua/#luacompletionkeywordsnippet","text":"enum { \"Disable\", \"Both\", \"Replace\" } Default: \"Replace\" null","title":"Lua.completion.keywordSnippet"},{"location":"lsp/sumneko_lua/#luacompletionshowparams","text":"Type: boolean Default: true null","title":"Lua.completion.showParams"},{"location":"lsp/sumneko_lua/#luacompletionworkspaceword","text":"Type: boolean Default: true null","title":"Lua.completion.workspaceWord"},{"location":"lsp/sumneko_lua/#luadiagnosticsdisable","text":"Type: array Array items: {type = \"string\"} null","title":"Lua.diagnostics.disable"},{"location":"lsp/sumneko_lua/#luadiagnosticsenable","text":"Type: boolean Default: true null","title":"Lua.diagnostics.enable"},{"location":"lsp/sumneko_lua/#luadiagnosticsglobals","text":"Type: array Array items: {type = \"string\"} null","title":"Lua.diagnostics.globals"},{"location":"lsp/sumneko_lua/#luadiagnosticsneededfilestatus","text":"Type: object null","title":"Lua.diagnostics.neededFileStatus"},{"location":"lsp/sumneko_lua/#luadiagnosticsseverity","text":"Type: object null","title":"Lua.diagnostics.severity"},{"location":"lsp/sumneko_lua/#luadiagnosticsworkspacedelay","text":"Type: integer Default: 0 null","title":"Lua.diagnostics.workspaceDelay"},{"location":"lsp/sumneko_lua/#luadiagnosticsworkspacerate","text":"Type: integer Default: 100 null","title":"Lua.diagnostics.workspaceRate"},{"location":"lsp/sumneko_lua/#luahintenable","text":"Type: boolean null","title":"Lua.hint.enable"},{"location":"lsp/sumneko_lua/#luahintparamname","text":"Type: boolean Default: true null","title":"Lua.hint.paramName"},{"location":"lsp/sumneko_lua/#luahintparamtype","text":"Type: boolean Default: true null","title":"Lua.hint.paramType"},{"location":"lsp/sumneko_lua/#luahintsettype","text":"Type: boolean null","title":"Lua.hint.setType"},{"location":"lsp/sumneko_lua/#luahoverenable","text":"Type: boolean Default: true null","title":"Lua.hover.enable"},{"location":"lsp/sumneko_lua/#luahoverenumslimit","text":"Type: integer Default: 5 null","title":"Lua.hover.enumsLimit"},{"location":"lsp/sumneko_lua/#luahoverpreviewfields","text":"Type: integer Default: 20 null","title":"Lua.hover.previewFields"},{"location":"lsp/sumneko_lua/#luahoverviewnumber","text":"Type: boolean Default: true null","title":"Lua.hover.viewNumber"},{"location":"lsp/sumneko_lua/#luahoverviewstring","text":"Type: boolean Default: true null","title":"Lua.hover.viewString"},{"location":"lsp/sumneko_lua/#luahoverviewstringmax","text":"Type: integer Default: 1000 null","title":"Lua.hover.viewStringMax"},{"location":"lsp/sumneko_lua/#luamiscparameters","text":"Type: array Array items: {type = \"string\"} null","title":"Lua.misc.parameters"},{"location":"lsp/sumneko_lua/#luaruntimebuiltin","text":"Type: object null","title":"Lua.runtime.builtin"},{"location":"lsp/sumneko_lua/#luaruntimefileencoding","text":"enum { \"utf8\", \"ansi\" } Default: \"utf8\" null","title":"Lua.runtime.fileEncoding"},{"location":"lsp/sumneko_lua/#luaruntimenonstandardsymbol","text":"Type: array Array items: {enum = { \"//\", \"/**/\", \" \", \"+=\", \"-=\", \"*=\", \"/=\", \"||\", \"&&\", \"!\", \"!=\", \"continue\" },type = \"string\"}` null","title":"Lua.runtime.nonstandardSymbol"},{"location":"lsp/sumneko_lua/#luaruntimepath","text":"Type: array Default: { \"?.lua\", \"?/init.lua\", \"?/?.lua\" } Array items: {type = \"string\"} null","title":"Lua.runtime.path"},{"location":"lsp/sumneko_lua/#luaruntimeplugin","text":"Type: string Default: \"\" null","title":"Lua.runtime.plugin"},{"location":"lsp/sumneko_lua/#luaruntimespecial","text":"Type: object null","title":"Lua.runtime.special"},{"location":"lsp/sumneko_lua/#luaruntimeunicodename","text":"Type: boolean null","title":"Lua.runtime.unicodeName"},{"location":"lsp/sumneko_lua/#luaruntimeversion","text":"enum { \"Lua 5.1\", \"Lua 5.2\", \"Lua 5.3\", \"Lua 5.4\", \"LuaJIT\" } Default: \"Lua 5.4\" null","title":"Lua.runtime.version"},{"location":"lsp/sumneko_lua/#luasignaturehelpenable","text":"Type: boolean Default: true null","title":"Lua.signatureHelp.enable"},{"location":"lsp/sumneko_lua/#luatelemetryenable","text":"Type: boolean|null Default: vim.NIL null","title":"Lua.telemetry.enable"},{"location":"lsp/sumneko_lua/#luawindowprogressbar","text":"Type: boolean Default: true null","title":"Lua.window.progressBar"},{"location":"lsp/sumneko_lua/#luawindowstatusbar","text":"Type: boolean Default: true null","title":"Lua.window.statusBar"},{"location":"lsp/sumneko_lua/#luaworkspaceignoredir","text":"Type: array Default: { \".vscode\" } Array items: {type = \"string\"} null","title":"Lua.workspace.ignoreDir"},{"location":"lsp/sumneko_lua/#luaworkspaceignoresubmodules","text":"Type: boolean Default: true null","title":"Lua.workspace.ignoreSubmodules"},{"location":"lsp/sumneko_lua/#luaworkspacelibrary","text":"Type: array Array items: {type = \"string\"} null","title":"Lua.workspace.library"},{"location":"lsp/sumneko_lua/#luaworkspacemaxpreload","text":"Type: integer Default: 1000 null","title":"Lua.workspace.maxPreload"},{"location":"lsp/sumneko_lua/#luaworkspacepreloadfilesize","text":"Type: integer Default: 100 null","title":"Lua.workspace.preloadFileSize"},{"location":"lsp/sumneko_lua/#luaworkspaceusegitignore","text":"Type: boolean Default: true null","title":"Lua.workspace.useGitIgnore"},{"location":"lsp/svelte/","text":"Svelte (svelte) https://github.com/sveltejs/language-tools/tree/master/packages/language-server svelte-language-server can be installed via npm : npm install -g svelte-language-server Setup require 'lspconfig' . svelte . setup {} Default Values cmd = { \"svelteserver\" , \"--stdio\" } filetypes = { \"svelte\" } root_dir = root_pattern ( \"package.json\" , \".git\" )","title":"Svelte (svelte)"},{"location":"lsp/svelte/#svelte-svelte","text":"https://github.com/sveltejs/language-tools/tree/master/packages/language-server svelte-language-server can be installed via npm : npm install -g svelte-language-server","title":"Svelte (svelte)"},{"location":"lsp/svelte/#setup","text":"require 'lspconfig' . svelte . setup {}","title":"Setup"},{"location":"lsp/svelte/#default-values","text":"cmd = { \"svelteserver\" , \"--stdio\" } filetypes = { \"svelte\" } root_dir = root_pattern ( \"package.json\" , \".git\" )","title":"Default Values"},{"location":"lsp/svls/","text":"Verilog (svls) https://github.com/dalance/svls Language server for verilog and SystemVerilog Setup require 'lspconfig' . svls . setup {} Default Values cmd = { \"svls\" } filetypes = { \"verilog\" , \"systemverilog\" } root_dir = function ( startpath ) return M . search_ancestors ( startpath , matcher ) end","title":"Verilog (svls)"},{"location":"lsp/svls/#verilog-svls","text":"https://github.com/dalance/svls Language server for verilog and SystemVerilog","title":"Verilog (svls)"},{"location":"lsp/svls/#setup","text":"require 'lspconfig' . svls . setup {}","title":"Setup"},{"location":"lsp/svls/#default-values","text":"cmd = { \"svls\" } filetypes = { \"verilog\" , \"systemverilog\" } root_dir = function ( startpath ) return M . search_ancestors ( startpath , matcher ) end","title":"Default Values"},{"location":"lsp/tailwindcss/","text":"Tailwind (tailwindcss) https://github.com/tailwindlabs/tailwindcss-intellisense Tailwind CSS Language Server NOTE: The current tailwindcss-language-server npm package is a different project. Until the standalone server is published to npm, you can extract the server from the VS Code package: curl -L -o tailwindcss-intellisense.vsix https://github.com/tailwindlabs/tailwindcss-intellisense/releases/download/v0.6.8/vscode-tailwindcss-0.6.8.vsix unzip tailwindcss-intellisense.vsix -d tailwindcss-intellisense echo \"#\\!/usr/bin/env node\\n $( cat tailwindcss-intellisense/extension/dist/server/tailwindServer.js ) \" > tailwindcss-language-server chmod +x tailwindcss-language-server Copy or symlink tailwindcss-language-server to somewhere in your $PATH. Alternatively, it might be packaged for your operating system, eg.: https://aur.archlinux.org/packages/tailwindcss-language-server/ Setup require 'lspconfig' . tailwindcss . setup {} Default Values cmd = { \"tailwindcss-language-server\" , \"--stdio\" } filetypes = { \"aspnetcorerazor\" , \"astro\" , \"astro-markdown\" , \"blade\" , \"django-html\" , \"edge\" , \"eelixir\" , \"ejs\" , \"erb\" , \"eruby\" , \"gohtml\" , \"haml\" , \"handlebars\" , \"hbs\" , \"html\" , \"html-eex\" , \"jade\" , \"leaf\" , \"liquid\" , \"markdown\" , \"mdx\" , \"mustache\" , \"njk\" , \"nunjucks\" , \"php\" , \"razor\" , \"slim\" , \"twig\" , \"css\" , \"less\" , \"postcss\" , \"sass\" , \"scss\" , \"stylus\" , \"sugarss\" , \"javascript\" , \"javascriptreact\" , \"reason\" , \"rescript\" , \"typescript\" , \"typescriptreact\" , \"vue\" , \"svelte\" } init_options = { userLanguages = { eelixir = \"html-eex\" , eruby = \"erb\" } } on_new_config = function ( new_config ) if not new_config . settings then new_config . settings = {} end if not new_config . settings . editor then new_config . settings . editor = {} end if not new_config . settings . editor . tabSize then -- set tab size for hover new_config . settings . editor . tabSize = vim . lsp . util . get_effective_tabstop () end end , root_dir = root_pattern ( 'tailwind.config.js' , 'tailwind.config.ts' , 'postcss.config.js' , 'postcss.config.ts' , 'package.json' , 'node_modules' , '.git' ) settings = { tailwindCSS = { lint = { cssConflict = \"warning\" , invalidApply = \"error\" , invalidConfigPath = \"error\" , invalidScreen = \"error\" , invalidTailwindDirective = \"error\" , invalidVariant = \"error\" , recommendedVariantOrder = \"warning\" }, validate = true } }","title":"Tailwind (tailwindcss)"},{"location":"lsp/tailwindcss/#tailwind-tailwindcss","text":"https://github.com/tailwindlabs/tailwindcss-intellisense Tailwind CSS Language Server NOTE: The current tailwindcss-language-server npm package is a different project. Until the standalone server is published to npm, you can extract the server from the VS Code package: curl -L -o tailwindcss-intellisense.vsix https://github.com/tailwindlabs/tailwindcss-intellisense/releases/download/v0.6.8/vscode-tailwindcss-0.6.8.vsix unzip tailwindcss-intellisense.vsix -d tailwindcss-intellisense echo \"#\\!/usr/bin/env node\\n $( cat tailwindcss-intellisense/extension/dist/server/tailwindServer.js ) \" > tailwindcss-language-server chmod +x tailwindcss-language-server Copy or symlink tailwindcss-language-server to somewhere in your $PATH. Alternatively, it might be packaged for your operating system, eg.: https://aur.archlinux.org/packages/tailwindcss-language-server/","title":"Tailwind (tailwindcss)"},{"location":"lsp/tailwindcss/#setup","text":"require 'lspconfig' . tailwindcss . setup {}","title":"Setup"},{"location":"lsp/tailwindcss/#default-values","text":"cmd = { \"tailwindcss-language-server\" , \"--stdio\" } filetypes = { \"aspnetcorerazor\" , \"astro\" , \"astro-markdown\" , \"blade\" , \"django-html\" , \"edge\" , \"eelixir\" , \"ejs\" , \"erb\" , \"eruby\" , \"gohtml\" , \"haml\" , \"handlebars\" , \"hbs\" , \"html\" , \"html-eex\" , \"jade\" , \"leaf\" , \"liquid\" , \"markdown\" , \"mdx\" , \"mustache\" , \"njk\" , \"nunjucks\" , \"php\" , \"razor\" , \"slim\" , \"twig\" , \"css\" , \"less\" , \"postcss\" , \"sass\" , \"scss\" , \"stylus\" , \"sugarss\" , \"javascript\" , \"javascriptreact\" , \"reason\" , \"rescript\" , \"typescript\" , \"typescriptreact\" , \"vue\" , \"svelte\" } init_options = { userLanguages = { eelixir = \"html-eex\" , eruby = \"erb\" } } on_new_config = function ( new_config ) if not new_config . settings then new_config . settings = {} end if not new_config . settings . editor then new_config . settings . editor = {} end if not new_config . settings . editor . tabSize then -- set tab size for hover new_config . settings . editor . tabSize = vim . lsp . util . get_effective_tabstop () end end , root_dir = root_pattern ( 'tailwind.config.js' , 'tailwind.config.ts' , 'postcss.config.js' , 'postcss.config.ts' , 'package.json' , 'node_modules' , '.git' ) settings = { tailwindCSS = { lint = { cssConflict = \"warning\" , invalidApply = \"error\" , invalidConfigPath = \"error\" , invalidScreen = \"error\" , invalidTailwindDirective = \"error\" , invalidVariant = \"error\" , recommendedVariantOrder = \"warning\" }, validate = true } }","title":"Default Values"},{"location":"lsp/terraformls/","text":"Terraform (terraformls) https://github.com/hashicorp/terraform-ls Terraform language server Download a released binary from https://github.com/hashicorp/terraform-ls/releases . Setup require 'lspconfig' . terraformls . setup {} Default Values cmd = { \"terraform-ls\" , \"serve\" } filetypes = { \"terraform\" } root_dir = root_pattern ( \".terraform\" , \".git\" ) This server accepts configuration via the settings key. Available settings terraform-ls.excludeRootModules Type: array Default: {} Array items: {type = \"string\"} Per-workspace list of module directories for the language server to exclude terraform-ls.experimentalFeatures Type: object Experimental (opt-in) terraform-ls features terraform-ls.rootModules Type: array Default: {} Array items: {type = \"string\"} Per-workspace list of module directories for the language server to read terraform.languageServer Type: object Default: {args = { \"serve\" },external = true,maxNumberOfProblems = 100,pathToBinary = \"\",[\"trace.server\"] = \"off\"} Language Server settings","title":"Terraform (terraformls)"},{"location":"lsp/terraformls/#terraform-terraformls","text":"https://github.com/hashicorp/terraform-ls Terraform language server Download a released binary from https://github.com/hashicorp/terraform-ls/releases .","title":"Terraform (terraformls)"},{"location":"lsp/terraformls/#setup","text":"require 'lspconfig' . terraformls . setup {}","title":"Setup"},{"location":"lsp/terraformls/#default-values","text":"cmd = { \"terraform-ls\" , \"serve\" } filetypes = { \"terraform\" } root_dir = root_pattern ( \".terraform\" , \".git\" ) This server accepts configuration via the settings key.","title":"Default Values"},{"location":"lsp/terraformls/#available-settings","text":"","title":"Available settings"},{"location":"lsp/terraformls/#terraform-lsexcluderootmodules","text":"Type: array Default: {} Array items: {type = \"string\"} Per-workspace list of module directories for the language server to exclude","title":"terraform-ls.excludeRootModules"},{"location":"lsp/terraformls/#terraform-lsexperimentalfeatures","text":"Type: object Experimental (opt-in) terraform-ls features","title":"terraform-ls.experimentalFeatures"},{"location":"lsp/terraformls/#terraform-lsrootmodules","text":"Type: array Default: {} Array items: {type = \"string\"} Per-workspace list of module directories for the language server to read","title":"terraform-ls.rootModules"},{"location":"lsp/terraformls/#terraformlanguageserver","text":"Type: object Default: {args = { \"serve\" },external = true,maxNumberOfProblems = 100,pathToBinary = \"\",[\"trace.server\"] = \"off\"} Language Server settings","title":"terraform.languageServer"},{"location":"lsp/texlab/","text":"TexLab (texlab) https://github.com/latex-lsp/texlab A completion engine built from scratch for (La)TeX. See https://github.com/latex-lsp/texlab/blob/master/docs/options.md for configuration options. Setup require 'lspconfig' . texlab . setup {} Commands TexlabBuild: Build the current buffer TexlabForward: Forward search from current position Default Values cmd = { \"texlab\" } filetypes = { \"tex\" , \"bib\" } root_dir = vim 's starting directory settings = { texlab = { auxDirectory = \".\", bibtexFormatter = \"texlab\", build = { args = { \"-pdf\", \"-interaction=nonstopmode\", \"-synctex=1\", \"%f\" }, executable = \"latexmk\", forwardSearchAfter = false, onSave = false }, chktex = { onEdit = false, onOpenAndSave = false }, diagnosticsDelay = 300, formatterLineLength = 80, forwardSearch = { args = {} }, latexFormatter = \"latexindent\", latexindent = { modifyLineBreaks = false } } }","title":"TexLab (texlab)"},{"location":"lsp/texlab/#texlab-texlab","text":"https://github.com/latex-lsp/texlab A completion engine built from scratch for (La)TeX. See https://github.com/latex-lsp/texlab/blob/master/docs/options.md for configuration options.","title":"TexLab (texlab)"},{"location":"lsp/texlab/#setup","text":"require 'lspconfig' . texlab . setup {}","title":"Setup"},{"location":"lsp/texlab/#commands","text":"TexlabBuild: Build the current buffer TexlabForward: Forward search from current position","title":"Commands"},{"location":"lsp/texlab/#default-values","text":"cmd = { \"texlab\" } filetypes = { \"tex\" , \"bib\" } root_dir = vim 's starting directory settings = { texlab = { auxDirectory = \".\", bibtexFormatter = \"texlab\", build = { args = { \"-pdf\", \"-interaction=nonstopmode\", \"-synctex=1\", \"%f\" }, executable = \"latexmk\", forwardSearchAfter = false, onSave = false }, chktex = { onEdit = false, onOpenAndSave = false }, diagnosticsDelay = 300, formatterLineLength = 80, forwardSearch = { args = {} }, latexFormatter = \"latexindent\", latexindent = { modifyLineBreaks = false } } }","title":"Default Values"},{"location":"lsp/tflint/","text":"Terraform (tflint) https://github.com/terraform-linters/tflint A pluggable Terraform linter that can act as lsp server. Installation instructions can be found in https://github.com/terraform-linters/tflint#installation . Setup require 'lspconfig' . tflint . setup {} Default Values cmd = { \"tflint\" , \"--langserver\" } filetypes = { \"terraform\" } root_dir = root_pattern ( \".terraform\" , \".git\" , \".tflint.hcl\" )","title":"Terraform (tflint)"},{"location":"lsp/tflint/#terraform-tflint","text":"https://github.com/terraform-linters/tflint A pluggable Terraform linter that can act as lsp server. Installation instructions can be found in https://github.com/terraform-linters/tflint#installation .","title":"Terraform (tflint)"},{"location":"lsp/tflint/#setup","text":"require 'lspconfig' . tflint . setup {}","title":"Setup"},{"location":"lsp/tflint/#default-values","text":"cmd = { \"tflint\" , \"--langserver\" } filetypes = { \"terraform\" } root_dir = root_pattern ( \".terraform\" , \".git\" , \".tflint.hcl\" )","title":"Default Values"},{"location":"lsp/tsserver/","text":"TypeScript (tsserver) https://github.com/theia-ide/typescript-language-server typescript-language-server depends on typescript . Both packages can be installed via npm : npm install -g typescript typescript-language-server Setup require 'lspconfig' . tsserver . setup {} Default Values cmd = { \"typescript-language-server\" , \"--stdio\" } filetypes = { \"javascript\" , \"javascriptreact\" , \"javascript.jsx\" , \"typescript\" , \"typescriptreact\" , \"typescript.tsx\" } root_dir = root_pattern ( \"package.json\" , \"tsconfig.json\" , \"jsconfig.json\" , \".git\" )","title":"TypeScript (tsserver)"},{"location":"lsp/tsserver/#typescript-tsserver","text":"https://github.com/theia-ide/typescript-language-server typescript-language-server depends on typescript . Both packages can be installed via npm : npm install -g typescript typescript-language-server","title":"TypeScript (tsserver)"},{"location":"lsp/tsserver/#setup","text":"require 'lspconfig' . tsserver . setup {}","title":"Setup"},{"location":"lsp/tsserver/#default-values","text":"cmd = { \"typescript-language-server\" , \"--stdio\" } filetypes = { \"javascript\" , \"javascriptreact\" , \"javascript.jsx\" , \"typescript\" , \"typescriptreact\" , \"typescript.tsx\" } root_dir = root_pattern ( \"package.json\" , \"tsconfig.json\" , \"jsconfig.json\" , \".git\" )","title":"Default Values"},{"location":"lsp/vala_ls/","text":"Vala (vala_ls) https://github.com/benwaffle/vala-language-server Setup require 'lspconfig' . vala_ls . setup {} Default Values cmd = { \"vala-language-server\" } filetypes = { \"vala\" , \"genie\" } root_dir = root_pattern ( \"meson.build\" , \".git\" )","title":"Vala (vala_ls)"},{"location":"lsp/vala_ls/#vala-vala_ls","text":"https://github.com/benwaffle/vala-language-server","title":"Vala (vala_ls)"},{"location":"lsp/vala_ls/#setup","text":"require 'lspconfig' . vala_ls . setup {}","title":"Setup"},{"location":"lsp/vala_ls/#default-values","text":"cmd = { \"vala-language-server\" } filetypes = { \"vala\" , \"genie\" } root_dir = root_pattern ( \"meson.build\" , \".git\" )","title":"Default Values"},{"location":"lsp/vimls/","text":"VimScript (vimls) https://github.com/iamcco/vim-language-server You can install vim-language-server via npm: npm install -g vim-language-server Setup require 'lspconfig' . vimls . setup {} Default Values cmd = { \"vim-language-server\" , \"--stdio\" } filetypes = { \"vim\" } init_options = { diagnostic = { enable = true }, indexes = { count = 3 , gap = 100 , projectRootPatterns = { \"runtime\" , \"nvim\" , \".git\" , \"autoload\" , \"plugin\" }, runtimepath = true }, iskeyword = \"@,48-57,_,192-255,-#\" , runtimepath = \"\" , suggest = { fromRuntimepath = true , fromVimruntime = true }, vimruntime = \"\" } root_dir = function ( fname ) return util . find_git_ancestor ( fname ) or vim . fn . getcwd () end ,","title":"VimScript (vimls)"},{"location":"lsp/vimls/#vimscript-vimls","text":"https://github.com/iamcco/vim-language-server You can install vim-language-server via npm: npm install -g vim-language-server","title":"VimScript (vimls)"},{"location":"lsp/vimls/#setup","text":"require 'lspconfig' . vimls . setup {}","title":"Setup"},{"location":"lsp/vimls/#default-values","text":"cmd = { \"vim-language-server\" , \"--stdio\" } filetypes = { \"vim\" } init_options = { diagnostic = { enable = true }, indexes = { count = 3 , gap = 100 , projectRootPatterns = { \"runtime\" , \"nvim\" , \".git\" , \"autoload\" , \"plugin\" }, runtimepath = true }, iskeyword = \"@,48-57,_,192-255,-#\" , runtimepath = \"\" , suggest = { fromRuntimepath = true , fromVimruntime = true }, vimruntime = \"\" } root_dir = function ( fname ) return util . find_git_ancestor ( fname ) or vim . fn . getcwd () end ,","title":"Default Values"},{"location":"lsp/vls/","text":"V (vls) https://github.com/vlang/vls V language server. v-language-server can be installed by following the instructions here . By default, v-language-server doesn't have a cmd set. This is because nvim-lspconfig does not make assumptions about your path. You must add the following to your init.vim or init.lua to set cmd to the absolute path ($HOME and ~ are not expanded) of your unzipped and compiled v-language-server. -- set the path to the vls installation; local vls_root_path = vim . fn . stdpath ( 'cache' ) .. '/lspconfig/vls' local vls_binary = vls_root_path .. \"/cmd/vls/vls\" require 'lspconfig' . vls . setup { cmd = { vls_binary }, } Setup require 'lspconfig' . vls . setup {} Default Values filetypes = { \"vlang\" } root_dir = root_pattern ( \"v.mod\" , \".git\" )","title":"V (vls)"},{"location":"lsp/vls/#v-vls","text":"https://github.com/vlang/vls V language server. v-language-server can be installed by following the instructions here . By default, v-language-server doesn't have a cmd set. This is because nvim-lspconfig does not make assumptions about your path. You must add the following to your init.vim or init.lua to set cmd to the absolute path ($HOME and ~ are not expanded) of your unzipped and compiled v-language-server. -- set the path to the vls installation; local vls_root_path = vim . fn . stdpath ( 'cache' ) .. '/lspconfig/vls' local vls_binary = vls_root_path .. \"/cmd/vls/vls\" require 'lspconfig' . vls . setup { cmd = { vls_binary }, }","title":"V (vls)"},{"location":"lsp/vls/#setup","text":"require 'lspconfig' . vls . setup {}","title":"Setup"},{"location":"lsp/vls/#default-values","text":"filetypes = { \"vlang\" } root_dir = root_pattern ( \"v.mod\" , \".git\" )","title":"Default Values"},{"location":"lsp/vuels/","text":"Vue (vuels) https://github.com/vuejs/vetur/tree/master/server Vue language server(vls) vue-language-server can be installed via npm : npm install -g vls Setup require 'lspconfig' . vuels . setup {} Default Values cmd = { \"vls\" } filetypes = { \"vue\" } init_options = { config = { css = {}, emmet = {}, html = { suggest = {} }, javascript = { format = {} }, stylusSupremacy = {}, typescript = { format = {} }, vetur = { completion = { autoImport = false , tagCasing = \"kebab\" , useScaffoldSnippets = false }, format = { defaultFormatter = { js = \"none\" , ts = \"none\" }, defaultFormatterOptions = {}, scriptInitialIndent = false , styleInitialIndent = false }, useWorkspaceDependencies = false , validation = { script = true , style = true , template = true } } } } root_dir = root_pattern ( \"package.json\" , \"vue.config.js\" ) This server accepts configuration via the settings key. Available settings vetur.completion.autoImport Type: boolean Default: true Include completion for module export and auto import them vetur.completion.scaffoldSnippetSources Type: object Default: {user = \"\ud83d\uddd2\ufe0f\",vetur = \"\u270c\",workspace = \"\ud83d\udcbc\"} Where Vetur source Scaffold Snippets from and how to indicate them. Set a source to \\\"\\\" to disable it. - workspace\\: `\\<WORKSPACE>\\/.vscode\\/vetur\\/snippets`. - user\\: `\\<USER-DATA-DIR>\\/User\\/snippets\\/vetur`. - vetur\\: Bundled in Vetur. The default is\\: ``` \\\"vetur.completion.scaffoldSnippetSources\\\"\\: { \\\"workspace\\\"\\: \\\"\ud83d\udcbc\\\"\\, \\\"user\\\"\\: \\\"\ud83d\uddd2\ufe0f\\\"\\, \\\"vetur\\\"\\: \\\"\u270c\\\" } ``` Alternatively\\, you can do\\: ``` \\\"vetur.completion.scaffoldSnippetSources\\\"\\: { \\\"workspace\\\"\\: \\\"(W)\\\"\\, \\\"user\\\"\\: \\\"(U)\\\"\\, \\\"vetur\\\"\\: \\\"(V)\\\" } ``` Read more\\: https\\:\\/\\/vuejs.github.io\\/vetur\\/snippet.html. vetur.completion.tagCasing enum { \"initial\", \"kebab\" } Default: \"kebab\" Casing conversion for tag completion vetur.dev.logLevel enum { \"INFO\", \"DEBUG\" } Default: \"INFO\" Log level for VLS vetur.dev.vlsPath Type: string Path to vls for Vetur developers. There are two ways of using it. 1. Clone vuejs\\/vetur from GitHub\\, build it and point it to the ABSOLUTE path of `\\/server`. 2. `yarn global add vls` and point Vetur to the installed location (`yarn global dir` + node_modules\\/vls) vetur.dev.vlsPort Type: number Default: -1 The port that VLS listens to. Can be used for attaching to the VLS Node process for debugging \\/ profiling. vetur.experimental.templateInterpolationService Type: boolean Enable template interpolation service that offers hover \\/ definition \\/ references in Vue interpolations. vetur.format.defaultFormatter.css enum { \"none\", \"prettier\" } Default: \"prettier\" Default formatter for \\<style> region vetur.format.defaultFormatter.html enum { \"none\", \"prettyhtml\", \"js-beautify-html\", \"prettier\" } Default: \"prettier\" Default formatter for \\<template> region vetur.format.defaultFormatter.js enum { \"none\", \"prettier\", \"prettier-eslint\", \"vscode-typescript\" } Default: \"prettier\" Default formatter for \\<script> region vetur.format.defaultFormatter.less enum { \"none\", \"prettier\" } Default: \"prettier\" Default formatter for \\<style lang\\=\\'less\\'> region vetur.format.defaultFormatter.postcss enum { \"none\", \"prettier\" } Default: \"prettier\" Default formatter for \\<style lang\\=\\'postcss\\'> region vetur.format.defaultFormatter.pug enum { \"none\", \"prettier\" } Default: \"prettier\" Default formatter for \\<template lang\\=\\'pug\\'> region vetur.format.defaultFormatter.sass enum { \"none\", \"sass-formatter\" } Default: \"sass-formatter\" Default formatter for \\<style lang\\=\\'sass\\'> region vetur.format.defaultFormatter.scss enum { \"none\", \"prettier\" } Default: \"prettier\" Default formatter for \\<style lang\\=\\'scss\\'> region vetur.format.defaultFormatter.stylus enum { \"none\", \"stylus-supremacy\" } Default: \"stylus-supremacy\" Default formatter for \\<style lang\\=\\'stylus\\'> region vetur.format.defaultFormatter.ts enum { \"none\", \"prettier\", \"prettier-tslint\", \"vscode-typescript\" } Default: \"prettier\" Default formatter for \\<script> region vetur.format.defaultFormatterOptions Type: object Default: {[\"js-beautify-html\"] = {wrap_attributes = \"force-expand-multiline\"},prettyhtml = {printWidth = 100,singleQuote = false,sortAttributes = false,wrapAttributes = false}} Options for all default formatters vetur.format.enable Type: boolean Default: true Enable\\/disable the Vetur document formatter. vetur.format.options.tabSize Type: number Default: 2 Number of spaces per indentation level. Inherited by all formatters. vetur.format.options.useTabs Type: boolean Use tabs for indentation. Inherited by all formatters. vetur.format.scriptInitialIndent Type: boolean Whether to have initial indent for \\<script> region vetur.format.styleInitialIndent Type: boolean Whether to have initial indent for \\<style> region vetur.grammar.customBlocks Type: object Default: {docs = \"md\",i18n = \"json\"} Mapping from custom block tag name to language name. Used for generating grammar to support syntax highlighting for custom blocks. vetur.ignoreProjectWarning Type: boolean Vetur will warn about not setup correctly for the project. You can disable it. vetur.languageFeatures.codeActions Type: boolean Default: true Whether to enable codeActions vetur.languageFeatures.semanticTokens Type: boolean Default: true Whether to enable semantic highlighting. Currently only works for typescript vetur.languageFeatures.updateImportOnFileMove Type: boolean Default: true Whether to automatic updating import path when rename or move a file vetur.trace.server enum { \"off\", \"messages\", \"verbose\" } Default: \"off\" Traces the communication between VS Code and Vue Language Server. vetur.underline.refValue Type: boolean Default: true Enable underline `.value` when using composition API. vetur.useWorkspaceDependencies Type: boolean Use dependencies from workspace. Currently only for TypeScript. vetur.validation.interpolation Type: boolean Default: true Validate interpolations in \\<template> region using TypeScript language service vetur.validation.script Type: boolean Default: true Validate js\\/ts in \\<script> vetur.validation.style Type: boolean Default: true Validate css\\/scss\\/less\\/postcss in \\<style> vetur.validation.template Type: boolean Default: true Validate vue-html in \\<template> using eslint-plugin-vue vetur.validation.templateProps Type: boolean Validate props usage in \\<template> region. Show error\\/warning for not passing declared props to child components and show error for passing wrongly typed interpolation expressions","title":"Vue (vuels)"},{"location":"lsp/vuels/#vue-vuels","text":"https://github.com/vuejs/vetur/tree/master/server Vue language server(vls) vue-language-server can be installed via npm : npm install -g vls","title":"Vue (vuels)"},{"location":"lsp/vuels/#setup","text":"require 'lspconfig' . vuels . setup {}","title":"Setup"},{"location":"lsp/vuels/#default-values","text":"cmd = { \"vls\" } filetypes = { \"vue\" } init_options = { config = { css = {}, emmet = {}, html = { suggest = {} }, javascript = { format = {} }, stylusSupremacy = {}, typescript = { format = {} }, vetur = { completion = { autoImport = false , tagCasing = \"kebab\" , useScaffoldSnippets = false }, format = { defaultFormatter = { js = \"none\" , ts = \"none\" }, defaultFormatterOptions = {}, scriptInitialIndent = false , styleInitialIndent = false }, useWorkspaceDependencies = false , validation = { script = true , style = true , template = true } } } } root_dir = root_pattern ( \"package.json\" , \"vue.config.js\" ) This server accepts configuration via the settings key.","title":"Default Values"},{"location":"lsp/vuels/#available-settings","text":"","title":"Available settings"},{"location":"lsp/vuels/#veturcompletionautoimport","text":"Type: boolean Default: true Include completion for module export and auto import them","title":"vetur.completion.autoImport"},{"location":"lsp/vuels/#veturcompletionscaffoldsnippetsources","text":"Type: object Default: {user = \"\ud83d\uddd2\ufe0f\",vetur = \"\u270c\",workspace = \"\ud83d\udcbc\"} Where Vetur source Scaffold Snippets from and how to indicate them. Set a source to \\\"\\\" to disable it. - workspace\\: `\\<WORKSPACE>\\/.vscode\\/vetur\\/snippets`. - user\\: `\\<USER-DATA-DIR>\\/User\\/snippets\\/vetur`. - vetur\\: Bundled in Vetur. The default is\\: ``` \\\"vetur.completion.scaffoldSnippetSources\\\"\\: { \\\"workspace\\\"\\: \\\"\ud83d\udcbc\\\"\\, \\\"user\\\"\\: \\\"\ud83d\uddd2\ufe0f\\\"\\, \\\"vetur\\\"\\: \\\"\u270c\\\" } ``` Alternatively\\, you can do\\: ``` \\\"vetur.completion.scaffoldSnippetSources\\\"\\: { \\\"workspace\\\"\\: \\\"(W)\\\"\\, \\\"user\\\"\\: \\\"(U)\\\"\\, \\\"vetur\\\"\\: \\\"(V)\\\" } ``` Read more\\: https\\:\\/\\/vuejs.github.io\\/vetur\\/snippet.html.","title":"vetur.completion.scaffoldSnippetSources"},{"location":"lsp/vuels/#veturcompletiontagcasing","text":"enum { \"initial\", \"kebab\" } Default: \"kebab\" Casing conversion for tag completion","title":"vetur.completion.tagCasing"},{"location":"lsp/vuels/#veturdevloglevel","text":"enum { \"INFO\", \"DEBUG\" } Default: \"INFO\" Log level for VLS","title":"vetur.dev.logLevel"},{"location":"lsp/vuels/#veturdevvlspath","text":"Type: string Path to vls for Vetur developers. There are two ways of using it. 1. Clone vuejs\\/vetur from GitHub\\, build it and point it to the ABSOLUTE path of `\\/server`. 2. `yarn global add vls` and point Vetur to the installed location (`yarn global dir` + node_modules\\/vls)","title":"vetur.dev.vlsPath"},{"location":"lsp/vuels/#veturdevvlsport","text":"Type: number Default: -1 The port that VLS listens to. Can be used for attaching to the VLS Node process for debugging \\/ profiling.","title":"vetur.dev.vlsPort"},{"location":"lsp/vuels/#veturexperimentaltemplateinterpolationservice","text":"Type: boolean Enable template interpolation service that offers hover \\/ definition \\/ references in Vue interpolations.","title":"vetur.experimental.templateInterpolationService"},{"location":"lsp/vuels/#veturformatdefaultformattercss","text":"enum { \"none\", \"prettier\" } Default: \"prettier\" Default formatter for \\<style> region","title":"vetur.format.defaultFormatter.css"},{"location":"lsp/vuels/#veturformatdefaultformatterhtml","text":"enum { \"none\", \"prettyhtml\", \"js-beautify-html\", \"prettier\" } Default: \"prettier\" Default formatter for \\<template> region","title":"vetur.format.defaultFormatter.html"},{"location":"lsp/vuels/#veturformatdefaultformatterjs","text":"enum { \"none\", \"prettier\", \"prettier-eslint\", \"vscode-typescript\" } Default: \"prettier\" Default formatter for \\<script> region","title":"vetur.format.defaultFormatter.js"},{"location":"lsp/vuels/#veturformatdefaultformatterless","text":"enum { \"none\", \"prettier\" } Default: \"prettier\" Default formatter for \\<style lang\\=\\'less\\'> region","title":"vetur.format.defaultFormatter.less"},{"location":"lsp/vuels/#veturformatdefaultformatterpostcss","text":"enum { \"none\", \"prettier\" } Default: \"prettier\" Default formatter for \\<style lang\\=\\'postcss\\'> region","title":"vetur.format.defaultFormatter.postcss"},{"location":"lsp/vuels/#veturformatdefaultformatterpug","text":"enum { \"none\", \"prettier\" } Default: \"prettier\" Default formatter for \\<template lang\\=\\'pug\\'> region","title":"vetur.format.defaultFormatter.pug"},{"location":"lsp/vuels/#veturformatdefaultformattersass","text":"enum { \"none\", \"sass-formatter\" } Default: \"sass-formatter\" Default formatter for \\<style lang\\=\\'sass\\'> region","title":"vetur.format.defaultFormatter.sass"},{"location":"lsp/vuels/#veturformatdefaultformatterscss","text":"enum { \"none\", \"prettier\" } Default: \"prettier\" Default formatter for \\<style lang\\=\\'scss\\'> region","title":"vetur.format.defaultFormatter.scss"},{"location":"lsp/vuels/#veturformatdefaultformatterstylus","text":"enum { \"none\", \"stylus-supremacy\" } Default: \"stylus-supremacy\" Default formatter for \\<style lang\\=\\'stylus\\'> region","title":"vetur.format.defaultFormatter.stylus"},{"location":"lsp/vuels/#veturformatdefaultformatterts","text":"enum { \"none\", \"prettier\", \"prettier-tslint\", \"vscode-typescript\" } Default: \"prettier\" Default formatter for \\<script> region","title":"vetur.format.defaultFormatter.ts"},{"location":"lsp/vuels/#veturformatdefaultformatteroptions","text":"Type: object Default: {[\"js-beautify-html\"] = {wrap_attributes = \"force-expand-multiline\"},prettyhtml = {printWidth = 100,singleQuote = false,sortAttributes = false,wrapAttributes = false}} Options for all default formatters","title":"vetur.format.defaultFormatterOptions"},{"location":"lsp/vuels/#veturformatenable","text":"Type: boolean Default: true Enable\\/disable the Vetur document formatter.","title":"vetur.format.enable"},{"location":"lsp/vuels/#veturformatoptionstabsize","text":"Type: number Default: 2 Number of spaces per indentation level. Inherited by all formatters.","title":"vetur.format.options.tabSize"},{"location":"lsp/vuels/#veturformatoptionsusetabs","text":"Type: boolean Use tabs for indentation. Inherited by all formatters.","title":"vetur.format.options.useTabs"},{"location":"lsp/vuels/#veturformatscriptinitialindent","text":"Type: boolean Whether to have initial indent for \\<script> region","title":"vetur.format.scriptInitialIndent"},{"location":"lsp/vuels/#veturformatstyleinitialindent","text":"Type: boolean Whether to have initial indent for \\<style> region","title":"vetur.format.styleInitialIndent"},{"location":"lsp/vuels/#veturgrammarcustomblocks","text":"Type: object Default: {docs = \"md\",i18n = \"json\"} Mapping from custom block tag name to language name. Used for generating grammar to support syntax highlighting for custom blocks.","title":"vetur.grammar.customBlocks"},{"location":"lsp/vuels/#veturignoreprojectwarning","text":"Type: boolean Vetur will warn about not setup correctly for the project. You can disable it.","title":"vetur.ignoreProjectWarning"},{"location":"lsp/vuels/#veturlanguagefeaturescodeactions","text":"Type: boolean Default: true Whether to enable codeActions","title":"vetur.languageFeatures.codeActions"},{"location":"lsp/vuels/#veturlanguagefeaturessemantictokens","text":"Type: boolean Default: true Whether to enable semantic highlighting. Currently only works for typescript","title":"vetur.languageFeatures.semanticTokens"},{"location":"lsp/vuels/#veturlanguagefeaturesupdateimportonfilemove","text":"Type: boolean Default: true Whether to automatic updating import path when rename or move a file","title":"vetur.languageFeatures.updateImportOnFileMove"},{"location":"lsp/vuels/#veturtraceserver","text":"enum { \"off\", \"messages\", \"verbose\" } Default: \"off\" Traces the communication between VS Code and Vue Language Server.","title":"vetur.trace.server"},{"location":"lsp/vuels/#veturunderlinerefvalue","text":"Type: boolean Default: true Enable underline `.value` when using composition API.","title":"vetur.underline.refValue"},{"location":"lsp/vuels/#veturuseworkspacedependencies","text":"Type: boolean Use dependencies from workspace. Currently only for TypeScript.","title":"vetur.useWorkspaceDependencies"},{"location":"lsp/vuels/#veturvalidationinterpolation","text":"Type: boolean Default: true Validate interpolations in \\<template> region using TypeScript language service","title":"vetur.validation.interpolation"},{"location":"lsp/vuels/#veturvalidationscript","text":"Type: boolean Default: true Validate js\\/ts in \\<script>","title":"vetur.validation.script"},{"location":"lsp/vuels/#veturvalidationstyle","text":"Type: boolean Default: true Validate css\\/scss\\/less\\/postcss in \\<style>","title":"vetur.validation.style"},{"location":"lsp/vuels/#veturvalidationtemplate","text":"Type: boolean Default: true Validate vue-html in \\<template> using eslint-plugin-vue","title":"vetur.validation.template"},{"location":"lsp/vuels/#veturvalidationtemplateprops","text":"Type: boolean Validate props usage in \\<template> region. Show error\\/warning for not passing declared props to child components and show error for passing wrongly typed interpolation expressions","title":"vetur.validation.templateProps"},{"location":"lsp/yamlls/","text":"YAML (yamlls) https://github.com/redhat-developer/yaml-language-server yaml-language-server can be installed via npm : npm install -g yaml-language-server Setup require 'lspconfig' . yamlls . setup {} Default Values cmd = { \"yaml-language-server\" , \"--stdio\" } filetypes = { \"yaml\" } root_dir = root_pattern ( \".git\" , vim . fn . getcwd ()) This server accepts configuration via the settings key. Available settings redhat.telemetry.enabled Type: boolean Default: vim.NIL null yaml.completion Type: boolean Default: true Enable\\/disable completion feature yaml.customTags Type: array Default: {} Custom tags for the parser to use yaml.disableAdditionalProperties Type: boolean Globally set additionalProperties to false for all objects. So if its true\\, no extra properties are allowed inside yaml. yaml.format.bracketSpacing Type: boolean Default: true Print spaces between brackets in objects yaml.format.enable Type: boolean Default: true Enable\\/disable default YAML formatter yaml.format.printWidth Type: integer Default: 80 Specify the line length that the printer will wrap on yaml.format.proseWrap enum { \"preserve\", \"never\", \"always\" } Default: \"preserve\" Always\\: wrap prose if it exeeds the print width\\, Never\\: never wrap the prose\\, Preserve\\: wrap prose as-is yaml.format.singleQuote Type: boolean Use single quotes instead of double quotes yaml.hover Type: boolean Default: true Enable\\/disable hover feature yaml.maxItemsComputed Type: integer Default: 5000 The maximum number of outline symbols and folding regions computed (limited for performance reasons). yaml.schemaStore.enable Type: boolean Default: true Automatically pull available YAML schemas from JSON Schema Store yaml.schemaStore.url Type: string Default: \"https://www.schemastore.org/api/json/catalog.json\" URL of schema store catalog to use yaml.schemas Type: object Default: vim.empty_dict() Associate schemas to YAML files in the current workspace yaml.trace.server enum { \"off\", \"messages\", \"verbose\" } Default: \"off\" Traces the communication between VSCode and the YAML language service. yaml.validate Type: boolean Default: true Enable\\/disable validation feature","title":"YAML (yamlls)"},{"location":"lsp/yamlls/#yaml-yamlls","text":"https://github.com/redhat-developer/yaml-language-server yaml-language-server can be installed via npm : npm install -g yaml-language-server","title":"YAML (yamlls)"},{"location":"lsp/yamlls/#setup","text":"require 'lspconfig' . yamlls . setup {}","title":"Setup"},{"location":"lsp/yamlls/#default-values","text":"cmd = { \"yaml-language-server\" , \"--stdio\" } filetypes = { \"yaml\" } root_dir = root_pattern ( \".git\" , vim . fn . getcwd ()) This server accepts configuration via the settings key.","title":"Default Values"},{"location":"lsp/yamlls/#available-settings","text":"","title":"Available settings"},{"location":"lsp/yamlls/#redhattelemetryenabled","text":"Type: boolean Default: vim.NIL null","title":"redhat.telemetry.enabled"},{"location":"lsp/yamlls/#yamlcompletion","text":"Type: boolean Default: true Enable\\/disable completion feature","title":"yaml.completion"},{"location":"lsp/yamlls/#yamlcustomtags","text":"Type: array Default: {} Custom tags for the parser to use","title":"yaml.customTags"},{"location":"lsp/yamlls/#yamldisableadditionalproperties","text":"Type: boolean Globally set additionalProperties to false for all objects. So if its true\\, no extra properties are allowed inside yaml.","title":"yaml.disableAdditionalProperties"},{"location":"lsp/yamlls/#yamlformatbracketspacing","text":"Type: boolean Default: true Print spaces between brackets in objects","title":"yaml.format.bracketSpacing"},{"location":"lsp/yamlls/#yamlformatenable","text":"Type: boolean Default: true Enable\\/disable default YAML formatter","title":"yaml.format.enable"},{"location":"lsp/yamlls/#yamlformatprintwidth","text":"Type: integer Default: 80 Specify the line length that the printer will wrap on","title":"yaml.format.printWidth"},{"location":"lsp/yamlls/#yamlformatprosewrap","text":"enum { \"preserve\", \"never\", \"always\" } Default: \"preserve\" Always\\: wrap prose if it exeeds the print width\\, Never\\: never wrap the prose\\, Preserve\\: wrap prose as-is","title":"yaml.format.proseWrap"},{"location":"lsp/yamlls/#yamlformatsinglequote","text":"Type: boolean Use single quotes instead of double quotes","title":"yaml.format.singleQuote"},{"location":"lsp/yamlls/#yamlhover","text":"Type: boolean Default: true Enable\\/disable hover feature","title":"yaml.hover"},{"location":"lsp/yamlls/#yamlmaxitemscomputed","text":"Type: integer Default: 5000 The maximum number of outline symbols and folding regions computed (limited for performance reasons).","title":"yaml.maxItemsComputed"},{"location":"lsp/yamlls/#yamlschemastoreenable","text":"Type: boolean Default: true Automatically pull available YAML schemas from JSON Schema Store","title":"yaml.schemaStore.enable"},{"location":"lsp/yamlls/#yamlschemastoreurl","text":"Type: string Default: \"https://www.schemastore.org/api/json/catalog.json\" URL of schema store catalog to use","title":"yaml.schemaStore.url"},{"location":"lsp/yamlls/#yamlschemas","text":"Type: object Default: vim.empty_dict() Associate schemas to YAML files in the current workspace","title":"yaml.schemas"},{"location":"lsp/yamlls/#yamltraceserver","text":"enum { \"off\", \"messages\", \"verbose\" } Default: \"off\" Traces the communication between VSCode and the YAML language service.","title":"yaml.trace.server"},{"location":"lsp/yamlls/#yamlvalidate","text":"Type: boolean Default: true Enable\\/disable validation feature","title":"yaml.validate"},{"location":"lsp/zeta_note/","text":"Markdown (zeta_note) https://github.com/artempyanykh/zeta-note Markdown LSP server for easy note-taking with cross-references and diagnostics. Binaries can be downloaded from https://github.com/artempyanykh/zeta-note/releases By default, zeta-note doesn't have a cmd set. This is because nvim-lspconfig does not make assumptions about your path. You must add the following to your init.vim or init.lua to set cmd to the absolute path ($HOME and ~ are not expanded) of your zeta-note binary. require 'lspconfig' . zeta_note . setup { cmd = { 'path/to/zeta-note' } } Setup require 'lspconfig' . zeta_note . setup {} Default Values filetypes = { \"markdown\" } root_dir = root_pattern ( \".zeta.toml\" ) This server accepts configuration via the settings key. Available settings zetaNote.customCommand Type: string When set use this command to run the language server. The command is split on spaces\\: first part is the command name\\, the rest is the arguments. zetaNote.customCommandDir Type: string null zetaNote.trace.server enum { \"off\", \"messages\", \"verbose\" } Default: \"verbose\" Level of verbosity in communicating with the server","title":"Markdown (zeta_note)"},{"location":"lsp/zeta_note/#markdown-zeta_note","text":"https://github.com/artempyanykh/zeta-note Markdown LSP server for easy note-taking with cross-references and diagnostics. Binaries can be downloaded from https://github.com/artempyanykh/zeta-note/releases By default, zeta-note doesn't have a cmd set. This is because nvim-lspconfig does not make assumptions about your path. You must add the following to your init.vim or init.lua to set cmd to the absolute path ($HOME and ~ are not expanded) of your zeta-note binary. require 'lspconfig' . zeta_note . setup { cmd = { 'path/to/zeta-note' } }","title":"Markdown (zeta_note)"},{"location":"lsp/zeta_note/#setup","text":"require 'lspconfig' . zeta_note . setup {}","title":"Setup"},{"location":"lsp/zeta_note/#default-values","text":"filetypes = { \"markdown\" } root_dir = root_pattern ( \".zeta.toml\" ) This server accepts configuration via the settings key.","title":"Default Values"},{"location":"lsp/zeta_note/#available-settings","text":"","title":"Available settings"},{"location":"lsp/zeta_note/#zetanotecustomcommand","text":"Type: string When set use this command to run the language server. The command is split on spaces\\: first part is the command name\\, the rest is the arguments.","title":"zetaNote.customCommand"},{"location":"lsp/zeta_note/#zetanotecustomcommanddir","text":"Type: string null","title":"zetaNote.customCommandDir"},{"location":"lsp/zeta_note/#zetanotetraceserver","text":"enum { \"off\", \"messages\", \"verbose\" } Default: \"verbose\" Level of verbosity in communicating with the server","title":"zetaNote.trace.server"},{"location":"lsp/zls/","text":"Zig (zls) https://github.com/zigtools/zls `Zig LSP implementation + Zig Language Server`. Setup require 'lspconfig' . zls . setup {} Default Values cmd = { \"zls\" } filetypes = { \"zig\" , \"zir\" } root_dir = util . root_pattern ( \"zls.json\" , \".git\" ) or current_file_dirname","title":"Zig (zls)"},{"location":"lsp/zls/#zig-zls","text":"https://github.com/zigtools/zls `Zig LSP implementation + Zig Language Server`.","title":"Zig (zls)"},{"location":"lsp/zls/#setup","text":"require 'lspconfig' . zls . setup {}","title":"Setup"},{"location":"lsp/zls/#default-values","text":"cmd = { \"zls\" } filetypes = { \"zig\" , \"zir\" } root_dir = util . root_pattern ( \"zls.json\" , \".git\" ) or current_file_dirname","title":"Default Values"}]}